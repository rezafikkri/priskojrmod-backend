
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Admin
 * 
 */
export type Admin = $Result.DefaultSelection<Prisma.$AdminPayload>
/**
 * Model DonationLink
 * 
 */
export type DonationLink = $Result.DefaultSelection<Prisma.$DonationLinkPayload>
/**
 * Model Owner
 * 
 */
export type Owner = $Result.DefaultSelection<Prisma.$OwnerPayload>
/**
 * Model Customer
 * 
 */
export type Customer = $Result.DefaultSelection<Prisma.$CustomerPayload>
/**
 * Model License
 * 
 */
export type License = $Result.DefaultSelection<Prisma.$LicensePayload>
/**
 * Model LicenseTranslation
 * 
 */
export type LicenseTranslation = $Result.DefaultSelection<Prisma.$LicenseTranslationPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model ProductTranslation
 * 
 */
export type ProductTranslation = $Result.DefaultSelection<Prisma.$ProductTranslationPayload>
/**
 * Model ProductDiscount
 * 
 */
export type ProductDiscount = $Result.DefaultSelection<Prisma.$ProductDiscountPayload>
/**
 * Model ProductCoupon
 * 
 */
export type ProductCoupon = $Result.DefaultSelection<Prisma.$ProductCouponPayload>
/**
 * Model ProductImage
 * 
 */
export type ProductImage = $Result.DefaultSelection<Prisma.$ProductImagePayload>
/**
 * Model ProductVariant
 * 
 */
export type ProductVariant = $Result.DefaultSelection<Prisma.$ProductVariantPayload>
/**
 * Model ProductPrice
 * 
 */
export type ProductPrice = $Result.DefaultSelection<Prisma.$ProductPricePayload>
/**
 * Model TermsOfService
 * 
 */
export type TermsOfService = $Result.DefaultSelection<Prisma.$TermsOfServicePayload>
/**
 * Model TermsOfServiceTranslation
 * 
 */
export type TermsOfServiceTranslation = $Result.DefaultSelection<Prisma.$TermsOfServiceTranslationPayload>
/**
 * Model PrivacyPolicy
 * 
 */
export type PrivacyPolicy = $Result.DefaultSelection<Prisma.$PrivacyPolicyPayload>
/**
 * Model PrivacyPolicyTranslation
 * 
 */
export type PrivacyPolicyTranslation = $Result.DefaultSelection<Prisma.$PrivacyPolicyTranslationPayload>
/**
 * Model AboutUs
 * 
 */
export type AboutUs = $Result.DefaultSelection<Prisma.$AboutUsPayload>
/**
 * Model AboutUsTranslation
 * 
 */
export type AboutUsTranslation = $Result.DefaultSelection<Prisma.$AboutUsTranslationPayload>
/**
 * Model Faq
 * 
 */
export type Faq = $Result.DefaultSelection<Prisma.$FaqPayload>
/**
 * Model FaqTranslation
 * 
 */
export type FaqTranslation = $Result.DefaultSelection<Prisma.$FaqTranslationPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const CurrencyCode: {
  IDR: 'IDR',
  USD: 'USD'
};

export type CurrencyCode = (typeof CurrencyCode)[keyof typeof CurrencyCode]


export const PriceType: {
  paid: 'paid',
  free: 'free'
};

export type PriceType = (typeof PriceType)[keyof typeof PriceType]


export const Language: {
  id: 'id',
  en: 'en'
};

export type Language = (typeof Language)[keyof typeof Language]

}

export type CurrencyCode = $Enums.CurrencyCode

export const CurrencyCode: typeof $Enums.CurrencyCode

export type PriceType = $Enums.PriceType

export const PriceType: typeof $Enums.PriceType

export type Language = $Enums.Language

export const Language: typeof $Enums.Language

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Admins
 * const admins = await prisma.admin.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Admins
   * const admins = await prisma.admin.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.donationLink`: Exposes CRUD operations for the **DonationLink** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DonationLinks
    * const donationLinks = await prisma.donationLink.findMany()
    * ```
    */
  get donationLink(): Prisma.DonationLinkDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.owner`: Exposes CRUD operations for the **Owner** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Owners
    * const owners = await prisma.owner.findMany()
    * ```
    */
  get owner(): Prisma.OwnerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.customer`: Exposes CRUD operations for the **Customer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customer.findMany()
    * ```
    */
  get customer(): Prisma.CustomerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.license`: Exposes CRUD operations for the **License** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Licenses
    * const licenses = await prisma.license.findMany()
    * ```
    */
  get license(): Prisma.LicenseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.licenseTranslation`: Exposes CRUD operations for the **LicenseTranslation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LicenseTranslations
    * const licenseTranslations = await prisma.licenseTranslation.findMany()
    * ```
    */
  get licenseTranslation(): Prisma.LicenseTranslationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productTranslation`: Exposes CRUD operations for the **ProductTranslation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductTranslations
    * const productTranslations = await prisma.productTranslation.findMany()
    * ```
    */
  get productTranslation(): Prisma.ProductTranslationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productDiscount`: Exposes CRUD operations for the **ProductDiscount** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductDiscounts
    * const productDiscounts = await prisma.productDiscount.findMany()
    * ```
    */
  get productDiscount(): Prisma.ProductDiscountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productCoupon`: Exposes CRUD operations for the **ProductCoupon** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductCoupons
    * const productCoupons = await prisma.productCoupon.findMany()
    * ```
    */
  get productCoupon(): Prisma.ProductCouponDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productImage`: Exposes CRUD operations for the **ProductImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductImages
    * const productImages = await prisma.productImage.findMany()
    * ```
    */
  get productImage(): Prisma.ProductImageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productVariant`: Exposes CRUD operations for the **ProductVariant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductVariants
    * const productVariants = await prisma.productVariant.findMany()
    * ```
    */
  get productVariant(): Prisma.ProductVariantDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productPrice`: Exposes CRUD operations for the **ProductPrice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductPrices
    * const productPrices = await prisma.productPrice.findMany()
    * ```
    */
  get productPrice(): Prisma.ProductPriceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.termsOfService`: Exposes CRUD operations for the **TermsOfService** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TermsOfServices
    * const termsOfServices = await prisma.termsOfService.findMany()
    * ```
    */
  get termsOfService(): Prisma.TermsOfServiceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.termsOfServiceTranslation`: Exposes CRUD operations for the **TermsOfServiceTranslation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TermsOfServiceTranslations
    * const termsOfServiceTranslations = await prisma.termsOfServiceTranslation.findMany()
    * ```
    */
  get termsOfServiceTranslation(): Prisma.TermsOfServiceTranslationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.privacyPolicy`: Exposes CRUD operations for the **PrivacyPolicy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PrivacyPolicies
    * const privacyPolicies = await prisma.privacyPolicy.findMany()
    * ```
    */
  get privacyPolicy(): Prisma.PrivacyPolicyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.privacyPolicyTranslation`: Exposes CRUD operations for the **PrivacyPolicyTranslation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PrivacyPolicyTranslations
    * const privacyPolicyTranslations = await prisma.privacyPolicyTranslation.findMany()
    * ```
    */
  get privacyPolicyTranslation(): Prisma.PrivacyPolicyTranslationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.aboutUs`: Exposes CRUD operations for the **AboutUs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Aboutuses
    * const aboutuses = await prisma.aboutUs.findMany()
    * ```
    */
  get aboutUs(): Prisma.AboutUsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.aboutUsTranslation`: Exposes CRUD operations for the **AboutUsTranslation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AboutUsTranslations
    * const aboutUsTranslations = await prisma.aboutUsTranslation.findMany()
    * ```
    */
  get aboutUsTranslation(): Prisma.AboutUsTranslationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.faq`: Exposes CRUD operations for the **Faq** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Faqs
    * const faqs = await prisma.faq.findMany()
    * ```
    */
  get faq(): Prisma.FaqDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.faqTranslation`: Exposes CRUD operations for the **FaqTranslation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FaqTranslations
    * const faqTranslations = await prisma.faqTranslation.findMany()
    * ```
    */
  get faqTranslation(): Prisma.FaqTranslationDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.2
   * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Admin: 'Admin',
    DonationLink: 'DonationLink',
    Owner: 'Owner',
    Customer: 'Customer',
    License: 'License',
    LicenseTranslation: 'LicenseTranslation',
    Category: 'Category',
    Product: 'Product',
    ProductTranslation: 'ProductTranslation',
    ProductDiscount: 'ProductDiscount',
    ProductCoupon: 'ProductCoupon',
    ProductImage: 'ProductImage',
    ProductVariant: 'ProductVariant',
    ProductPrice: 'ProductPrice',
    TermsOfService: 'TermsOfService',
    TermsOfServiceTranslation: 'TermsOfServiceTranslation',
    PrivacyPolicy: 'PrivacyPolicy',
    PrivacyPolicyTranslation: 'PrivacyPolicyTranslation',
    AboutUs: 'AboutUs',
    AboutUsTranslation: 'AboutUsTranslation',
    Faq: 'Faq',
    FaqTranslation: 'FaqTranslation'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "admin" | "donationLink" | "owner" | "customer" | "license" | "licenseTranslation" | "category" | "product" | "productTranslation" | "productDiscount" | "productCoupon" | "productImage" | "productVariant" | "productPrice" | "termsOfService" | "termsOfServiceTranslation" | "privacyPolicy" | "privacyPolicyTranslation" | "aboutUs" | "aboutUsTranslation" | "faq" | "faqTranslation"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Admin: {
        payload: Prisma.$AdminPayload<ExtArgs>
        fields: Prisma.AdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findFirst: {
            args: Prisma.AdminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findMany: {
            args: Prisma.AdminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          create: {
            args: Prisma.AdminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          createMany: {
            args: Prisma.AdminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          delete: {
            args: Prisma.AdminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          update: {
            args: Prisma.AdminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          deleteMany: {
            args: Prisma.AdminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AdminUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          upsert: {
            args: Prisma.AdminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.AdminGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminCountArgs<ExtArgs>
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
      DonationLink: {
        payload: Prisma.$DonationLinkPayload<ExtArgs>
        fields: Prisma.DonationLinkFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DonationLinkFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonationLinkPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DonationLinkFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonationLinkPayload>
          }
          findFirst: {
            args: Prisma.DonationLinkFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonationLinkPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DonationLinkFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonationLinkPayload>
          }
          findMany: {
            args: Prisma.DonationLinkFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonationLinkPayload>[]
          }
          create: {
            args: Prisma.DonationLinkCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonationLinkPayload>
          }
          createMany: {
            args: Prisma.DonationLinkCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DonationLinkCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonationLinkPayload>[]
          }
          delete: {
            args: Prisma.DonationLinkDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonationLinkPayload>
          }
          update: {
            args: Prisma.DonationLinkUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonationLinkPayload>
          }
          deleteMany: {
            args: Prisma.DonationLinkDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DonationLinkUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DonationLinkUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonationLinkPayload>[]
          }
          upsert: {
            args: Prisma.DonationLinkUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DonationLinkPayload>
          }
          aggregate: {
            args: Prisma.DonationLinkAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDonationLink>
          }
          groupBy: {
            args: Prisma.DonationLinkGroupByArgs<ExtArgs>
            result: $Utils.Optional<DonationLinkGroupByOutputType>[]
          }
          count: {
            args: Prisma.DonationLinkCountArgs<ExtArgs>
            result: $Utils.Optional<DonationLinkCountAggregateOutputType> | number
          }
        }
      }
      Owner: {
        payload: Prisma.$OwnerPayload<ExtArgs>
        fields: Prisma.OwnerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OwnerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OwnerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OwnerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OwnerPayload>
          }
          findFirst: {
            args: Prisma.OwnerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OwnerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OwnerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OwnerPayload>
          }
          findMany: {
            args: Prisma.OwnerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OwnerPayload>[]
          }
          create: {
            args: Prisma.OwnerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OwnerPayload>
          }
          createMany: {
            args: Prisma.OwnerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OwnerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OwnerPayload>[]
          }
          delete: {
            args: Prisma.OwnerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OwnerPayload>
          }
          update: {
            args: Prisma.OwnerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OwnerPayload>
          }
          deleteMany: {
            args: Prisma.OwnerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OwnerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OwnerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OwnerPayload>[]
          }
          upsert: {
            args: Prisma.OwnerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OwnerPayload>
          }
          aggregate: {
            args: Prisma.OwnerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOwner>
          }
          groupBy: {
            args: Prisma.OwnerGroupByArgs<ExtArgs>
            result: $Utils.Optional<OwnerGroupByOutputType>[]
          }
          count: {
            args: Prisma.OwnerCountArgs<ExtArgs>
            result: $Utils.Optional<OwnerCountAggregateOutputType> | number
          }
        }
      }
      Customer: {
        payload: Prisma.$CustomerPayload<ExtArgs>
        fields: Prisma.CustomerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findFirst: {
            args: Prisma.CustomerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findMany: {
            args: Prisma.CustomerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          create: {
            args: Prisma.CustomerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          createMany: {
            args: Prisma.CustomerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          delete: {
            args: Prisma.CustomerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          update: {
            args: Prisma.CustomerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          deleteMany: {
            args: Prisma.CustomerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CustomerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          upsert: {
            args: Prisma.CustomerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          aggregate: {
            args: Prisma.CustomerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomer>
          }
          groupBy: {
            args: Prisma.CustomerGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerCountAggregateOutputType> | number
          }
        }
      }
      License: {
        payload: Prisma.$LicensePayload<ExtArgs>
        fields: Prisma.LicenseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LicenseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicensePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LicenseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicensePayload>
          }
          findFirst: {
            args: Prisma.LicenseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicensePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LicenseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicensePayload>
          }
          findMany: {
            args: Prisma.LicenseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicensePayload>[]
          }
          create: {
            args: Prisma.LicenseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicensePayload>
          }
          createMany: {
            args: Prisma.LicenseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LicenseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicensePayload>[]
          }
          delete: {
            args: Prisma.LicenseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicensePayload>
          }
          update: {
            args: Prisma.LicenseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicensePayload>
          }
          deleteMany: {
            args: Prisma.LicenseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LicenseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LicenseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicensePayload>[]
          }
          upsert: {
            args: Prisma.LicenseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicensePayload>
          }
          aggregate: {
            args: Prisma.LicenseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLicense>
          }
          groupBy: {
            args: Prisma.LicenseGroupByArgs<ExtArgs>
            result: $Utils.Optional<LicenseGroupByOutputType>[]
          }
          count: {
            args: Prisma.LicenseCountArgs<ExtArgs>
            result: $Utils.Optional<LicenseCountAggregateOutputType> | number
          }
        }
      }
      LicenseTranslation: {
        payload: Prisma.$LicenseTranslationPayload<ExtArgs>
        fields: Prisma.LicenseTranslationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LicenseTranslationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicenseTranslationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LicenseTranslationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicenseTranslationPayload>
          }
          findFirst: {
            args: Prisma.LicenseTranslationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicenseTranslationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LicenseTranslationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicenseTranslationPayload>
          }
          findMany: {
            args: Prisma.LicenseTranslationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicenseTranslationPayload>[]
          }
          create: {
            args: Prisma.LicenseTranslationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicenseTranslationPayload>
          }
          createMany: {
            args: Prisma.LicenseTranslationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LicenseTranslationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicenseTranslationPayload>[]
          }
          delete: {
            args: Prisma.LicenseTranslationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicenseTranslationPayload>
          }
          update: {
            args: Prisma.LicenseTranslationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicenseTranslationPayload>
          }
          deleteMany: {
            args: Prisma.LicenseTranslationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LicenseTranslationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LicenseTranslationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicenseTranslationPayload>[]
          }
          upsert: {
            args: Prisma.LicenseTranslationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LicenseTranslationPayload>
          }
          aggregate: {
            args: Prisma.LicenseTranslationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLicenseTranslation>
          }
          groupBy: {
            args: Prisma.LicenseTranslationGroupByArgs<ExtArgs>
            result: $Utils.Optional<LicenseTranslationGroupByOutputType>[]
          }
          count: {
            args: Prisma.LicenseTranslationCountArgs<ExtArgs>
            result: $Utils.Optional<LicenseTranslationCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CategoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      ProductTranslation: {
        payload: Prisma.$ProductTranslationPayload<ExtArgs>
        fields: Prisma.ProductTranslationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductTranslationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductTranslationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductTranslationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductTranslationPayload>
          }
          findFirst: {
            args: Prisma.ProductTranslationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductTranslationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductTranslationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductTranslationPayload>
          }
          findMany: {
            args: Prisma.ProductTranslationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductTranslationPayload>[]
          }
          create: {
            args: Prisma.ProductTranslationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductTranslationPayload>
          }
          createMany: {
            args: Prisma.ProductTranslationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductTranslationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductTranslationPayload>[]
          }
          delete: {
            args: Prisma.ProductTranslationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductTranslationPayload>
          }
          update: {
            args: Prisma.ProductTranslationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductTranslationPayload>
          }
          deleteMany: {
            args: Prisma.ProductTranslationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductTranslationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductTranslationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductTranslationPayload>[]
          }
          upsert: {
            args: Prisma.ProductTranslationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductTranslationPayload>
          }
          aggregate: {
            args: Prisma.ProductTranslationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductTranslation>
          }
          groupBy: {
            args: Prisma.ProductTranslationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductTranslationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductTranslationCountArgs<ExtArgs>
            result: $Utils.Optional<ProductTranslationCountAggregateOutputType> | number
          }
        }
      }
      ProductDiscount: {
        payload: Prisma.$ProductDiscountPayload<ExtArgs>
        fields: Prisma.ProductDiscountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductDiscountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductDiscountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductDiscountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductDiscountPayload>
          }
          findFirst: {
            args: Prisma.ProductDiscountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductDiscountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductDiscountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductDiscountPayload>
          }
          findMany: {
            args: Prisma.ProductDiscountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductDiscountPayload>[]
          }
          create: {
            args: Prisma.ProductDiscountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductDiscountPayload>
          }
          createMany: {
            args: Prisma.ProductDiscountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductDiscountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductDiscountPayload>[]
          }
          delete: {
            args: Prisma.ProductDiscountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductDiscountPayload>
          }
          update: {
            args: Prisma.ProductDiscountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductDiscountPayload>
          }
          deleteMany: {
            args: Prisma.ProductDiscountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductDiscountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductDiscountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductDiscountPayload>[]
          }
          upsert: {
            args: Prisma.ProductDiscountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductDiscountPayload>
          }
          aggregate: {
            args: Prisma.ProductDiscountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductDiscount>
          }
          groupBy: {
            args: Prisma.ProductDiscountGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductDiscountGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductDiscountCountArgs<ExtArgs>
            result: $Utils.Optional<ProductDiscountCountAggregateOutputType> | number
          }
        }
      }
      ProductCoupon: {
        payload: Prisma.$ProductCouponPayload<ExtArgs>
        fields: Prisma.ProductCouponFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductCouponFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCouponPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductCouponFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCouponPayload>
          }
          findFirst: {
            args: Prisma.ProductCouponFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCouponPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductCouponFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCouponPayload>
          }
          findMany: {
            args: Prisma.ProductCouponFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCouponPayload>[]
          }
          create: {
            args: Prisma.ProductCouponCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCouponPayload>
          }
          createMany: {
            args: Prisma.ProductCouponCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductCouponCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCouponPayload>[]
          }
          delete: {
            args: Prisma.ProductCouponDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCouponPayload>
          }
          update: {
            args: Prisma.ProductCouponUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCouponPayload>
          }
          deleteMany: {
            args: Prisma.ProductCouponDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductCouponUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductCouponUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCouponPayload>[]
          }
          upsert: {
            args: Prisma.ProductCouponUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductCouponPayload>
          }
          aggregate: {
            args: Prisma.ProductCouponAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductCoupon>
          }
          groupBy: {
            args: Prisma.ProductCouponGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductCouponGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCouponCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCouponCountAggregateOutputType> | number
          }
        }
      }
      ProductImage: {
        payload: Prisma.$ProductImagePayload<ExtArgs>
        fields: Prisma.ProductImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImagePayload>
          }
          findFirst: {
            args: Prisma.ProductImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImagePayload>
          }
          findMany: {
            args: Prisma.ProductImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImagePayload>[]
          }
          create: {
            args: Prisma.ProductImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImagePayload>
          }
          createMany: {
            args: Prisma.ProductImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductImageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImagePayload>[]
          }
          delete: {
            args: Prisma.ProductImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImagePayload>
          }
          update: {
            args: Prisma.ProductImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImagePayload>
          }
          deleteMany: {
            args: Prisma.ProductImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductImageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImagePayload>[]
          }
          upsert: {
            args: Prisma.ProductImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImagePayload>
          }
          aggregate: {
            args: Prisma.ProductImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductImage>
          }
          groupBy: {
            args: Prisma.ProductImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductImageCountArgs<ExtArgs>
            result: $Utils.Optional<ProductImageCountAggregateOutputType> | number
          }
        }
      }
      ProductVariant: {
        payload: Prisma.$ProductVariantPayload<ExtArgs>
        fields: Prisma.ProductVariantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductVariantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductVariantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload>
          }
          findFirst: {
            args: Prisma.ProductVariantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductVariantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload>
          }
          findMany: {
            args: Prisma.ProductVariantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload>[]
          }
          create: {
            args: Prisma.ProductVariantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload>
          }
          createMany: {
            args: Prisma.ProductVariantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductVariantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload>[]
          }
          delete: {
            args: Prisma.ProductVariantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload>
          }
          update: {
            args: Prisma.ProductVariantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload>
          }
          deleteMany: {
            args: Prisma.ProductVariantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductVariantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductVariantUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload>[]
          }
          upsert: {
            args: Prisma.ProductVariantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload>
          }
          aggregate: {
            args: Prisma.ProductVariantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductVariant>
          }
          groupBy: {
            args: Prisma.ProductVariantGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductVariantGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductVariantCountArgs<ExtArgs>
            result: $Utils.Optional<ProductVariantCountAggregateOutputType> | number
          }
        }
      }
      ProductPrice: {
        payload: Prisma.$ProductPricePayload<ExtArgs>
        fields: Prisma.ProductPriceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductPriceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPricePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductPriceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPricePayload>
          }
          findFirst: {
            args: Prisma.ProductPriceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPricePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductPriceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPricePayload>
          }
          findMany: {
            args: Prisma.ProductPriceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPricePayload>[]
          }
          create: {
            args: Prisma.ProductPriceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPricePayload>
          }
          createMany: {
            args: Prisma.ProductPriceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductPriceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPricePayload>[]
          }
          delete: {
            args: Prisma.ProductPriceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPricePayload>
          }
          update: {
            args: Prisma.ProductPriceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPricePayload>
          }
          deleteMany: {
            args: Prisma.ProductPriceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductPriceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductPriceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPricePayload>[]
          }
          upsert: {
            args: Prisma.ProductPriceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPricePayload>
          }
          aggregate: {
            args: Prisma.ProductPriceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductPrice>
          }
          groupBy: {
            args: Prisma.ProductPriceGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductPriceGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductPriceCountArgs<ExtArgs>
            result: $Utils.Optional<ProductPriceCountAggregateOutputType> | number
          }
        }
      }
      TermsOfService: {
        payload: Prisma.$TermsOfServicePayload<ExtArgs>
        fields: Prisma.TermsOfServiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TermsOfServiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermsOfServicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TermsOfServiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermsOfServicePayload>
          }
          findFirst: {
            args: Prisma.TermsOfServiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermsOfServicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TermsOfServiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermsOfServicePayload>
          }
          findMany: {
            args: Prisma.TermsOfServiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermsOfServicePayload>[]
          }
          create: {
            args: Prisma.TermsOfServiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermsOfServicePayload>
          }
          createMany: {
            args: Prisma.TermsOfServiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TermsOfServiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermsOfServicePayload>[]
          }
          delete: {
            args: Prisma.TermsOfServiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermsOfServicePayload>
          }
          update: {
            args: Prisma.TermsOfServiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermsOfServicePayload>
          }
          deleteMany: {
            args: Prisma.TermsOfServiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TermsOfServiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TermsOfServiceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermsOfServicePayload>[]
          }
          upsert: {
            args: Prisma.TermsOfServiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermsOfServicePayload>
          }
          aggregate: {
            args: Prisma.TermsOfServiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTermsOfService>
          }
          groupBy: {
            args: Prisma.TermsOfServiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<TermsOfServiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.TermsOfServiceCountArgs<ExtArgs>
            result: $Utils.Optional<TermsOfServiceCountAggregateOutputType> | number
          }
        }
      }
      TermsOfServiceTranslation: {
        payload: Prisma.$TermsOfServiceTranslationPayload<ExtArgs>
        fields: Prisma.TermsOfServiceTranslationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TermsOfServiceTranslationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermsOfServiceTranslationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TermsOfServiceTranslationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermsOfServiceTranslationPayload>
          }
          findFirst: {
            args: Prisma.TermsOfServiceTranslationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermsOfServiceTranslationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TermsOfServiceTranslationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermsOfServiceTranslationPayload>
          }
          findMany: {
            args: Prisma.TermsOfServiceTranslationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermsOfServiceTranslationPayload>[]
          }
          create: {
            args: Prisma.TermsOfServiceTranslationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermsOfServiceTranslationPayload>
          }
          createMany: {
            args: Prisma.TermsOfServiceTranslationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TermsOfServiceTranslationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermsOfServiceTranslationPayload>[]
          }
          delete: {
            args: Prisma.TermsOfServiceTranslationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermsOfServiceTranslationPayload>
          }
          update: {
            args: Prisma.TermsOfServiceTranslationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermsOfServiceTranslationPayload>
          }
          deleteMany: {
            args: Prisma.TermsOfServiceTranslationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TermsOfServiceTranslationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TermsOfServiceTranslationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermsOfServiceTranslationPayload>[]
          }
          upsert: {
            args: Prisma.TermsOfServiceTranslationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermsOfServiceTranslationPayload>
          }
          aggregate: {
            args: Prisma.TermsOfServiceTranslationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTermsOfServiceTranslation>
          }
          groupBy: {
            args: Prisma.TermsOfServiceTranslationGroupByArgs<ExtArgs>
            result: $Utils.Optional<TermsOfServiceTranslationGroupByOutputType>[]
          }
          count: {
            args: Prisma.TermsOfServiceTranslationCountArgs<ExtArgs>
            result: $Utils.Optional<TermsOfServiceTranslationCountAggregateOutputType> | number
          }
        }
      }
      PrivacyPolicy: {
        payload: Prisma.$PrivacyPolicyPayload<ExtArgs>
        fields: Prisma.PrivacyPolicyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PrivacyPolicyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrivacyPolicyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PrivacyPolicyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrivacyPolicyPayload>
          }
          findFirst: {
            args: Prisma.PrivacyPolicyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrivacyPolicyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PrivacyPolicyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrivacyPolicyPayload>
          }
          findMany: {
            args: Prisma.PrivacyPolicyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrivacyPolicyPayload>[]
          }
          create: {
            args: Prisma.PrivacyPolicyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrivacyPolicyPayload>
          }
          createMany: {
            args: Prisma.PrivacyPolicyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PrivacyPolicyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrivacyPolicyPayload>[]
          }
          delete: {
            args: Prisma.PrivacyPolicyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrivacyPolicyPayload>
          }
          update: {
            args: Prisma.PrivacyPolicyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrivacyPolicyPayload>
          }
          deleteMany: {
            args: Prisma.PrivacyPolicyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PrivacyPolicyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PrivacyPolicyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrivacyPolicyPayload>[]
          }
          upsert: {
            args: Prisma.PrivacyPolicyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrivacyPolicyPayload>
          }
          aggregate: {
            args: Prisma.PrivacyPolicyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePrivacyPolicy>
          }
          groupBy: {
            args: Prisma.PrivacyPolicyGroupByArgs<ExtArgs>
            result: $Utils.Optional<PrivacyPolicyGroupByOutputType>[]
          }
          count: {
            args: Prisma.PrivacyPolicyCountArgs<ExtArgs>
            result: $Utils.Optional<PrivacyPolicyCountAggregateOutputType> | number
          }
        }
      }
      PrivacyPolicyTranslation: {
        payload: Prisma.$PrivacyPolicyTranslationPayload<ExtArgs>
        fields: Prisma.PrivacyPolicyTranslationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PrivacyPolicyTranslationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrivacyPolicyTranslationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PrivacyPolicyTranslationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrivacyPolicyTranslationPayload>
          }
          findFirst: {
            args: Prisma.PrivacyPolicyTranslationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrivacyPolicyTranslationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PrivacyPolicyTranslationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrivacyPolicyTranslationPayload>
          }
          findMany: {
            args: Prisma.PrivacyPolicyTranslationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrivacyPolicyTranslationPayload>[]
          }
          create: {
            args: Prisma.PrivacyPolicyTranslationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrivacyPolicyTranslationPayload>
          }
          createMany: {
            args: Prisma.PrivacyPolicyTranslationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PrivacyPolicyTranslationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrivacyPolicyTranslationPayload>[]
          }
          delete: {
            args: Prisma.PrivacyPolicyTranslationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrivacyPolicyTranslationPayload>
          }
          update: {
            args: Prisma.PrivacyPolicyTranslationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrivacyPolicyTranslationPayload>
          }
          deleteMany: {
            args: Prisma.PrivacyPolicyTranslationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PrivacyPolicyTranslationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PrivacyPolicyTranslationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrivacyPolicyTranslationPayload>[]
          }
          upsert: {
            args: Prisma.PrivacyPolicyTranslationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PrivacyPolicyTranslationPayload>
          }
          aggregate: {
            args: Prisma.PrivacyPolicyTranslationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePrivacyPolicyTranslation>
          }
          groupBy: {
            args: Prisma.PrivacyPolicyTranslationGroupByArgs<ExtArgs>
            result: $Utils.Optional<PrivacyPolicyTranslationGroupByOutputType>[]
          }
          count: {
            args: Prisma.PrivacyPolicyTranslationCountArgs<ExtArgs>
            result: $Utils.Optional<PrivacyPolicyTranslationCountAggregateOutputType> | number
          }
        }
      }
      AboutUs: {
        payload: Prisma.$AboutUsPayload<ExtArgs>
        fields: Prisma.AboutUsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AboutUsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutUsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AboutUsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutUsPayload>
          }
          findFirst: {
            args: Prisma.AboutUsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutUsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AboutUsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutUsPayload>
          }
          findMany: {
            args: Prisma.AboutUsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutUsPayload>[]
          }
          create: {
            args: Prisma.AboutUsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutUsPayload>
          }
          createMany: {
            args: Prisma.AboutUsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AboutUsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutUsPayload>[]
          }
          delete: {
            args: Prisma.AboutUsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutUsPayload>
          }
          update: {
            args: Prisma.AboutUsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutUsPayload>
          }
          deleteMany: {
            args: Prisma.AboutUsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AboutUsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AboutUsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutUsPayload>[]
          }
          upsert: {
            args: Prisma.AboutUsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutUsPayload>
          }
          aggregate: {
            args: Prisma.AboutUsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAboutUs>
          }
          groupBy: {
            args: Prisma.AboutUsGroupByArgs<ExtArgs>
            result: $Utils.Optional<AboutUsGroupByOutputType>[]
          }
          count: {
            args: Prisma.AboutUsCountArgs<ExtArgs>
            result: $Utils.Optional<AboutUsCountAggregateOutputType> | number
          }
        }
      }
      AboutUsTranslation: {
        payload: Prisma.$AboutUsTranslationPayload<ExtArgs>
        fields: Prisma.AboutUsTranslationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AboutUsTranslationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutUsTranslationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AboutUsTranslationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutUsTranslationPayload>
          }
          findFirst: {
            args: Prisma.AboutUsTranslationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutUsTranslationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AboutUsTranslationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutUsTranslationPayload>
          }
          findMany: {
            args: Prisma.AboutUsTranslationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutUsTranslationPayload>[]
          }
          create: {
            args: Prisma.AboutUsTranslationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutUsTranslationPayload>
          }
          createMany: {
            args: Prisma.AboutUsTranslationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AboutUsTranslationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutUsTranslationPayload>[]
          }
          delete: {
            args: Prisma.AboutUsTranslationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutUsTranslationPayload>
          }
          update: {
            args: Prisma.AboutUsTranslationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutUsTranslationPayload>
          }
          deleteMany: {
            args: Prisma.AboutUsTranslationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AboutUsTranslationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AboutUsTranslationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutUsTranslationPayload>[]
          }
          upsert: {
            args: Prisma.AboutUsTranslationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AboutUsTranslationPayload>
          }
          aggregate: {
            args: Prisma.AboutUsTranslationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAboutUsTranslation>
          }
          groupBy: {
            args: Prisma.AboutUsTranslationGroupByArgs<ExtArgs>
            result: $Utils.Optional<AboutUsTranslationGroupByOutputType>[]
          }
          count: {
            args: Prisma.AboutUsTranslationCountArgs<ExtArgs>
            result: $Utils.Optional<AboutUsTranslationCountAggregateOutputType> | number
          }
        }
      }
      Faq: {
        payload: Prisma.$FaqPayload<ExtArgs>
        fields: Prisma.FaqFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FaqFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FaqFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqPayload>
          }
          findFirst: {
            args: Prisma.FaqFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FaqFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqPayload>
          }
          findMany: {
            args: Prisma.FaqFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqPayload>[]
          }
          create: {
            args: Prisma.FaqCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqPayload>
          }
          createMany: {
            args: Prisma.FaqCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FaqCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqPayload>[]
          }
          delete: {
            args: Prisma.FaqDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqPayload>
          }
          update: {
            args: Prisma.FaqUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqPayload>
          }
          deleteMany: {
            args: Prisma.FaqDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FaqUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FaqUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqPayload>[]
          }
          upsert: {
            args: Prisma.FaqUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqPayload>
          }
          aggregate: {
            args: Prisma.FaqAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFaq>
          }
          groupBy: {
            args: Prisma.FaqGroupByArgs<ExtArgs>
            result: $Utils.Optional<FaqGroupByOutputType>[]
          }
          count: {
            args: Prisma.FaqCountArgs<ExtArgs>
            result: $Utils.Optional<FaqCountAggregateOutputType> | number
          }
        }
      }
      FaqTranslation: {
        payload: Prisma.$FaqTranslationPayload<ExtArgs>
        fields: Prisma.FaqTranslationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FaqTranslationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqTranslationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FaqTranslationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqTranslationPayload>
          }
          findFirst: {
            args: Prisma.FaqTranslationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqTranslationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FaqTranslationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqTranslationPayload>
          }
          findMany: {
            args: Prisma.FaqTranslationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqTranslationPayload>[]
          }
          create: {
            args: Prisma.FaqTranslationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqTranslationPayload>
          }
          createMany: {
            args: Prisma.FaqTranslationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FaqTranslationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqTranslationPayload>[]
          }
          delete: {
            args: Prisma.FaqTranslationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqTranslationPayload>
          }
          update: {
            args: Prisma.FaqTranslationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqTranslationPayload>
          }
          deleteMany: {
            args: Prisma.FaqTranslationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FaqTranslationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FaqTranslationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqTranslationPayload>[]
          }
          upsert: {
            args: Prisma.FaqTranslationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqTranslationPayload>
          }
          aggregate: {
            args: Prisma.FaqTranslationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFaqTranslation>
          }
          groupBy: {
            args: Prisma.FaqTranslationGroupByArgs<ExtArgs>
            result: $Utils.Optional<FaqTranslationGroupByOutputType>[]
          }
          count: {
            args: Prisma.FaqTranslationCountArgs<ExtArgs>
            result: $Utils.Optional<FaqTranslationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    admin?: AdminOmit
    donationLink?: DonationLinkOmit
    owner?: OwnerOmit
    customer?: CustomerOmit
    license?: LicenseOmit
    licenseTranslation?: LicenseTranslationOmit
    category?: CategoryOmit
    product?: ProductOmit
    productTranslation?: ProductTranslationOmit
    productDiscount?: ProductDiscountOmit
    productCoupon?: ProductCouponOmit
    productImage?: ProductImageOmit
    productVariant?: ProductVariantOmit
    productPrice?: ProductPriceOmit
    termsOfService?: TermsOfServiceOmit
    termsOfServiceTranslation?: TermsOfServiceTranslationOmit
    privacyPolicy?: PrivacyPolicyOmit
    privacyPolicyTranslation?: PrivacyPolicyTranslationOmit
    aboutUs?: AboutUsOmit
    aboutUsTranslation?: AboutUsTranslationOmit
    faq?: FaqOmit
    faqTranslation?: FaqTranslationOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AdminCountOutputType
   */

  export type AdminCountOutputType = {
    donation_links: number
    products: number
  }

  export type AdminCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    donation_links?: boolean | AdminCountOutputTypeCountDonation_linksArgs
    products?: boolean | AdminCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes
  /**
   * AdminCountOutputType without action
   */
  export type AdminCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminCountOutputType
     */
    select?: AdminCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AdminCountOutputType without action
   */
  export type AdminCountOutputTypeCountDonation_linksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DonationLinkWhereInput
  }

  /**
   * AdminCountOutputType without action
   */
  export type AdminCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }


  /**
   * Count Type OwnerCountOutputType
   */

  export type OwnerCountOutputType = {
    products: number
  }

  export type OwnerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | OwnerCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes
  /**
   * OwnerCountOutputType without action
   */
  export type OwnerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OwnerCountOutputType
     */
    select?: OwnerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OwnerCountOutputType without action
   */
  export type OwnerCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }


  /**
   * Count Type LicenseCountOutputType
   */

  export type LicenseCountOutputType = {
    products: number
    translations: number
  }

  export type LicenseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | LicenseCountOutputTypeCountProductsArgs
    translations?: boolean | LicenseCountOutputTypeCountTranslationsArgs
  }

  // Custom InputTypes
  /**
   * LicenseCountOutputType without action
   */
  export type LicenseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicenseCountOutputType
     */
    select?: LicenseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LicenseCountOutputType without action
   */
  export type LicenseCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }

  /**
   * LicenseCountOutputType without action
   */
  export type LicenseCountOutputTypeCountTranslationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LicenseTranslationWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    products: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | CategoryCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    translations: number
    images: number
    variants: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    translations?: boolean | ProductCountOutputTypeCountTranslationsArgs
    images?: boolean | ProductCountOutputTypeCountImagesArgs
    variants?: boolean | ProductCountOutputTypeCountVariantsArgs
  }

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountTranslationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductTranslationWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductImageWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountVariantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductVariantWhereInput
  }


  /**
   * Count Type ProductVariantCountOutputType
   */

  export type ProductVariantCountOutputType = {
    prices: number
  }

  export type ProductVariantCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    prices?: boolean | ProductVariantCountOutputTypeCountPricesArgs
  }

  // Custom InputTypes
  /**
   * ProductVariantCountOutputType without action
   */
  export type ProductVariantCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariantCountOutputType
     */
    select?: ProductVariantCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductVariantCountOutputType without action
   */
  export type ProductVariantCountOutputTypeCountPricesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductPriceWhereInput
  }


  /**
   * Count Type TermsOfServiceCountOutputType
   */

  export type TermsOfServiceCountOutputType = {
    translations: number
  }

  export type TermsOfServiceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    translations?: boolean | TermsOfServiceCountOutputTypeCountTranslationsArgs
  }

  // Custom InputTypes
  /**
   * TermsOfServiceCountOutputType without action
   */
  export type TermsOfServiceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermsOfServiceCountOutputType
     */
    select?: TermsOfServiceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TermsOfServiceCountOutputType without action
   */
  export type TermsOfServiceCountOutputTypeCountTranslationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TermsOfServiceTranslationWhereInput
  }


  /**
   * Count Type PrivacyPolicyCountOutputType
   */

  export type PrivacyPolicyCountOutputType = {
    translations: number
  }

  export type PrivacyPolicyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    translations?: boolean | PrivacyPolicyCountOutputTypeCountTranslationsArgs
  }

  // Custom InputTypes
  /**
   * PrivacyPolicyCountOutputType without action
   */
  export type PrivacyPolicyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivacyPolicyCountOutputType
     */
    select?: PrivacyPolicyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PrivacyPolicyCountOutputType without action
   */
  export type PrivacyPolicyCountOutputTypeCountTranslationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrivacyPolicyTranslationWhereInput
  }


  /**
   * Count Type AboutUsCountOutputType
   */

  export type AboutUsCountOutputType = {
    translations: number
  }

  export type AboutUsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    translations?: boolean | AboutUsCountOutputTypeCountTranslationsArgs
  }

  // Custom InputTypes
  /**
   * AboutUsCountOutputType without action
   */
  export type AboutUsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutUsCountOutputType
     */
    select?: AboutUsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AboutUsCountOutputType without action
   */
  export type AboutUsCountOutputTypeCountTranslationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AboutUsTranslationWhereInput
  }


  /**
   * Count Type FaqCountOutputType
   */

  export type FaqCountOutputType = {
    translations: number
  }

  export type FaqCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    translations?: boolean | FaqCountOutputTypeCountTranslationsArgs
  }

  // Custom InputTypes
  /**
   * FaqCountOutputType without action
   */
  export type FaqCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaqCountOutputType
     */
    select?: FaqCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FaqCountOutputType without action
   */
  export type FaqCountOutputTypeCountTranslationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FaqTranslationWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminMinAggregateOutputType = {
    id: string | null
    first_name: string | null
    last_name: string | null
    email: string | null
    whatsapp_phone_number: string | null
    picture: string | null
  }

  export type AdminMaxAggregateOutputType = {
    id: string | null
    first_name: string | null
    last_name: string | null
    email: string | null
    whatsapp_phone_number: string | null
    picture: string | null
  }

  export type AdminCountAggregateOutputType = {
    id: number
    first_name: number
    last_name: number
    email: number
    whatsapp_phone_number: number
    picture: number
    _all: number
  }


  export type AdminMinAggregateInputType = {
    id?: true
    first_name?: true
    last_name?: true
    email?: true
    whatsapp_phone_number?: true
    picture?: true
  }

  export type AdminMaxAggregateInputType = {
    id?: true
    first_name?: true
    last_name?: true
    email?: true
    whatsapp_phone_number?: true
    picture?: true
  }

  export type AdminCountAggregateInputType = {
    id?: true
    first_name?: true
    last_name?: true
    email?: true
    whatsapp_phone_number?: true
    picture?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithAggregationInput | AdminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    id: string
    first_name: string
    last_name: string
    email: string
    whatsapp_phone_number: string
    picture: string
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    first_name?: boolean
    last_name?: boolean
    email?: boolean
    whatsapp_phone_number?: boolean
    picture?: boolean
    donation_links?: boolean | Admin$donation_linksArgs<ExtArgs>
    products?: boolean | Admin$productsArgs<ExtArgs>
    _count?: boolean | AdminCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    first_name?: boolean
    last_name?: boolean
    email?: boolean
    whatsapp_phone_number?: boolean
    picture?: boolean
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    first_name?: boolean
    last_name?: boolean
    email?: boolean
    whatsapp_phone_number?: boolean
    picture?: boolean
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectScalar = {
    id?: boolean
    first_name?: boolean
    last_name?: boolean
    email?: boolean
    whatsapp_phone_number?: boolean
    picture?: boolean
  }

  export type AdminOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "first_name" | "last_name" | "email" | "whatsapp_phone_number" | "picture", ExtArgs["result"]["admin"]>
  export type AdminInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    donation_links?: boolean | Admin$donation_linksArgs<ExtArgs>
    products?: boolean | Admin$productsArgs<ExtArgs>
    _count?: boolean | AdminCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AdminIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type AdminIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Admin"
    objects: {
      donation_links: Prisma.$DonationLinkPayload<ExtArgs>[]
      products: Prisma.$ProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      first_name: string
      last_name: string
      email: string
      whatsapp_phone_number: string
      picture: string
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }

  type AdminGetPayload<S extends boolean | null | undefined | AdminDefaultArgs> = $Result.GetResult<Prisma.$AdminPayload, S>

  type AdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AdminFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Admin'], meta: { name: 'Admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminFindUniqueArgs>(args: SelectSubset<T, AdminFindUniqueArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Admin that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminFindFirstArgs>(args?: SelectSubset<T, AdminFindFirstArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminWithIdOnly = await prisma.admin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminFindManyArgs>(args?: SelectSubset<T, AdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
     */
    create<T extends AdminCreateArgs>(args: SelectSubset<T, AdminCreateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Admins.
     * @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminCreateManyArgs>(args?: SelectSubset<T, AdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Admins and returns the data saved in the database.
     * @param {AdminCreateManyAndReturnArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Admins and only return the `id`
     * const adminWithIdOnly = await prisma.admin.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdminCreateManyAndReturnArgs>(args?: SelectSubset<T, AdminCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
     */
    delete<T extends AdminDeleteArgs>(args: SelectSubset<T, AdminDeleteArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminUpdateArgs>(args: SelectSubset<T, AdminUpdateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminDeleteManyArgs>(args?: SelectSubset<T, AdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminUpdateManyArgs>(args: SelectSubset<T, AdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins and returns the data updated in the database.
     * @param {AdminUpdateManyAndReturnArgs} args - Arguments to update many Admins.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Admins and only return the `id`
     * const adminWithIdOnly = await prisma.admin.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AdminUpdateManyAndReturnArgs>(args: SelectSubset<T, AdminUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
     */
    upsert<T extends AdminUpsertArgs>(args: SelectSubset<T, AdminUpsertArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Admin model
   */
  readonly fields: AdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    donation_links<T extends Admin$donation_linksArgs<ExtArgs> = {}>(args?: Subset<T, Admin$donation_linksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DonationLinkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    products<T extends Admin$productsArgs<ExtArgs> = {}>(args?: Subset<T, Admin$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Admin model
   */
  interface AdminFieldRefs {
    readonly id: FieldRef<"Admin", 'String'>
    readonly first_name: FieldRef<"Admin", 'String'>
    readonly last_name: FieldRef<"Admin", 'String'>
    readonly email: FieldRef<"Admin", 'String'>
    readonly whatsapp_phone_number: FieldRef<"Admin", 'String'>
    readonly picture: FieldRef<"Admin", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Admin findUnique
   */
  export type AdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findFirst
   */
  export type AdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findMany
   */
  export type AdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin create
   */
  export type AdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }

  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin createManyAndReturn
   */
  export type AdminCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin update
   */
  export type AdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to update.
     */
    limit?: number
  }

  /**
   * Admin updateManyAndReturn
   */
  export type AdminUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to update.
     */
    limit?: number
  }

  /**
   * Admin upsert
   */
  export type AdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }

  /**
   * Admin delete
   */
  export type AdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
    /**
     * Limit how many Admins to delete.
     */
    limit?: number
  }

  /**
   * Admin.donation_links
   */
  export type Admin$donation_linksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationLink
     */
    select?: DonationLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DonationLink
     */
    omit?: DonationLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationLinkInclude<ExtArgs> | null
    where?: DonationLinkWhereInput
    orderBy?: DonationLinkOrderByWithRelationInput | DonationLinkOrderByWithRelationInput[]
    cursor?: DonationLinkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DonationLinkScalarFieldEnum | DonationLinkScalarFieldEnum[]
  }

  /**
   * Admin.products
   */
  export type Admin$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Admin without action
   */
  export type AdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Admin
     */
    omit?: AdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
  }


  /**
   * Model DonationLink
   */

  export type AggregateDonationLink = {
    _count: DonationLinkCountAggregateOutputType | null
    _avg: DonationLinkAvgAggregateOutputType | null
    _sum: DonationLinkSumAggregateOutputType | null
    _min: DonationLinkMinAggregateOutputType | null
    _max: DonationLinkMaxAggregateOutputType | null
  }

  export type DonationLinkAvgAggregateOutputType = {
    id: number | null
  }

  export type DonationLinkSumAggregateOutputType = {
    id: number | null
  }

  export type DonationLinkMinAggregateOutputType = {
    id: number | null
    admin_id: string | null
    currency_code: $Enums.CurrencyCode | null
    link: string | null
  }

  export type DonationLinkMaxAggregateOutputType = {
    id: number | null
    admin_id: string | null
    currency_code: $Enums.CurrencyCode | null
    link: string | null
  }

  export type DonationLinkCountAggregateOutputType = {
    id: number
    admin_id: number
    currency_code: number
    link: number
    _all: number
  }


  export type DonationLinkAvgAggregateInputType = {
    id?: true
  }

  export type DonationLinkSumAggregateInputType = {
    id?: true
  }

  export type DonationLinkMinAggregateInputType = {
    id?: true
    admin_id?: true
    currency_code?: true
    link?: true
  }

  export type DonationLinkMaxAggregateInputType = {
    id?: true
    admin_id?: true
    currency_code?: true
    link?: true
  }

  export type DonationLinkCountAggregateInputType = {
    id?: true
    admin_id?: true
    currency_code?: true
    link?: true
    _all?: true
  }

  export type DonationLinkAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DonationLink to aggregate.
     */
    where?: DonationLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DonationLinks to fetch.
     */
    orderBy?: DonationLinkOrderByWithRelationInput | DonationLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DonationLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DonationLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DonationLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DonationLinks
    **/
    _count?: true | DonationLinkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DonationLinkAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DonationLinkSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DonationLinkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DonationLinkMaxAggregateInputType
  }

  export type GetDonationLinkAggregateType<T extends DonationLinkAggregateArgs> = {
        [P in keyof T & keyof AggregateDonationLink]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDonationLink[P]>
      : GetScalarType<T[P], AggregateDonationLink[P]>
  }




  export type DonationLinkGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DonationLinkWhereInput
    orderBy?: DonationLinkOrderByWithAggregationInput | DonationLinkOrderByWithAggregationInput[]
    by: DonationLinkScalarFieldEnum[] | DonationLinkScalarFieldEnum
    having?: DonationLinkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DonationLinkCountAggregateInputType | true
    _avg?: DonationLinkAvgAggregateInputType
    _sum?: DonationLinkSumAggregateInputType
    _min?: DonationLinkMinAggregateInputType
    _max?: DonationLinkMaxAggregateInputType
  }

  export type DonationLinkGroupByOutputType = {
    id: number
    admin_id: string
    currency_code: $Enums.CurrencyCode
    link: string
    _count: DonationLinkCountAggregateOutputType | null
    _avg: DonationLinkAvgAggregateOutputType | null
    _sum: DonationLinkSumAggregateOutputType | null
    _min: DonationLinkMinAggregateOutputType | null
    _max: DonationLinkMaxAggregateOutputType | null
  }

  type GetDonationLinkGroupByPayload<T extends DonationLinkGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DonationLinkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DonationLinkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DonationLinkGroupByOutputType[P]>
            : GetScalarType<T[P], DonationLinkGroupByOutputType[P]>
        }
      >
    >


  export type DonationLinkSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    admin_id?: boolean
    currency_code?: boolean
    link?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["donationLink"]>

  export type DonationLinkSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    admin_id?: boolean
    currency_code?: boolean
    link?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["donationLink"]>

  export type DonationLinkSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    admin_id?: boolean
    currency_code?: boolean
    link?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["donationLink"]>

  export type DonationLinkSelectScalar = {
    id?: boolean
    admin_id?: boolean
    currency_code?: boolean
    link?: boolean
  }

  export type DonationLinkOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "admin_id" | "currency_code" | "link", ExtArgs["result"]["donationLink"]>
  export type DonationLinkInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
  }
  export type DonationLinkIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
  }
  export type DonationLinkIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
  }

  export type $DonationLinkPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DonationLink"
    objects: {
      admin: Prisma.$AdminPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      admin_id: string
      currency_code: $Enums.CurrencyCode
      link: string
    }, ExtArgs["result"]["donationLink"]>
    composites: {}
  }

  type DonationLinkGetPayload<S extends boolean | null | undefined | DonationLinkDefaultArgs> = $Result.GetResult<Prisma.$DonationLinkPayload, S>

  type DonationLinkCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DonationLinkFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DonationLinkCountAggregateInputType | true
    }

  export interface DonationLinkDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DonationLink'], meta: { name: 'DonationLink' } }
    /**
     * Find zero or one DonationLink that matches the filter.
     * @param {DonationLinkFindUniqueArgs} args - Arguments to find a DonationLink
     * @example
     * // Get one DonationLink
     * const donationLink = await prisma.donationLink.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DonationLinkFindUniqueArgs>(args: SelectSubset<T, DonationLinkFindUniqueArgs<ExtArgs>>): Prisma__DonationLinkClient<$Result.GetResult<Prisma.$DonationLinkPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DonationLink that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DonationLinkFindUniqueOrThrowArgs} args - Arguments to find a DonationLink
     * @example
     * // Get one DonationLink
     * const donationLink = await prisma.donationLink.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DonationLinkFindUniqueOrThrowArgs>(args: SelectSubset<T, DonationLinkFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DonationLinkClient<$Result.GetResult<Prisma.$DonationLinkPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DonationLink that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationLinkFindFirstArgs} args - Arguments to find a DonationLink
     * @example
     * // Get one DonationLink
     * const donationLink = await prisma.donationLink.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DonationLinkFindFirstArgs>(args?: SelectSubset<T, DonationLinkFindFirstArgs<ExtArgs>>): Prisma__DonationLinkClient<$Result.GetResult<Prisma.$DonationLinkPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DonationLink that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationLinkFindFirstOrThrowArgs} args - Arguments to find a DonationLink
     * @example
     * // Get one DonationLink
     * const donationLink = await prisma.donationLink.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DonationLinkFindFirstOrThrowArgs>(args?: SelectSubset<T, DonationLinkFindFirstOrThrowArgs<ExtArgs>>): Prisma__DonationLinkClient<$Result.GetResult<Prisma.$DonationLinkPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DonationLinks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationLinkFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DonationLinks
     * const donationLinks = await prisma.donationLink.findMany()
     * 
     * // Get first 10 DonationLinks
     * const donationLinks = await prisma.donationLink.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const donationLinkWithIdOnly = await prisma.donationLink.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DonationLinkFindManyArgs>(args?: SelectSubset<T, DonationLinkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DonationLinkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DonationLink.
     * @param {DonationLinkCreateArgs} args - Arguments to create a DonationLink.
     * @example
     * // Create one DonationLink
     * const DonationLink = await prisma.donationLink.create({
     *   data: {
     *     // ... data to create a DonationLink
     *   }
     * })
     * 
     */
    create<T extends DonationLinkCreateArgs>(args: SelectSubset<T, DonationLinkCreateArgs<ExtArgs>>): Prisma__DonationLinkClient<$Result.GetResult<Prisma.$DonationLinkPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DonationLinks.
     * @param {DonationLinkCreateManyArgs} args - Arguments to create many DonationLinks.
     * @example
     * // Create many DonationLinks
     * const donationLink = await prisma.donationLink.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DonationLinkCreateManyArgs>(args?: SelectSubset<T, DonationLinkCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DonationLinks and returns the data saved in the database.
     * @param {DonationLinkCreateManyAndReturnArgs} args - Arguments to create many DonationLinks.
     * @example
     * // Create many DonationLinks
     * const donationLink = await prisma.donationLink.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DonationLinks and only return the `id`
     * const donationLinkWithIdOnly = await prisma.donationLink.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DonationLinkCreateManyAndReturnArgs>(args?: SelectSubset<T, DonationLinkCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DonationLinkPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DonationLink.
     * @param {DonationLinkDeleteArgs} args - Arguments to delete one DonationLink.
     * @example
     * // Delete one DonationLink
     * const DonationLink = await prisma.donationLink.delete({
     *   where: {
     *     // ... filter to delete one DonationLink
     *   }
     * })
     * 
     */
    delete<T extends DonationLinkDeleteArgs>(args: SelectSubset<T, DonationLinkDeleteArgs<ExtArgs>>): Prisma__DonationLinkClient<$Result.GetResult<Prisma.$DonationLinkPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DonationLink.
     * @param {DonationLinkUpdateArgs} args - Arguments to update one DonationLink.
     * @example
     * // Update one DonationLink
     * const donationLink = await prisma.donationLink.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DonationLinkUpdateArgs>(args: SelectSubset<T, DonationLinkUpdateArgs<ExtArgs>>): Prisma__DonationLinkClient<$Result.GetResult<Prisma.$DonationLinkPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DonationLinks.
     * @param {DonationLinkDeleteManyArgs} args - Arguments to filter DonationLinks to delete.
     * @example
     * // Delete a few DonationLinks
     * const { count } = await prisma.donationLink.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DonationLinkDeleteManyArgs>(args?: SelectSubset<T, DonationLinkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DonationLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationLinkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DonationLinks
     * const donationLink = await prisma.donationLink.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DonationLinkUpdateManyArgs>(args: SelectSubset<T, DonationLinkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DonationLinks and returns the data updated in the database.
     * @param {DonationLinkUpdateManyAndReturnArgs} args - Arguments to update many DonationLinks.
     * @example
     * // Update many DonationLinks
     * const donationLink = await prisma.donationLink.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DonationLinks and only return the `id`
     * const donationLinkWithIdOnly = await prisma.donationLink.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DonationLinkUpdateManyAndReturnArgs>(args: SelectSubset<T, DonationLinkUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DonationLinkPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DonationLink.
     * @param {DonationLinkUpsertArgs} args - Arguments to update or create a DonationLink.
     * @example
     * // Update or create a DonationLink
     * const donationLink = await prisma.donationLink.upsert({
     *   create: {
     *     // ... data to create a DonationLink
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DonationLink we want to update
     *   }
     * })
     */
    upsert<T extends DonationLinkUpsertArgs>(args: SelectSubset<T, DonationLinkUpsertArgs<ExtArgs>>): Prisma__DonationLinkClient<$Result.GetResult<Prisma.$DonationLinkPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DonationLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationLinkCountArgs} args - Arguments to filter DonationLinks to count.
     * @example
     * // Count the number of DonationLinks
     * const count = await prisma.donationLink.count({
     *   where: {
     *     // ... the filter for the DonationLinks we want to count
     *   }
     * })
    **/
    count<T extends DonationLinkCountArgs>(
      args?: Subset<T, DonationLinkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DonationLinkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DonationLink.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationLinkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DonationLinkAggregateArgs>(args: Subset<T, DonationLinkAggregateArgs>): Prisma.PrismaPromise<GetDonationLinkAggregateType<T>>

    /**
     * Group by DonationLink.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DonationLinkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DonationLinkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DonationLinkGroupByArgs['orderBy'] }
        : { orderBy?: DonationLinkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DonationLinkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDonationLinkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DonationLink model
   */
  readonly fields: DonationLinkFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DonationLink.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DonationLinkClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    admin<T extends AdminDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AdminDefaultArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DonationLink model
   */
  interface DonationLinkFieldRefs {
    readonly id: FieldRef<"DonationLink", 'Int'>
    readonly admin_id: FieldRef<"DonationLink", 'String'>
    readonly currency_code: FieldRef<"DonationLink", 'CurrencyCode'>
    readonly link: FieldRef<"DonationLink", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DonationLink findUnique
   */
  export type DonationLinkFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationLink
     */
    select?: DonationLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DonationLink
     */
    omit?: DonationLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationLinkInclude<ExtArgs> | null
    /**
     * Filter, which DonationLink to fetch.
     */
    where: DonationLinkWhereUniqueInput
  }

  /**
   * DonationLink findUniqueOrThrow
   */
  export type DonationLinkFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationLink
     */
    select?: DonationLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DonationLink
     */
    omit?: DonationLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationLinkInclude<ExtArgs> | null
    /**
     * Filter, which DonationLink to fetch.
     */
    where: DonationLinkWhereUniqueInput
  }

  /**
   * DonationLink findFirst
   */
  export type DonationLinkFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationLink
     */
    select?: DonationLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DonationLink
     */
    omit?: DonationLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationLinkInclude<ExtArgs> | null
    /**
     * Filter, which DonationLink to fetch.
     */
    where?: DonationLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DonationLinks to fetch.
     */
    orderBy?: DonationLinkOrderByWithRelationInput | DonationLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DonationLinks.
     */
    cursor?: DonationLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DonationLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DonationLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DonationLinks.
     */
    distinct?: DonationLinkScalarFieldEnum | DonationLinkScalarFieldEnum[]
  }

  /**
   * DonationLink findFirstOrThrow
   */
  export type DonationLinkFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationLink
     */
    select?: DonationLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DonationLink
     */
    omit?: DonationLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationLinkInclude<ExtArgs> | null
    /**
     * Filter, which DonationLink to fetch.
     */
    where?: DonationLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DonationLinks to fetch.
     */
    orderBy?: DonationLinkOrderByWithRelationInput | DonationLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DonationLinks.
     */
    cursor?: DonationLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DonationLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DonationLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DonationLinks.
     */
    distinct?: DonationLinkScalarFieldEnum | DonationLinkScalarFieldEnum[]
  }

  /**
   * DonationLink findMany
   */
  export type DonationLinkFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationLink
     */
    select?: DonationLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DonationLink
     */
    omit?: DonationLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationLinkInclude<ExtArgs> | null
    /**
     * Filter, which DonationLinks to fetch.
     */
    where?: DonationLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DonationLinks to fetch.
     */
    orderBy?: DonationLinkOrderByWithRelationInput | DonationLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DonationLinks.
     */
    cursor?: DonationLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DonationLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DonationLinks.
     */
    skip?: number
    distinct?: DonationLinkScalarFieldEnum | DonationLinkScalarFieldEnum[]
  }

  /**
   * DonationLink create
   */
  export type DonationLinkCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationLink
     */
    select?: DonationLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DonationLink
     */
    omit?: DonationLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationLinkInclude<ExtArgs> | null
    /**
     * The data needed to create a DonationLink.
     */
    data: XOR<DonationLinkCreateInput, DonationLinkUncheckedCreateInput>
  }

  /**
   * DonationLink createMany
   */
  export type DonationLinkCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DonationLinks.
     */
    data: DonationLinkCreateManyInput | DonationLinkCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DonationLink createManyAndReturn
   */
  export type DonationLinkCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationLink
     */
    select?: DonationLinkSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DonationLink
     */
    omit?: DonationLinkOmit<ExtArgs> | null
    /**
     * The data used to create many DonationLinks.
     */
    data: DonationLinkCreateManyInput | DonationLinkCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationLinkIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DonationLink update
   */
  export type DonationLinkUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationLink
     */
    select?: DonationLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DonationLink
     */
    omit?: DonationLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationLinkInclude<ExtArgs> | null
    /**
     * The data needed to update a DonationLink.
     */
    data: XOR<DonationLinkUpdateInput, DonationLinkUncheckedUpdateInput>
    /**
     * Choose, which DonationLink to update.
     */
    where: DonationLinkWhereUniqueInput
  }

  /**
   * DonationLink updateMany
   */
  export type DonationLinkUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DonationLinks.
     */
    data: XOR<DonationLinkUpdateManyMutationInput, DonationLinkUncheckedUpdateManyInput>
    /**
     * Filter which DonationLinks to update
     */
    where?: DonationLinkWhereInput
    /**
     * Limit how many DonationLinks to update.
     */
    limit?: number
  }

  /**
   * DonationLink updateManyAndReturn
   */
  export type DonationLinkUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationLink
     */
    select?: DonationLinkSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DonationLink
     */
    omit?: DonationLinkOmit<ExtArgs> | null
    /**
     * The data used to update DonationLinks.
     */
    data: XOR<DonationLinkUpdateManyMutationInput, DonationLinkUncheckedUpdateManyInput>
    /**
     * Filter which DonationLinks to update
     */
    where?: DonationLinkWhereInput
    /**
     * Limit how many DonationLinks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationLinkIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DonationLink upsert
   */
  export type DonationLinkUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationLink
     */
    select?: DonationLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DonationLink
     */
    omit?: DonationLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationLinkInclude<ExtArgs> | null
    /**
     * The filter to search for the DonationLink to update in case it exists.
     */
    where: DonationLinkWhereUniqueInput
    /**
     * In case the DonationLink found by the `where` argument doesn't exist, create a new DonationLink with this data.
     */
    create: XOR<DonationLinkCreateInput, DonationLinkUncheckedCreateInput>
    /**
     * In case the DonationLink was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DonationLinkUpdateInput, DonationLinkUncheckedUpdateInput>
  }

  /**
   * DonationLink delete
   */
  export type DonationLinkDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationLink
     */
    select?: DonationLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DonationLink
     */
    omit?: DonationLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationLinkInclude<ExtArgs> | null
    /**
     * Filter which DonationLink to delete.
     */
    where: DonationLinkWhereUniqueInput
  }

  /**
   * DonationLink deleteMany
   */
  export type DonationLinkDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DonationLinks to delete
     */
    where?: DonationLinkWhereInput
    /**
     * Limit how many DonationLinks to delete.
     */
    limit?: number
  }

  /**
   * DonationLink without action
   */
  export type DonationLinkDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DonationLink
     */
    select?: DonationLinkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DonationLink
     */
    omit?: DonationLinkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DonationLinkInclude<ExtArgs> | null
  }


  /**
   * Model Owner
   */

  export type AggregateOwner = {
    _count: OwnerCountAggregateOutputType | null
    _avg: OwnerAvgAggregateOutputType | null
    _sum: OwnerSumAggregateOutputType | null
    _min: OwnerMinAggregateOutputType | null
    _max: OwnerMaxAggregateOutputType | null
  }

  export type OwnerAvgAggregateOutputType = {
    id: number | null
    created_at: number | null
    updated_at: number | null
  }

  export type OwnerSumAggregateOutputType = {
    id: number | null
    created_at: bigint | null
    updated_at: bigint | null
  }

  export type OwnerMinAggregateOutputType = {
    id: number | null
    first_name: string | null
    last_name: string | null
    sm_username: string | null
    picture: string | null
    created_at: bigint | null
    updated_at: bigint | null
  }

  export type OwnerMaxAggregateOutputType = {
    id: number | null
    first_name: string | null
    last_name: string | null
    sm_username: string | null
    picture: string | null
    created_at: bigint | null
    updated_at: bigint | null
  }

  export type OwnerCountAggregateOutputType = {
    id: number
    first_name: number
    last_name: number
    sm_username: number
    picture: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type OwnerAvgAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
  }

  export type OwnerSumAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
  }

  export type OwnerMinAggregateInputType = {
    id?: true
    first_name?: true
    last_name?: true
    sm_username?: true
    picture?: true
    created_at?: true
    updated_at?: true
  }

  export type OwnerMaxAggregateInputType = {
    id?: true
    first_name?: true
    last_name?: true
    sm_username?: true
    picture?: true
    created_at?: true
    updated_at?: true
  }

  export type OwnerCountAggregateInputType = {
    id?: true
    first_name?: true
    last_name?: true
    sm_username?: true
    picture?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type OwnerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Owner to aggregate.
     */
    where?: OwnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Owners to fetch.
     */
    orderBy?: OwnerOrderByWithRelationInput | OwnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OwnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Owners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Owners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Owners
    **/
    _count?: true | OwnerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OwnerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OwnerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OwnerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OwnerMaxAggregateInputType
  }

  export type GetOwnerAggregateType<T extends OwnerAggregateArgs> = {
        [P in keyof T & keyof AggregateOwner]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOwner[P]>
      : GetScalarType<T[P], AggregateOwner[P]>
  }




  export type OwnerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OwnerWhereInput
    orderBy?: OwnerOrderByWithAggregationInput | OwnerOrderByWithAggregationInput[]
    by: OwnerScalarFieldEnum[] | OwnerScalarFieldEnum
    having?: OwnerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OwnerCountAggregateInputType | true
    _avg?: OwnerAvgAggregateInputType
    _sum?: OwnerSumAggregateInputType
    _min?: OwnerMinAggregateInputType
    _max?: OwnerMaxAggregateInputType
  }

  export type OwnerGroupByOutputType = {
    id: number
    first_name: string
    last_name: string
    sm_username: string
    picture: string
    created_at: bigint
    updated_at: bigint
    _count: OwnerCountAggregateOutputType | null
    _avg: OwnerAvgAggregateOutputType | null
    _sum: OwnerSumAggregateOutputType | null
    _min: OwnerMinAggregateOutputType | null
    _max: OwnerMaxAggregateOutputType | null
  }

  type GetOwnerGroupByPayload<T extends OwnerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OwnerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OwnerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OwnerGroupByOutputType[P]>
            : GetScalarType<T[P], OwnerGroupByOutputType[P]>
        }
      >
    >


  export type OwnerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    first_name?: boolean
    last_name?: boolean
    sm_username?: boolean
    picture?: boolean
    created_at?: boolean
    updated_at?: boolean
    products?: boolean | Owner$productsArgs<ExtArgs>
    _count?: boolean | OwnerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["owner"]>

  export type OwnerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    first_name?: boolean
    last_name?: boolean
    sm_username?: boolean
    picture?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["owner"]>

  export type OwnerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    first_name?: boolean
    last_name?: boolean
    sm_username?: boolean
    picture?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["owner"]>

  export type OwnerSelectScalar = {
    id?: boolean
    first_name?: boolean
    last_name?: boolean
    sm_username?: boolean
    picture?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type OwnerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "first_name" | "last_name" | "sm_username" | "picture" | "created_at" | "updated_at", ExtArgs["result"]["owner"]>
  export type OwnerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | Owner$productsArgs<ExtArgs>
    _count?: boolean | OwnerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OwnerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type OwnerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $OwnerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Owner"
    objects: {
      products: Prisma.$ProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      first_name: string
      last_name: string
      sm_username: string
      picture: string
      created_at: bigint
      updated_at: bigint
    }, ExtArgs["result"]["owner"]>
    composites: {}
  }

  type OwnerGetPayload<S extends boolean | null | undefined | OwnerDefaultArgs> = $Result.GetResult<Prisma.$OwnerPayload, S>

  type OwnerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OwnerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OwnerCountAggregateInputType | true
    }

  export interface OwnerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Owner'], meta: { name: 'Owner' } }
    /**
     * Find zero or one Owner that matches the filter.
     * @param {OwnerFindUniqueArgs} args - Arguments to find a Owner
     * @example
     * // Get one Owner
     * const owner = await prisma.owner.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OwnerFindUniqueArgs>(args: SelectSubset<T, OwnerFindUniqueArgs<ExtArgs>>): Prisma__OwnerClient<$Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Owner that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OwnerFindUniqueOrThrowArgs} args - Arguments to find a Owner
     * @example
     * // Get one Owner
     * const owner = await prisma.owner.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OwnerFindUniqueOrThrowArgs>(args: SelectSubset<T, OwnerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OwnerClient<$Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Owner that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OwnerFindFirstArgs} args - Arguments to find a Owner
     * @example
     * // Get one Owner
     * const owner = await prisma.owner.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OwnerFindFirstArgs>(args?: SelectSubset<T, OwnerFindFirstArgs<ExtArgs>>): Prisma__OwnerClient<$Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Owner that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OwnerFindFirstOrThrowArgs} args - Arguments to find a Owner
     * @example
     * // Get one Owner
     * const owner = await prisma.owner.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OwnerFindFirstOrThrowArgs>(args?: SelectSubset<T, OwnerFindFirstOrThrowArgs<ExtArgs>>): Prisma__OwnerClient<$Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Owners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OwnerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Owners
     * const owners = await prisma.owner.findMany()
     * 
     * // Get first 10 Owners
     * const owners = await prisma.owner.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ownerWithIdOnly = await prisma.owner.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OwnerFindManyArgs>(args?: SelectSubset<T, OwnerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Owner.
     * @param {OwnerCreateArgs} args - Arguments to create a Owner.
     * @example
     * // Create one Owner
     * const Owner = await prisma.owner.create({
     *   data: {
     *     // ... data to create a Owner
     *   }
     * })
     * 
     */
    create<T extends OwnerCreateArgs>(args: SelectSubset<T, OwnerCreateArgs<ExtArgs>>): Prisma__OwnerClient<$Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Owners.
     * @param {OwnerCreateManyArgs} args - Arguments to create many Owners.
     * @example
     * // Create many Owners
     * const owner = await prisma.owner.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OwnerCreateManyArgs>(args?: SelectSubset<T, OwnerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Owners and returns the data saved in the database.
     * @param {OwnerCreateManyAndReturnArgs} args - Arguments to create many Owners.
     * @example
     * // Create many Owners
     * const owner = await prisma.owner.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Owners and only return the `id`
     * const ownerWithIdOnly = await prisma.owner.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OwnerCreateManyAndReturnArgs>(args?: SelectSubset<T, OwnerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Owner.
     * @param {OwnerDeleteArgs} args - Arguments to delete one Owner.
     * @example
     * // Delete one Owner
     * const Owner = await prisma.owner.delete({
     *   where: {
     *     // ... filter to delete one Owner
     *   }
     * })
     * 
     */
    delete<T extends OwnerDeleteArgs>(args: SelectSubset<T, OwnerDeleteArgs<ExtArgs>>): Prisma__OwnerClient<$Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Owner.
     * @param {OwnerUpdateArgs} args - Arguments to update one Owner.
     * @example
     * // Update one Owner
     * const owner = await prisma.owner.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OwnerUpdateArgs>(args: SelectSubset<T, OwnerUpdateArgs<ExtArgs>>): Prisma__OwnerClient<$Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Owners.
     * @param {OwnerDeleteManyArgs} args - Arguments to filter Owners to delete.
     * @example
     * // Delete a few Owners
     * const { count } = await prisma.owner.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OwnerDeleteManyArgs>(args?: SelectSubset<T, OwnerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Owners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OwnerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Owners
     * const owner = await prisma.owner.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OwnerUpdateManyArgs>(args: SelectSubset<T, OwnerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Owners and returns the data updated in the database.
     * @param {OwnerUpdateManyAndReturnArgs} args - Arguments to update many Owners.
     * @example
     * // Update many Owners
     * const owner = await prisma.owner.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Owners and only return the `id`
     * const ownerWithIdOnly = await prisma.owner.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OwnerUpdateManyAndReturnArgs>(args: SelectSubset<T, OwnerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Owner.
     * @param {OwnerUpsertArgs} args - Arguments to update or create a Owner.
     * @example
     * // Update or create a Owner
     * const owner = await prisma.owner.upsert({
     *   create: {
     *     // ... data to create a Owner
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Owner we want to update
     *   }
     * })
     */
    upsert<T extends OwnerUpsertArgs>(args: SelectSubset<T, OwnerUpsertArgs<ExtArgs>>): Prisma__OwnerClient<$Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Owners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OwnerCountArgs} args - Arguments to filter Owners to count.
     * @example
     * // Count the number of Owners
     * const count = await prisma.owner.count({
     *   where: {
     *     // ... the filter for the Owners we want to count
     *   }
     * })
    **/
    count<T extends OwnerCountArgs>(
      args?: Subset<T, OwnerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OwnerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Owner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OwnerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OwnerAggregateArgs>(args: Subset<T, OwnerAggregateArgs>): Prisma.PrismaPromise<GetOwnerAggregateType<T>>

    /**
     * Group by Owner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OwnerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OwnerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OwnerGroupByArgs['orderBy'] }
        : { orderBy?: OwnerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OwnerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOwnerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Owner model
   */
  readonly fields: OwnerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Owner.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OwnerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    products<T extends Owner$productsArgs<ExtArgs> = {}>(args?: Subset<T, Owner$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Owner model
   */
  interface OwnerFieldRefs {
    readonly id: FieldRef<"Owner", 'Int'>
    readonly first_name: FieldRef<"Owner", 'String'>
    readonly last_name: FieldRef<"Owner", 'String'>
    readonly sm_username: FieldRef<"Owner", 'String'>
    readonly picture: FieldRef<"Owner", 'String'>
    readonly created_at: FieldRef<"Owner", 'BigInt'>
    readonly updated_at: FieldRef<"Owner", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * Owner findUnique
   */
  export type OwnerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Owner
     */
    select?: OwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Owner
     */
    omit?: OwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerInclude<ExtArgs> | null
    /**
     * Filter, which Owner to fetch.
     */
    where: OwnerWhereUniqueInput
  }

  /**
   * Owner findUniqueOrThrow
   */
  export type OwnerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Owner
     */
    select?: OwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Owner
     */
    omit?: OwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerInclude<ExtArgs> | null
    /**
     * Filter, which Owner to fetch.
     */
    where: OwnerWhereUniqueInput
  }

  /**
   * Owner findFirst
   */
  export type OwnerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Owner
     */
    select?: OwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Owner
     */
    omit?: OwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerInclude<ExtArgs> | null
    /**
     * Filter, which Owner to fetch.
     */
    where?: OwnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Owners to fetch.
     */
    orderBy?: OwnerOrderByWithRelationInput | OwnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Owners.
     */
    cursor?: OwnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Owners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Owners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Owners.
     */
    distinct?: OwnerScalarFieldEnum | OwnerScalarFieldEnum[]
  }

  /**
   * Owner findFirstOrThrow
   */
  export type OwnerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Owner
     */
    select?: OwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Owner
     */
    omit?: OwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerInclude<ExtArgs> | null
    /**
     * Filter, which Owner to fetch.
     */
    where?: OwnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Owners to fetch.
     */
    orderBy?: OwnerOrderByWithRelationInput | OwnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Owners.
     */
    cursor?: OwnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Owners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Owners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Owners.
     */
    distinct?: OwnerScalarFieldEnum | OwnerScalarFieldEnum[]
  }

  /**
   * Owner findMany
   */
  export type OwnerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Owner
     */
    select?: OwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Owner
     */
    omit?: OwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerInclude<ExtArgs> | null
    /**
     * Filter, which Owners to fetch.
     */
    where?: OwnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Owners to fetch.
     */
    orderBy?: OwnerOrderByWithRelationInput | OwnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Owners.
     */
    cursor?: OwnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Owners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Owners.
     */
    skip?: number
    distinct?: OwnerScalarFieldEnum | OwnerScalarFieldEnum[]
  }

  /**
   * Owner create
   */
  export type OwnerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Owner
     */
    select?: OwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Owner
     */
    omit?: OwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerInclude<ExtArgs> | null
    /**
     * The data needed to create a Owner.
     */
    data: XOR<OwnerCreateInput, OwnerUncheckedCreateInput>
  }

  /**
   * Owner createMany
   */
  export type OwnerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Owners.
     */
    data: OwnerCreateManyInput | OwnerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Owner createManyAndReturn
   */
  export type OwnerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Owner
     */
    select?: OwnerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Owner
     */
    omit?: OwnerOmit<ExtArgs> | null
    /**
     * The data used to create many Owners.
     */
    data: OwnerCreateManyInput | OwnerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Owner update
   */
  export type OwnerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Owner
     */
    select?: OwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Owner
     */
    omit?: OwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerInclude<ExtArgs> | null
    /**
     * The data needed to update a Owner.
     */
    data: XOR<OwnerUpdateInput, OwnerUncheckedUpdateInput>
    /**
     * Choose, which Owner to update.
     */
    where: OwnerWhereUniqueInput
  }

  /**
   * Owner updateMany
   */
  export type OwnerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Owners.
     */
    data: XOR<OwnerUpdateManyMutationInput, OwnerUncheckedUpdateManyInput>
    /**
     * Filter which Owners to update
     */
    where?: OwnerWhereInput
    /**
     * Limit how many Owners to update.
     */
    limit?: number
  }

  /**
   * Owner updateManyAndReturn
   */
  export type OwnerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Owner
     */
    select?: OwnerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Owner
     */
    omit?: OwnerOmit<ExtArgs> | null
    /**
     * The data used to update Owners.
     */
    data: XOR<OwnerUpdateManyMutationInput, OwnerUncheckedUpdateManyInput>
    /**
     * Filter which Owners to update
     */
    where?: OwnerWhereInput
    /**
     * Limit how many Owners to update.
     */
    limit?: number
  }

  /**
   * Owner upsert
   */
  export type OwnerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Owner
     */
    select?: OwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Owner
     */
    omit?: OwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerInclude<ExtArgs> | null
    /**
     * The filter to search for the Owner to update in case it exists.
     */
    where: OwnerWhereUniqueInput
    /**
     * In case the Owner found by the `where` argument doesn't exist, create a new Owner with this data.
     */
    create: XOR<OwnerCreateInput, OwnerUncheckedCreateInput>
    /**
     * In case the Owner was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OwnerUpdateInput, OwnerUncheckedUpdateInput>
  }

  /**
   * Owner delete
   */
  export type OwnerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Owner
     */
    select?: OwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Owner
     */
    omit?: OwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerInclude<ExtArgs> | null
    /**
     * Filter which Owner to delete.
     */
    where: OwnerWhereUniqueInput
  }

  /**
   * Owner deleteMany
   */
  export type OwnerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Owners to delete
     */
    where?: OwnerWhereInput
    /**
     * Limit how many Owners to delete.
     */
    limit?: number
  }

  /**
   * Owner.products
   */
  export type Owner$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Owner without action
   */
  export type OwnerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Owner
     */
    select?: OwnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Owner
     */
    omit?: OwnerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OwnerInclude<ExtArgs> | null
  }


  /**
   * Model Customer
   */

  export type AggregateCustomer = {
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  export type CustomerAvgAggregateOutputType = {
    last_active: number | null
  }

  export type CustomerSumAggregateOutputType = {
    last_active: bigint | null
  }

  export type CustomerMinAggregateOutputType = {
    id: string | null
    first_name: string | null
    last_name: string | null
    email: string | null
    password: string | null
    phone_number: string | null
    picture: string | null
    last_active: bigint | null
  }

  export type CustomerMaxAggregateOutputType = {
    id: string | null
    first_name: string | null
    last_name: string | null
    email: string | null
    password: string | null
    phone_number: string | null
    picture: string | null
    last_active: bigint | null
  }

  export type CustomerCountAggregateOutputType = {
    id: number
    first_name: number
    last_name: number
    email: number
    password: number
    phone_number: number
    picture: number
    last_active: number
    _all: number
  }


  export type CustomerAvgAggregateInputType = {
    last_active?: true
  }

  export type CustomerSumAggregateInputType = {
    last_active?: true
  }

  export type CustomerMinAggregateInputType = {
    id?: true
    first_name?: true
    last_name?: true
    email?: true
    password?: true
    phone_number?: true
    picture?: true
    last_active?: true
  }

  export type CustomerMaxAggregateInputType = {
    id?: true
    first_name?: true
    last_name?: true
    email?: true
    password?: true
    phone_number?: true
    picture?: true
    last_active?: true
  }

  export type CustomerCountAggregateInputType = {
    id?: true
    first_name?: true
    last_name?: true
    email?: true
    password?: true
    phone_number?: true
    picture?: true
    last_active?: true
    _all?: true
  }

  export type CustomerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customer to aggregate.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Customers
    **/
    _count?: true | CustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerMaxAggregateInputType
  }

  export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer[P]>
      : GetScalarType<T[P], AggregateCustomer[P]>
  }




  export type CustomerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithAggregationInput | CustomerOrderByWithAggregationInput[]
    by: CustomerScalarFieldEnum[] | CustomerScalarFieldEnum
    having?: CustomerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCountAggregateInputType | true
    _avg?: CustomerAvgAggregateInputType
    _sum?: CustomerSumAggregateInputType
    _min?: CustomerMinAggregateInputType
    _max?: CustomerMaxAggregateInputType
  }

  export type CustomerGroupByOutputType = {
    id: string
    first_name: string
    last_name: string
    email: string
    password: string | null
    phone_number: string | null
    picture: string | null
    last_active: bigint
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  type GetCustomerGroupByPayload<T extends CustomerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerGroupByOutputType[P]>
        }
      >
    >


  export type CustomerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    first_name?: boolean
    last_name?: boolean
    email?: boolean
    password?: boolean
    phone_number?: boolean
    picture?: boolean
    last_active?: boolean
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    first_name?: boolean
    last_name?: boolean
    email?: boolean
    password?: boolean
    phone_number?: boolean
    picture?: boolean
    last_active?: boolean
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    first_name?: boolean
    last_name?: boolean
    email?: boolean
    password?: boolean
    phone_number?: boolean
    picture?: boolean
    last_active?: boolean
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectScalar = {
    id?: boolean
    first_name?: boolean
    last_name?: boolean
    email?: boolean
    password?: boolean
    phone_number?: boolean
    picture?: boolean
    last_active?: boolean
  }

  export type CustomerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "first_name" | "last_name" | "email" | "password" | "phone_number" | "picture" | "last_active", ExtArgs["result"]["customer"]>

  export type $CustomerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Customer"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      first_name: string
      last_name: string
      email: string
      password: string | null
      phone_number: string | null
      picture: string | null
      last_active: bigint
    }, ExtArgs["result"]["customer"]>
    composites: {}
  }

  type CustomerGetPayload<S extends boolean | null | undefined | CustomerDefaultArgs> = $Result.GetResult<Prisma.$CustomerPayload, S>

  type CustomerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CustomerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomerCountAggregateInputType | true
    }

  export interface CustomerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Customer'], meta: { name: 'Customer' } }
    /**
     * Find zero or one Customer that matches the filter.
     * @param {CustomerFindUniqueArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerFindUniqueArgs>(args: SelectSubset<T, CustomerFindUniqueArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Customer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CustomerFindUniqueOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Customer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerFindFirstArgs>(args?: SelectSubset<T, CustomerFindFirstArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Customer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customer.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerWithIdOnly = await prisma.customer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerFindManyArgs>(args?: SelectSubset<T, CustomerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Customer.
     * @param {CustomerCreateArgs} args - Arguments to create a Customer.
     * @example
     * // Create one Customer
     * const Customer = await prisma.customer.create({
     *   data: {
     *     // ... data to create a Customer
     *   }
     * })
     * 
     */
    create<T extends CustomerCreateArgs>(args: SelectSubset<T, CustomerCreateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Customers.
     * @param {CustomerCreateManyArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerCreateManyArgs>(args?: SelectSubset<T, CustomerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Customers and returns the data saved in the database.
     * @param {CustomerCreateManyAndReturnArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Customers and only return the `id`
     * const customerWithIdOnly = await prisma.customer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Customer.
     * @param {CustomerDeleteArgs} args - Arguments to delete one Customer.
     * @example
     * // Delete one Customer
     * const Customer = await prisma.customer.delete({
     *   where: {
     *     // ... filter to delete one Customer
     *   }
     * })
     * 
     */
    delete<T extends CustomerDeleteArgs>(args: SelectSubset<T, CustomerDeleteArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Customer.
     * @param {CustomerUpdateArgs} args - Arguments to update one Customer.
     * @example
     * // Update one Customer
     * const customer = await prisma.customer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerUpdateArgs>(args: SelectSubset<T, CustomerUpdateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Customers.
     * @param {CustomerDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerDeleteManyArgs>(args?: SelectSubset<T, CustomerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerUpdateManyArgs>(args: SelectSubset<T, CustomerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers and returns the data updated in the database.
     * @param {CustomerUpdateManyAndReturnArgs} args - Arguments to update many Customers.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Customers and only return the `id`
     * const customerWithIdOnly = await prisma.customer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CustomerUpdateManyAndReturnArgs>(args: SelectSubset<T, CustomerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Customer.
     * @param {CustomerUpsertArgs} args - Arguments to update or create a Customer.
     * @example
     * // Update or create a Customer
     * const customer = await prisma.customer.upsert({
     *   create: {
     *     // ... data to create a Customer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer we want to update
     *   }
     * })
     */
    upsert<T extends CustomerUpsertArgs>(args: SelectSubset<T, CustomerUpsertArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customer.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends CustomerCountArgs>(
      args?: Subset<T, CustomerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerAggregateArgs>(args: Subset<T, CustomerAggregateArgs>): Prisma.PrismaPromise<GetCustomerAggregateType<T>>

    /**
     * Group by Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerGroupByArgs['orderBy'] }
        : { orderBy?: CustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Customer model
   */
  readonly fields: CustomerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Customer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Customer model
   */
  interface CustomerFieldRefs {
    readonly id: FieldRef<"Customer", 'String'>
    readonly first_name: FieldRef<"Customer", 'String'>
    readonly last_name: FieldRef<"Customer", 'String'>
    readonly email: FieldRef<"Customer", 'String'>
    readonly password: FieldRef<"Customer", 'String'>
    readonly phone_number: FieldRef<"Customer", 'String'>
    readonly picture: FieldRef<"Customer", 'String'>
    readonly last_active: FieldRef<"Customer", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * Customer findUnique
   */
  export type CustomerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findUniqueOrThrow
   */
  export type CustomerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findFirst
   */
  export type CustomerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findFirstOrThrow
   */
  export type CustomerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findMany
   */
  export type CustomerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Filter, which Customers to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer create
   */
  export type CustomerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * The data needed to create a Customer.
     */
    data: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
  }

  /**
   * Customer createMany
   */
  export type CustomerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Customer createManyAndReturn
   */
  export type CustomerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Customer update
   */
  export type CustomerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * The data needed to update a Customer.
     */
    data: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
    /**
     * Choose, which Customer to update.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer updateMany
   */
  export type CustomerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to update.
     */
    limit?: number
  }

  /**
   * Customer updateManyAndReturn
   */
  export type CustomerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to update.
     */
    limit?: number
  }

  /**
   * Customer upsert
   */
  export type CustomerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * The filter to search for the Customer to update in case it exists.
     */
    where: CustomerWhereUniqueInput
    /**
     * In case the Customer found by the `where` argument doesn't exist, create a new Customer with this data.
     */
    create: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
    /**
     * In case the Customer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
  }

  /**
   * Customer delete
   */
  export type CustomerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Filter which Customer to delete.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer deleteMany
   */
  export type CustomerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customers to delete
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to delete.
     */
    limit?: number
  }

  /**
   * Customer without action
   */
  export type CustomerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
  }


  /**
   * Model License
   */

  export type AggregateLicense = {
    _count: LicenseCountAggregateOutputType | null
    _avg: LicenseAvgAggregateOutputType | null
    _sum: LicenseSumAggregateOutputType | null
    _min: LicenseMinAggregateOutputType | null
    _max: LicenseMaxAggregateOutputType | null
  }

  export type LicenseAvgAggregateOutputType = {
    id: number | null
    created_at: number | null
    updated_at: number | null
  }

  export type LicenseSumAggregateOutputType = {
    id: number | null
    created_at: bigint | null
    updated_at: bigint | null
  }

  export type LicenseMinAggregateOutputType = {
    id: number | null
    created_at: bigint | null
    updated_at: bigint | null
  }

  export type LicenseMaxAggregateOutputType = {
    id: number | null
    created_at: bigint | null
    updated_at: bigint | null
  }

  export type LicenseCountAggregateOutputType = {
    id: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type LicenseAvgAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
  }

  export type LicenseSumAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
  }

  export type LicenseMinAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
  }

  export type LicenseMaxAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
  }

  export type LicenseCountAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type LicenseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which License to aggregate.
     */
    where?: LicenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Licenses to fetch.
     */
    orderBy?: LicenseOrderByWithRelationInput | LicenseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LicenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Licenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Licenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Licenses
    **/
    _count?: true | LicenseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LicenseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LicenseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LicenseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LicenseMaxAggregateInputType
  }

  export type GetLicenseAggregateType<T extends LicenseAggregateArgs> = {
        [P in keyof T & keyof AggregateLicense]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLicense[P]>
      : GetScalarType<T[P], AggregateLicense[P]>
  }




  export type LicenseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LicenseWhereInput
    orderBy?: LicenseOrderByWithAggregationInput | LicenseOrderByWithAggregationInput[]
    by: LicenseScalarFieldEnum[] | LicenseScalarFieldEnum
    having?: LicenseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LicenseCountAggregateInputType | true
    _avg?: LicenseAvgAggregateInputType
    _sum?: LicenseSumAggregateInputType
    _min?: LicenseMinAggregateInputType
    _max?: LicenseMaxAggregateInputType
  }

  export type LicenseGroupByOutputType = {
    id: number
    created_at: bigint
    updated_at: bigint
    _count: LicenseCountAggregateOutputType | null
    _avg: LicenseAvgAggregateOutputType | null
    _sum: LicenseSumAggregateOutputType | null
    _min: LicenseMinAggregateOutputType | null
    _max: LicenseMaxAggregateOutputType | null
  }

  type GetLicenseGroupByPayload<T extends LicenseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LicenseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LicenseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LicenseGroupByOutputType[P]>
            : GetScalarType<T[P], LicenseGroupByOutputType[P]>
        }
      >
    >


  export type LicenseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    products?: boolean | License$productsArgs<ExtArgs>
    translations?: boolean | License$translationsArgs<ExtArgs>
    _count?: boolean | LicenseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["license"]>

  export type LicenseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["license"]>

  export type LicenseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["license"]>

  export type LicenseSelectScalar = {
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type LicenseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "created_at" | "updated_at", ExtArgs["result"]["license"]>
  export type LicenseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | License$productsArgs<ExtArgs>
    translations?: boolean | License$translationsArgs<ExtArgs>
    _count?: boolean | LicenseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LicenseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type LicenseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $LicensePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "License"
    objects: {
      products: Prisma.$ProductPayload<ExtArgs>[]
      translations: Prisma.$LicenseTranslationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      created_at: bigint
      updated_at: bigint
    }, ExtArgs["result"]["license"]>
    composites: {}
  }

  type LicenseGetPayload<S extends boolean | null | undefined | LicenseDefaultArgs> = $Result.GetResult<Prisma.$LicensePayload, S>

  type LicenseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LicenseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LicenseCountAggregateInputType | true
    }

  export interface LicenseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['License'], meta: { name: 'License' } }
    /**
     * Find zero or one License that matches the filter.
     * @param {LicenseFindUniqueArgs} args - Arguments to find a License
     * @example
     * // Get one License
     * const license = await prisma.license.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LicenseFindUniqueArgs>(args: SelectSubset<T, LicenseFindUniqueArgs<ExtArgs>>): Prisma__LicenseClient<$Result.GetResult<Prisma.$LicensePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one License that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LicenseFindUniqueOrThrowArgs} args - Arguments to find a License
     * @example
     * // Get one License
     * const license = await prisma.license.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LicenseFindUniqueOrThrowArgs>(args: SelectSubset<T, LicenseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LicenseClient<$Result.GetResult<Prisma.$LicensePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first License that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicenseFindFirstArgs} args - Arguments to find a License
     * @example
     * // Get one License
     * const license = await prisma.license.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LicenseFindFirstArgs>(args?: SelectSubset<T, LicenseFindFirstArgs<ExtArgs>>): Prisma__LicenseClient<$Result.GetResult<Prisma.$LicensePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first License that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicenseFindFirstOrThrowArgs} args - Arguments to find a License
     * @example
     * // Get one License
     * const license = await prisma.license.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LicenseFindFirstOrThrowArgs>(args?: SelectSubset<T, LicenseFindFirstOrThrowArgs<ExtArgs>>): Prisma__LicenseClient<$Result.GetResult<Prisma.$LicensePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Licenses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicenseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Licenses
     * const licenses = await prisma.license.findMany()
     * 
     * // Get first 10 Licenses
     * const licenses = await prisma.license.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const licenseWithIdOnly = await prisma.license.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LicenseFindManyArgs>(args?: SelectSubset<T, LicenseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LicensePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a License.
     * @param {LicenseCreateArgs} args - Arguments to create a License.
     * @example
     * // Create one License
     * const License = await prisma.license.create({
     *   data: {
     *     // ... data to create a License
     *   }
     * })
     * 
     */
    create<T extends LicenseCreateArgs>(args: SelectSubset<T, LicenseCreateArgs<ExtArgs>>): Prisma__LicenseClient<$Result.GetResult<Prisma.$LicensePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Licenses.
     * @param {LicenseCreateManyArgs} args - Arguments to create many Licenses.
     * @example
     * // Create many Licenses
     * const license = await prisma.license.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LicenseCreateManyArgs>(args?: SelectSubset<T, LicenseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Licenses and returns the data saved in the database.
     * @param {LicenseCreateManyAndReturnArgs} args - Arguments to create many Licenses.
     * @example
     * // Create many Licenses
     * const license = await prisma.license.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Licenses and only return the `id`
     * const licenseWithIdOnly = await prisma.license.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LicenseCreateManyAndReturnArgs>(args?: SelectSubset<T, LicenseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LicensePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a License.
     * @param {LicenseDeleteArgs} args - Arguments to delete one License.
     * @example
     * // Delete one License
     * const License = await prisma.license.delete({
     *   where: {
     *     // ... filter to delete one License
     *   }
     * })
     * 
     */
    delete<T extends LicenseDeleteArgs>(args: SelectSubset<T, LicenseDeleteArgs<ExtArgs>>): Prisma__LicenseClient<$Result.GetResult<Prisma.$LicensePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one License.
     * @param {LicenseUpdateArgs} args - Arguments to update one License.
     * @example
     * // Update one License
     * const license = await prisma.license.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LicenseUpdateArgs>(args: SelectSubset<T, LicenseUpdateArgs<ExtArgs>>): Prisma__LicenseClient<$Result.GetResult<Prisma.$LicensePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Licenses.
     * @param {LicenseDeleteManyArgs} args - Arguments to filter Licenses to delete.
     * @example
     * // Delete a few Licenses
     * const { count } = await prisma.license.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LicenseDeleteManyArgs>(args?: SelectSubset<T, LicenseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Licenses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicenseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Licenses
     * const license = await prisma.license.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LicenseUpdateManyArgs>(args: SelectSubset<T, LicenseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Licenses and returns the data updated in the database.
     * @param {LicenseUpdateManyAndReturnArgs} args - Arguments to update many Licenses.
     * @example
     * // Update many Licenses
     * const license = await prisma.license.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Licenses and only return the `id`
     * const licenseWithIdOnly = await prisma.license.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LicenseUpdateManyAndReturnArgs>(args: SelectSubset<T, LicenseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LicensePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one License.
     * @param {LicenseUpsertArgs} args - Arguments to update or create a License.
     * @example
     * // Update or create a License
     * const license = await prisma.license.upsert({
     *   create: {
     *     // ... data to create a License
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the License we want to update
     *   }
     * })
     */
    upsert<T extends LicenseUpsertArgs>(args: SelectSubset<T, LicenseUpsertArgs<ExtArgs>>): Prisma__LicenseClient<$Result.GetResult<Prisma.$LicensePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Licenses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicenseCountArgs} args - Arguments to filter Licenses to count.
     * @example
     * // Count the number of Licenses
     * const count = await prisma.license.count({
     *   where: {
     *     // ... the filter for the Licenses we want to count
     *   }
     * })
    **/
    count<T extends LicenseCountArgs>(
      args?: Subset<T, LicenseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LicenseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a License.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicenseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LicenseAggregateArgs>(args: Subset<T, LicenseAggregateArgs>): Prisma.PrismaPromise<GetLicenseAggregateType<T>>

    /**
     * Group by License.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicenseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LicenseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LicenseGroupByArgs['orderBy'] }
        : { orderBy?: LicenseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LicenseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLicenseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the License model
   */
  readonly fields: LicenseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for License.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LicenseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    products<T extends License$productsArgs<ExtArgs> = {}>(args?: Subset<T, License$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    translations<T extends License$translationsArgs<ExtArgs> = {}>(args?: Subset<T, License$translationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LicenseTranslationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the License model
   */
  interface LicenseFieldRefs {
    readonly id: FieldRef<"License", 'Int'>
    readonly created_at: FieldRef<"License", 'BigInt'>
    readonly updated_at: FieldRef<"License", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * License findUnique
   */
  export type LicenseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the License
     */
    select?: LicenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the License
     */
    omit?: LicenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseInclude<ExtArgs> | null
    /**
     * Filter, which License to fetch.
     */
    where: LicenseWhereUniqueInput
  }

  /**
   * License findUniqueOrThrow
   */
  export type LicenseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the License
     */
    select?: LicenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the License
     */
    omit?: LicenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseInclude<ExtArgs> | null
    /**
     * Filter, which License to fetch.
     */
    where: LicenseWhereUniqueInput
  }

  /**
   * License findFirst
   */
  export type LicenseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the License
     */
    select?: LicenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the License
     */
    omit?: LicenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseInclude<ExtArgs> | null
    /**
     * Filter, which License to fetch.
     */
    where?: LicenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Licenses to fetch.
     */
    orderBy?: LicenseOrderByWithRelationInput | LicenseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Licenses.
     */
    cursor?: LicenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Licenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Licenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Licenses.
     */
    distinct?: LicenseScalarFieldEnum | LicenseScalarFieldEnum[]
  }

  /**
   * License findFirstOrThrow
   */
  export type LicenseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the License
     */
    select?: LicenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the License
     */
    omit?: LicenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseInclude<ExtArgs> | null
    /**
     * Filter, which License to fetch.
     */
    where?: LicenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Licenses to fetch.
     */
    orderBy?: LicenseOrderByWithRelationInput | LicenseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Licenses.
     */
    cursor?: LicenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Licenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Licenses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Licenses.
     */
    distinct?: LicenseScalarFieldEnum | LicenseScalarFieldEnum[]
  }

  /**
   * License findMany
   */
  export type LicenseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the License
     */
    select?: LicenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the License
     */
    omit?: LicenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseInclude<ExtArgs> | null
    /**
     * Filter, which Licenses to fetch.
     */
    where?: LicenseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Licenses to fetch.
     */
    orderBy?: LicenseOrderByWithRelationInput | LicenseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Licenses.
     */
    cursor?: LicenseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Licenses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Licenses.
     */
    skip?: number
    distinct?: LicenseScalarFieldEnum | LicenseScalarFieldEnum[]
  }

  /**
   * License create
   */
  export type LicenseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the License
     */
    select?: LicenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the License
     */
    omit?: LicenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseInclude<ExtArgs> | null
    /**
     * The data needed to create a License.
     */
    data: XOR<LicenseCreateInput, LicenseUncheckedCreateInput>
  }

  /**
   * License createMany
   */
  export type LicenseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Licenses.
     */
    data: LicenseCreateManyInput | LicenseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * License createManyAndReturn
   */
  export type LicenseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the License
     */
    select?: LicenseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the License
     */
    omit?: LicenseOmit<ExtArgs> | null
    /**
     * The data used to create many Licenses.
     */
    data: LicenseCreateManyInput | LicenseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * License update
   */
  export type LicenseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the License
     */
    select?: LicenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the License
     */
    omit?: LicenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseInclude<ExtArgs> | null
    /**
     * The data needed to update a License.
     */
    data: XOR<LicenseUpdateInput, LicenseUncheckedUpdateInput>
    /**
     * Choose, which License to update.
     */
    where: LicenseWhereUniqueInput
  }

  /**
   * License updateMany
   */
  export type LicenseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Licenses.
     */
    data: XOR<LicenseUpdateManyMutationInput, LicenseUncheckedUpdateManyInput>
    /**
     * Filter which Licenses to update
     */
    where?: LicenseWhereInput
    /**
     * Limit how many Licenses to update.
     */
    limit?: number
  }

  /**
   * License updateManyAndReturn
   */
  export type LicenseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the License
     */
    select?: LicenseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the License
     */
    omit?: LicenseOmit<ExtArgs> | null
    /**
     * The data used to update Licenses.
     */
    data: XOR<LicenseUpdateManyMutationInput, LicenseUncheckedUpdateManyInput>
    /**
     * Filter which Licenses to update
     */
    where?: LicenseWhereInput
    /**
     * Limit how many Licenses to update.
     */
    limit?: number
  }

  /**
   * License upsert
   */
  export type LicenseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the License
     */
    select?: LicenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the License
     */
    omit?: LicenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseInclude<ExtArgs> | null
    /**
     * The filter to search for the License to update in case it exists.
     */
    where: LicenseWhereUniqueInput
    /**
     * In case the License found by the `where` argument doesn't exist, create a new License with this data.
     */
    create: XOR<LicenseCreateInput, LicenseUncheckedCreateInput>
    /**
     * In case the License was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LicenseUpdateInput, LicenseUncheckedUpdateInput>
  }

  /**
   * License delete
   */
  export type LicenseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the License
     */
    select?: LicenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the License
     */
    omit?: LicenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseInclude<ExtArgs> | null
    /**
     * Filter which License to delete.
     */
    where: LicenseWhereUniqueInput
  }

  /**
   * License deleteMany
   */
  export type LicenseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Licenses to delete
     */
    where?: LicenseWhereInput
    /**
     * Limit how many Licenses to delete.
     */
    limit?: number
  }

  /**
   * License.products
   */
  export type License$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * License.translations
   */
  export type License$translationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicenseTranslation
     */
    select?: LicenseTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LicenseTranslation
     */
    omit?: LicenseTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseTranslationInclude<ExtArgs> | null
    where?: LicenseTranslationWhereInput
    orderBy?: LicenseTranslationOrderByWithRelationInput | LicenseTranslationOrderByWithRelationInput[]
    cursor?: LicenseTranslationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LicenseTranslationScalarFieldEnum | LicenseTranslationScalarFieldEnum[]
  }

  /**
   * License without action
   */
  export type LicenseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the License
     */
    select?: LicenseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the License
     */
    omit?: LicenseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseInclude<ExtArgs> | null
  }


  /**
   * Model LicenseTranslation
   */

  export type AggregateLicenseTranslation = {
    _count: LicenseTranslationCountAggregateOutputType | null
    _avg: LicenseTranslationAvgAggregateOutputType | null
    _sum: LicenseTranslationSumAggregateOutputType | null
    _min: LicenseTranslationMinAggregateOutputType | null
    _max: LicenseTranslationMaxAggregateOutputType | null
  }

  export type LicenseTranslationAvgAggregateOutputType = {
    id: number | null
    license_id: number | null
  }

  export type LicenseTranslationSumAggregateOutputType = {
    id: number | null
    license_id: number | null
  }

  export type LicenseTranslationMinAggregateOutputType = {
    id: number | null
    license_id: number | null
    language: $Enums.Language | null
    name: string | null
    content: string | null
  }

  export type LicenseTranslationMaxAggregateOutputType = {
    id: number | null
    license_id: number | null
    language: $Enums.Language | null
    name: string | null
    content: string | null
  }

  export type LicenseTranslationCountAggregateOutputType = {
    id: number
    license_id: number
    language: number
    name: number
    content: number
    _all: number
  }


  export type LicenseTranslationAvgAggregateInputType = {
    id?: true
    license_id?: true
  }

  export type LicenseTranslationSumAggregateInputType = {
    id?: true
    license_id?: true
  }

  export type LicenseTranslationMinAggregateInputType = {
    id?: true
    license_id?: true
    language?: true
    name?: true
    content?: true
  }

  export type LicenseTranslationMaxAggregateInputType = {
    id?: true
    license_id?: true
    language?: true
    name?: true
    content?: true
  }

  export type LicenseTranslationCountAggregateInputType = {
    id?: true
    license_id?: true
    language?: true
    name?: true
    content?: true
    _all?: true
  }

  export type LicenseTranslationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LicenseTranslation to aggregate.
     */
    where?: LicenseTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LicenseTranslations to fetch.
     */
    orderBy?: LicenseTranslationOrderByWithRelationInput | LicenseTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LicenseTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LicenseTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LicenseTranslations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LicenseTranslations
    **/
    _count?: true | LicenseTranslationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LicenseTranslationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LicenseTranslationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LicenseTranslationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LicenseTranslationMaxAggregateInputType
  }

  export type GetLicenseTranslationAggregateType<T extends LicenseTranslationAggregateArgs> = {
        [P in keyof T & keyof AggregateLicenseTranslation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLicenseTranslation[P]>
      : GetScalarType<T[P], AggregateLicenseTranslation[P]>
  }




  export type LicenseTranslationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LicenseTranslationWhereInput
    orderBy?: LicenseTranslationOrderByWithAggregationInput | LicenseTranslationOrderByWithAggregationInput[]
    by: LicenseTranslationScalarFieldEnum[] | LicenseTranslationScalarFieldEnum
    having?: LicenseTranslationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LicenseTranslationCountAggregateInputType | true
    _avg?: LicenseTranslationAvgAggregateInputType
    _sum?: LicenseTranslationSumAggregateInputType
    _min?: LicenseTranslationMinAggregateInputType
    _max?: LicenseTranslationMaxAggregateInputType
  }

  export type LicenseTranslationGroupByOutputType = {
    id: number
    license_id: number
    language: $Enums.Language
    name: string
    content: string
    _count: LicenseTranslationCountAggregateOutputType | null
    _avg: LicenseTranslationAvgAggregateOutputType | null
    _sum: LicenseTranslationSumAggregateOutputType | null
    _min: LicenseTranslationMinAggregateOutputType | null
    _max: LicenseTranslationMaxAggregateOutputType | null
  }

  type GetLicenseTranslationGroupByPayload<T extends LicenseTranslationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LicenseTranslationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LicenseTranslationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LicenseTranslationGroupByOutputType[P]>
            : GetScalarType<T[P], LicenseTranslationGroupByOutputType[P]>
        }
      >
    >


  export type LicenseTranslationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    license_id?: boolean
    language?: boolean
    name?: boolean
    content?: boolean
    license?: boolean | LicenseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["licenseTranslation"]>

  export type LicenseTranslationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    license_id?: boolean
    language?: boolean
    name?: boolean
    content?: boolean
    license?: boolean | LicenseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["licenseTranslation"]>

  export type LicenseTranslationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    license_id?: boolean
    language?: boolean
    name?: boolean
    content?: boolean
    license?: boolean | LicenseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["licenseTranslation"]>

  export type LicenseTranslationSelectScalar = {
    id?: boolean
    license_id?: boolean
    language?: boolean
    name?: boolean
    content?: boolean
  }

  export type LicenseTranslationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "license_id" | "language" | "name" | "content", ExtArgs["result"]["licenseTranslation"]>
  export type LicenseTranslationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    license?: boolean | LicenseDefaultArgs<ExtArgs>
  }
  export type LicenseTranslationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    license?: boolean | LicenseDefaultArgs<ExtArgs>
  }
  export type LicenseTranslationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    license?: boolean | LicenseDefaultArgs<ExtArgs>
  }

  export type $LicenseTranslationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LicenseTranslation"
    objects: {
      license: Prisma.$LicensePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      license_id: number
      language: $Enums.Language
      name: string
      content: string
    }, ExtArgs["result"]["licenseTranslation"]>
    composites: {}
  }

  type LicenseTranslationGetPayload<S extends boolean | null | undefined | LicenseTranslationDefaultArgs> = $Result.GetResult<Prisma.$LicenseTranslationPayload, S>

  type LicenseTranslationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LicenseTranslationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LicenseTranslationCountAggregateInputType | true
    }

  export interface LicenseTranslationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LicenseTranslation'], meta: { name: 'LicenseTranslation' } }
    /**
     * Find zero or one LicenseTranslation that matches the filter.
     * @param {LicenseTranslationFindUniqueArgs} args - Arguments to find a LicenseTranslation
     * @example
     * // Get one LicenseTranslation
     * const licenseTranslation = await prisma.licenseTranslation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LicenseTranslationFindUniqueArgs>(args: SelectSubset<T, LicenseTranslationFindUniqueArgs<ExtArgs>>): Prisma__LicenseTranslationClient<$Result.GetResult<Prisma.$LicenseTranslationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LicenseTranslation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LicenseTranslationFindUniqueOrThrowArgs} args - Arguments to find a LicenseTranslation
     * @example
     * // Get one LicenseTranslation
     * const licenseTranslation = await prisma.licenseTranslation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LicenseTranslationFindUniqueOrThrowArgs>(args: SelectSubset<T, LicenseTranslationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LicenseTranslationClient<$Result.GetResult<Prisma.$LicenseTranslationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LicenseTranslation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicenseTranslationFindFirstArgs} args - Arguments to find a LicenseTranslation
     * @example
     * // Get one LicenseTranslation
     * const licenseTranslation = await prisma.licenseTranslation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LicenseTranslationFindFirstArgs>(args?: SelectSubset<T, LicenseTranslationFindFirstArgs<ExtArgs>>): Prisma__LicenseTranslationClient<$Result.GetResult<Prisma.$LicenseTranslationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LicenseTranslation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicenseTranslationFindFirstOrThrowArgs} args - Arguments to find a LicenseTranslation
     * @example
     * // Get one LicenseTranslation
     * const licenseTranslation = await prisma.licenseTranslation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LicenseTranslationFindFirstOrThrowArgs>(args?: SelectSubset<T, LicenseTranslationFindFirstOrThrowArgs<ExtArgs>>): Prisma__LicenseTranslationClient<$Result.GetResult<Prisma.$LicenseTranslationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LicenseTranslations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicenseTranslationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LicenseTranslations
     * const licenseTranslations = await prisma.licenseTranslation.findMany()
     * 
     * // Get first 10 LicenseTranslations
     * const licenseTranslations = await prisma.licenseTranslation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const licenseTranslationWithIdOnly = await prisma.licenseTranslation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LicenseTranslationFindManyArgs>(args?: SelectSubset<T, LicenseTranslationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LicenseTranslationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LicenseTranslation.
     * @param {LicenseTranslationCreateArgs} args - Arguments to create a LicenseTranslation.
     * @example
     * // Create one LicenseTranslation
     * const LicenseTranslation = await prisma.licenseTranslation.create({
     *   data: {
     *     // ... data to create a LicenseTranslation
     *   }
     * })
     * 
     */
    create<T extends LicenseTranslationCreateArgs>(args: SelectSubset<T, LicenseTranslationCreateArgs<ExtArgs>>): Prisma__LicenseTranslationClient<$Result.GetResult<Prisma.$LicenseTranslationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LicenseTranslations.
     * @param {LicenseTranslationCreateManyArgs} args - Arguments to create many LicenseTranslations.
     * @example
     * // Create many LicenseTranslations
     * const licenseTranslation = await prisma.licenseTranslation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LicenseTranslationCreateManyArgs>(args?: SelectSubset<T, LicenseTranslationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LicenseTranslations and returns the data saved in the database.
     * @param {LicenseTranslationCreateManyAndReturnArgs} args - Arguments to create many LicenseTranslations.
     * @example
     * // Create many LicenseTranslations
     * const licenseTranslation = await prisma.licenseTranslation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LicenseTranslations and only return the `id`
     * const licenseTranslationWithIdOnly = await prisma.licenseTranslation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LicenseTranslationCreateManyAndReturnArgs>(args?: SelectSubset<T, LicenseTranslationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LicenseTranslationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a LicenseTranslation.
     * @param {LicenseTranslationDeleteArgs} args - Arguments to delete one LicenseTranslation.
     * @example
     * // Delete one LicenseTranslation
     * const LicenseTranslation = await prisma.licenseTranslation.delete({
     *   where: {
     *     // ... filter to delete one LicenseTranslation
     *   }
     * })
     * 
     */
    delete<T extends LicenseTranslationDeleteArgs>(args: SelectSubset<T, LicenseTranslationDeleteArgs<ExtArgs>>): Prisma__LicenseTranslationClient<$Result.GetResult<Prisma.$LicenseTranslationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LicenseTranslation.
     * @param {LicenseTranslationUpdateArgs} args - Arguments to update one LicenseTranslation.
     * @example
     * // Update one LicenseTranslation
     * const licenseTranslation = await prisma.licenseTranslation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LicenseTranslationUpdateArgs>(args: SelectSubset<T, LicenseTranslationUpdateArgs<ExtArgs>>): Prisma__LicenseTranslationClient<$Result.GetResult<Prisma.$LicenseTranslationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LicenseTranslations.
     * @param {LicenseTranslationDeleteManyArgs} args - Arguments to filter LicenseTranslations to delete.
     * @example
     * // Delete a few LicenseTranslations
     * const { count } = await prisma.licenseTranslation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LicenseTranslationDeleteManyArgs>(args?: SelectSubset<T, LicenseTranslationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LicenseTranslations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicenseTranslationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LicenseTranslations
     * const licenseTranslation = await prisma.licenseTranslation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LicenseTranslationUpdateManyArgs>(args: SelectSubset<T, LicenseTranslationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LicenseTranslations and returns the data updated in the database.
     * @param {LicenseTranslationUpdateManyAndReturnArgs} args - Arguments to update many LicenseTranslations.
     * @example
     * // Update many LicenseTranslations
     * const licenseTranslation = await prisma.licenseTranslation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more LicenseTranslations and only return the `id`
     * const licenseTranslationWithIdOnly = await prisma.licenseTranslation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LicenseTranslationUpdateManyAndReturnArgs>(args: SelectSubset<T, LicenseTranslationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LicenseTranslationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one LicenseTranslation.
     * @param {LicenseTranslationUpsertArgs} args - Arguments to update or create a LicenseTranslation.
     * @example
     * // Update or create a LicenseTranslation
     * const licenseTranslation = await prisma.licenseTranslation.upsert({
     *   create: {
     *     // ... data to create a LicenseTranslation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LicenseTranslation we want to update
     *   }
     * })
     */
    upsert<T extends LicenseTranslationUpsertArgs>(args: SelectSubset<T, LicenseTranslationUpsertArgs<ExtArgs>>): Prisma__LicenseTranslationClient<$Result.GetResult<Prisma.$LicenseTranslationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LicenseTranslations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicenseTranslationCountArgs} args - Arguments to filter LicenseTranslations to count.
     * @example
     * // Count the number of LicenseTranslations
     * const count = await prisma.licenseTranslation.count({
     *   where: {
     *     // ... the filter for the LicenseTranslations we want to count
     *   }
     * })
    **/
    count<T extends LicenseTranslationCountArgs>(
      args?: Subset<T, LicenseTranslationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LicenseTranslationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LicenseTranslation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicenseTranslationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LicenseTranslationAggregateArgs>(args: Subset<T, LicenseTranslationAggregateArgs>): Prisma.PrismaPromise<GetLicenseTranslationAggregateType<T>>

    /**
     * Group by LicenseTranslation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LicenseTranslationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LicenseTranslationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LicenseTranslationGroupByArgs['orderBy'] }
        : { orderBy?: LicenseTranslationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LicenseTranslationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLicenseTranslationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LicenseTranslation model
   */
  readonly fields: LicenseTranslationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LicenseTranslation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LicenseTranslationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    license<T extends LicenseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LicenseDefaultArgs<ExtArgs>>): Prisma__LicenseClient<$Result.GetResult<Prisma.$LicensePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LicenseTranslation model
   */
  interface LicenseTranslationFieldRefs {
    readonly id: FieldRef<"LicenseTranslation", 'Int'>
    readonly license_id: FieldRef<"LicenseTranslation", 'Int'>
    readonly language: FieldRef<"LicenseTranslation", 'Language'>
    readonly name: FieldRef<"LicenseTranslation", 'String'>
    readonly content: FieldRef<"LicenseTranslation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * LicenseTranslation findUnique
   */
  export type LicenseTranslationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicenseTranslation
     */
    select?: LicenseTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LicenseTranslation
     */
    omit?: LicenseTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseTranslationInclude<ExtArgs> | null
    /**
     * Filter, which LicenseTranslation to fetch.
     */
    where: LicenseTranslationWhereUniqueInput
  }

  /**
   * LicenseTranslation findUniqueOrThrow
   */
  export type LicenseTranslationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicenseTranslation
     */
    select?: LicenseTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LicenseTranslation
     */
    omit?: LicenseTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseTranslationInclude<ExtArgs> | null
    /**
     * Filter, which LicenseTranslation to fetch.
     */
    where: LicenseTranslationWhereUniqueInput
  }

  /**
   * LicenseTranslation findFirst
   */
  export type LicenseTranslationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicenseTranslation
     */
    select?: LicenseTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LicenseTranslation
     */
    omit?: LicenseTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseTranslationInclude<ExtArgs> | null
    /**
     * Filter, which LicenseTranslation to fetch.
     */
    where?: LicenseTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LicenseTranslations to fetch.
     */
    orderBy?: LicenseTranslationOrderByWithRelationInput | LicenseTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LicenseTranslations.
     */
    cursor?: LicenseTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LicenseTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LicenseTranslations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LicenseTranslations.
     */
    distinct?: LicenseTranslationScalarFieldEnum | LicenseTranslationScalarFieldEnum[]
  }

  /**
   * LicenseTranslation findFirstOrThrow
   */
  export type LicenseTranslationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicenseTranslation
     */
    select?: LicenseTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LicenseTranslation
     */
    omit?: LicenseTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseTranslationInclude<ExtArgs> | null
    /**
     * Filter, which LicenseTranslation to fetch.
     */
    where?: LicenseTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LicenseTranslations to fetch.
     */
    orderBy?: LicenseTranslationOrderByWithRelationInput | LicenseTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LicenseTranslations.
     */
    cursor?: LicenseTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LicenseTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LicenseTranslations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LicenseTranslations.
     */
    distinct?: LicenseTranslationScalarFieldEnum | LicenseTranslationScalarFieldEnum[]
  }

  /**
   * LicenseTranslation findMany
   */
  export type LicenseTranslationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicenseTranslation
     */
    select?: LicenseTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LicenseTranslation
     */
    omit?: LicenseTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseTranslationInclude<ExtArgs> | null
    /**
     * Filter, which LicenseTranslations to fetch.
     */
    where?: LicenseTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LicenseTranslations to fetch.
     */
    orderBy?: LicenseTranslationOrderByWithRelationInput | LicenseTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LicenseTranslations.
     */
    cursor?: LicenseTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LicenseTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LicenseTranslations.
     */
    skip?: number
    distinct?: LicenseTranslationScalarFieldEnum | LicenseTranslationScalarFieldEnum[]
  }

  /**
   * LicenseTranslation create
   */
  export type LicenseTranslationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicenseTranslation
     */
    select?: LicenseTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LicenseTranslation
     */
    omit?: LicenseTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseTranslationInclude<ExtArgs> | null
    /**
     * The data needed to create a LicenseTranslation.
     */
    data: XOR<LicenseTranslationCreateInput, LicenseTranslationUncheckedCreateInput>
  }

  /**
   * LicenseTranslation createMany
   */
  export type LicenseTranslationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LicenseTranslations.
     */
    data: LicenseTranslationCreateManyInput | LicenseTranslationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LicenseTranslation createManyAndReturn
   */
  export type LicenseTranslationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicenseTranslation
     */
    select?: LicenseTranslationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LicenseTranslation
     */
    omit?: LicenseTranslationOmit<ExtArgs> | null
    /**
     * The data used to create many LicenseTranslations.
     */
    data: LicenseTranslationCreateManyInput | LicenseTranslationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseTranslationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LicenseTranslation update
   */
  export type LicenseTranslationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicenseTranslation
     */
    select?: LicenseTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LicenseTranslation
     */
    omit?: LicenseTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseTranslationInclude<ExtArgs> | null
    /**
     * The data needed to update a LicenseTranslation.
     */
    data: XOR<LicenseTranslationUpdateInput, LicenseTranslationUncheckedUpdateInput>
    /**
     * Choose, which LicenseTranslation to update.
     */
    where: LicenseTranslationWhereUniqueInput
  }

  /**
   * LicenseTranslation updateMany
   */
  export type LicenseTranslationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LicenseTranslations.
     */
    data: XOR<LicenseTranslationUpdateManyMutationInput, LicenseTranslationUncheckedUpdateManyInput>
    /**
     * Filter which LicenseTranslations to update
     */
    where?: LicenseTranslationWhereInput
    /**
     * Limit how many LicenseTranslations to update.
     */
    limit?: number
  }

  /**
   * LicenseTranslation updateManyAndReturn
   */
  export type LicenseTranslationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicenseTranslation
     */
    select?: LicenseTranslationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the LicenseTranslation
     */
    omit?: LicenseTranslationOmit<ExtArgs> | null
    /**
     * The data used to update LicenseTranslations.
     */
    data: XOR<LicenseTranslationUpdateManyMutationInput, LicenseTranslationUncheckedUpdateManyInput>
    /**
     * Filter which LicenseTranslations to update
     */
    where?: LicenseTranslationWhereInput
    /**
     * Limit how many LicenseTranslations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseTranslationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * LicenseTranslation upsert
   */
  export type LicenseTranslationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicenseTranslation
     */
    select?: LicenseTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LicenseTranslation
     */
    omit?: LicenseTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseTranslationInclude<ExtArgs> | null
    /**
     * The filter to search for the LicenseTranslation to update in case it exists.
     */
    where: LicenseTranslationWhereUniqueInput
    /**
     * In case the LicenseTranslation found by the `where` argument doesn't exist, create a new LicenseTranslation with this data.
     */
    create: XOR<LicenseTranslationCreateInput, LicenseTranslationUncheckedCreateInput>
    /**
     * In case the LicenseTranslation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LicenseTranslationUpdateInput, LicenseTranslationUncheckedUpdateInput>
  }

  /**
   * LicenseTranslation delete
   */
  export type LicenseTranslationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicenseTranslation
     */
    select?: LicenseTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LicenseTranslation
     */
    omit?: LicenseTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseTranslationInclude<ExtArgs> | null
    /**
     * Filter which LicenseTranslation to delete.
     */
    where: LicenseTranslationWhereUniqueInput
  }

  /**
   * LicenseTranslation deleteMany
   */
  export type LicenseTranslationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LicenseTranslations to delete
     */
    where?: LicenseTranslationWhereInput
    /**
     * Limit how many LicenseTranslations to delete.
     */
    limit?: number
  }

  /**
   * LicenseTranslation without action
   */
  export type LicenseTranslationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LicenseTranslation
     */
    select?: LicenseTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the LicenseTranslation
     */
    omit?: LicenseTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LicenseTranslationInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
    created_at: number | null
    updated_at: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
    created_at: bigint | null
    updated_at: bigint | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
    created_at: bigint | null
    updated_at: bigint | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
    created_at: bigint | null
    updated_at: bigint | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    created_at?: true
    updated_at?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    created_at?: true
    updated_at?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: number
    name: string
    slug: string
    created_at: bigint
    updated_at: bigint
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    created_at?: boolean
    updated_at?: boolean
    products?: boolean | Category$productsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["category"]>

  export type CategorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type CategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug" | "created_at" | "updated_at", ExtArgs["result"]["category"]>
  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | Category$productsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CategoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      products: Prisma.$ProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      slug: string
      created_at: bigint
      updated_at: bigint
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories and returns the data updated in the database.
     * @param {CategoryUpdateManyAndReturnArgs} args - Arguments to update many Categories.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CategoryUpdateManyAndReturnArgs>(args: SelectSubset<T, CategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    products<T extends Category$productsArgs<ExtArgs> = {}>(args?: Subset<T, Category$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'Int'>
    readonly name: FieldRef<"Category", 'String'>
    readonly slug: FieldRef<"Category", 'String'>
    readonly created_at: FieldRef<"Category", 'BigInt'>
    readonly updated_at: FieldRef<"Category", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
  }

  /**
   * Category updateManyAndReturn
   */
  export type CategoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to delete.
     */
    limit?: number
  }

  /**
   * Category.products
   */
  export type Category$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    category_id: number | null
    owner_id: number | null
    license_id: number | null
    created_at: number | null
    released_at: number | null
    updated_at: number | null
  }

  export type ProductSumAggregateOutputType = {
    category_id: number | null
    owner_id: number | null
    license_id: number | null
    created_at: bigint | null
    released_at: bigint | null
    updated_at: bigint | null
  }

  export type ProductMinAggregateOutputType = {
    id: string | null
    category_id: number | null
    admin_id: string | null
    owner_id: number | null
    license_id: number | null
    name: string | null
    slug: string | null
    price_type: $Enums.PriceType | null
    download_link: string | null
    is_published: boolean | null
    is_pinned: boolean | null
    created_at: bigint | null
    released_at: bigint | null
    updated_at: bigint | null
  }

  export type ProductMaxAggregateOutputType = {
    id: string | null
    category_id: number | null
    admin_id: string | null
    owner_id: number | null
    license_id: number | null
    name: string | null
    slug: string | null
    price_type: $Enums.PriceType | null
    download_link: string | null
    is_published: boolean | null
    is_pinned: boolean | null
    created_at: bigint | null
    released_at: bigint | null
    updated_at: bigint | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    category_id: number
    admin_id: number
    owner_id: number
    license_id: number
    name: number
    slug: number
    price_type: number
    download_link: number
    is_published: number
    is_pinned: number
    created_at: number
    released_at: number
    updated_at: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    category_id?: true
    owner_id?: true
    license_id?: true
    created_at?: true
    released_at?: true
    updated_at?: true
  }

  export type ProductSumAggregateInputType = {
    category_id?: true
    owner_id?: true
    license_id?: true
    created_at?: true
    released_at?: true
    updated_at?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    category_id?: true
    admin_id?: true
    owner_id?: true
    license_id?: true
    name?: true
    slug?: true
    price_type?: true
    download_link?: true
    is_published?: true
    is_pinned?: true
    created_at?: true
    released_at?: true
    updated_at?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    category_id?: true
    admin_id?: true
    owner_id?: true
    license_id?: true
    name?: true
    slug?: true
    price_type?: true
    download_link?: true
    is_published?: true
    is_pinned?: true
    created_at?: true
    released_at?: true
    updated_at?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    category_id?: true
    admin_id?: true
    owner_id?: true
    license_id?: true
    name?: true
    slug?: true
    price_type?: true
    download_link?: true
    is_published?: true
    is_pinned?: true
    created_at?: true
    released_at?: true
    updated_at?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: string
    category_id: number
    admin_id: string
    owner_id: number
    license_id: number
    name: string
    slug: string
    price_type: $Enums.PriceType
    download_link: string | null
    is_published: boolean
    is_pinned: boolean
    created_at: bigint
    released_at: bigint
    updated_at: bigint
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    category_id?: boolean
    admin_id?: boolean
    owner_id?: boolean
    license_id?: boolean
    name?: boolean
    slug?: boolean
    price_type?: boolean
    download_link?: boolean
    is_published?: boolean
    is_pinned?: boolean
    created_at?: boolean
    released_at?: boolean
    updated_at?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    owner?: boolean | OwnerDefaultArgs<ExtArgs>
    license?: boolean | LicenseDefaultArgs<ExtArgs>
    translations?: boolean | Product$translationsArgs<ExtArgs>
    discounts?: boolean | Product$discountsArgs<ExtArgs>
    coupons?: boolean | Product$couponsArgs<ExtArgs>
    images?: boolean | Product$imagesArgs<ExtArgs>
    variants?: boolean | Product$variantsArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    category_id?: boolean
    admin_id?: boolean
    owner_id?: boolean
    license_id?: boolean
    name?: boolean
    slug?: boolean
    price_type?: boolean
    download_link?: boolean
    is_published?: boolean
    is_pinned?: boolean
    created_at?: boolean
    released_at?: boolean
    updated_at?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    owner?: boolean | OwnerDefaultArgs<ExtArgs>
    license?: boolean | LicenseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    category_id?: boolean
    admin_id?: boolean
    owner_id?: boolean
    license_id?: boolean
    name?: boolean
    slug?: boolean
    price_type?: boolean
    download_link?: boolean
    is_published?: boolean
    is_pinned?: boolean
    created_at?: boolean
    released_at?: boolean
    updated_at?: boolean
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    owner?: boolean | OwnerDefaultArgs<ExtArgs>
    license?: boolean | LicenseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectScalar = {
    id?: boolean
    category_id?: boolean
    admin_id?: boolean
    owner_id?: boolean
    license_id?: boolean
    name?: boolean
    slug?: boolean
    price_type?: boolean
    download_link?: boolean
    is_published?: boolean
    is_pinned?: boolean
    created_at?: boolean
    released_at?: boolean
    updated_at?: boolean
  }

  export type ProductOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "category_id" | "admin_id" | "owner_id" | "license_id" | "name" | "slug" | "price_type" | "download_link" | "is_published" | "is_pinned" | "created_at" | "released_at" | "updated_at", ExtArgs["result"]["product"]>
  export type ProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    owner?: boolean | OwnerDefaultArgs<ExtArgs>
    license?: boolean | LicenseDefaultArgs<ExtArgs>
    translations?: boolean | Product$translationsArgs<ExtArgs>
    discounts?: boolean | Product$discountsArgs<ExtArgs>
    coupons?: boolean | Product$couponsArgs<ExtArgs>
    images?: boolean | Product$imagesArgs<ExtArgs>
    variants?: boolean | Product$variantsArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    owner?: boolean | OwnerDefaultArgs<ExtArgs>
    license?: boolean | LicenseDefaultArgs<ExtArgs>
  }
  export type ProductIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    admin?: boolean | AdminDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    owner?: boolean | OwnerDefaultArgs<ExtArgs>
    license?: boolean | LicenseDefaultArgs<ExtArgs>
  }

  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      admin: Prisma.$AdminPayload<ExtArgs>
      category: Prisma.$CategoryPayload<ExtArgs>
      owner: Prisma.$OwnerPayload<ExtArgs>
      license: Prisma.$LicensePayload<ExtArgs>
      translations: Prisma.$ProductTranslationPayload<ExtArgs>[]
      discounts: Prisma.$ProductDiscountPayload<ExtArgs> | null
      coupons: Prisma.$ProductCouponPayload<ExtArgs> | null
      images: Prisma.$ProductImagePayload<ExtArgs>[]
      variants: Prisma.$ProductVariantPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      category_id: number
      admin_id: string
      owner_id: number
      license_id: number
      name: string
      slug: string
      price_type: $Enums.PriceType
      download_link: string | null
      is_published: boolean
      is_pinned: boolean
      created_at: bigint
      released_at: bigint
      updated_at: bigint
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductFindUniqueArgs>(args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductFindFirstArgs>(args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductFindManyArgs>(args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
     */
    create<T extends ProductCreateArgs>(args: SelectSubset<T, ProductCreateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Products.
     * @param {ProductCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductCreateManyArgs>(args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Products and returns the data saved in the database.
     * @param {ProductCreateManyAndReturnArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Products and only return the `id`
     * const productWithIdOnly = await prisma.product.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
     */
    delete<T extends ProductDeleteArgs>(args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductUpdateArgs>(args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductDeleteManyArgs>(args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductUpdateManyArgs>(args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products and returns the data updated in the database.
     * @param {ProductUpdateManyAndReturnArgs} args - Arguments to update many Products.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Products and only return the `id`
     * const productWithIdOnly = await prisma.product.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends ProductUpsertArgs>(args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    admin<T extends AdminDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AdminDefaultArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    owner<T extends OwnerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OwnerDefaultArgs<ExtArgs>>): Prisma__OwnerClient<$Result.GetResult<Prisma.$OwnerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    license<T extends LicenseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LicenseDefaultArgs<ExtArgs>>): Prisma__LicenseClient<$Result.GetResult<Prisma.$LicensePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    translations<T extends Product$translationsArgs<ExtArgs> = {}>(args?: Subset<T, Product$translationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductTranslationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    discounts<T extends Product$discountsArgs<ExtArgs> = {}>(args?: Subset<T, Product$discountsArgs<ExtArgs>>): Prisma__ProductDiscountClient<$Result.GetResult<Prisma.$ProductDiscountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    coupons<T extends Product$couponsArgs<ExtArgs> = {}>(args?: Subset<T, Product$couponsArgs<ExtArgs>>): Prisma__ProductCouponClient<$Result.GetResult<Prisma.$ProductCouponPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    images<T extends Product$imagesArgs<ExtArgs> = {}>(args?: Subset<T, Product$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    variants<T extends Product$variantsArgs<ExtArgs> = {}>(args?: Subset<T, Product$variantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Product model
   */
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", 'String'>
    readonly category_id: FieldRef<"Product", 'Int'>
    readonly admin_id: FieldRef<"Product", 'String'>
    readonly owner_id: FieldRef<"Product", 'Int'>
    readonly license_id: FieldRef<"Product", 'Int'>
    readonly name: FieldRef<"Product", 'String'>
    readonly slug: FieldRef<"Product", 'String'>
    readonly price_type: FieldRef<"Product", 'PriceType'>
    readonly download_link: FieldRef<"Product", 'String'>
    readonly is_published: FieldRef<"Product", 'Boolean'>
    readonly is_pinned: FieldRef<"Product", 'Boolean'>
    readonly created_at: FieldRef<"Product", 'BigInt'>
    readonly released_at: FieldRef<"Product", 'BigInt'>
    readonly updated_at: FieldRef<"Product", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product createManyAndReturn
   */
  export type ProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
  }

  /**
   * Product updateManyAndReturn
   */
  export type ProductUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }

  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to delete.
     */
    limit?: number
  }

  /**
   * Product.translations
   */
  export type Product$translationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTranslation
     */
    select?: ProductTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTranslation
     */
    omit?: ProductTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductTranslationInclude<ExtArgs> | null
    where?: ProductTranslationWhereInput
    orderBy?: ProductTranslationOrderByWithRelationInput | ProductTranslationOrderByWithRelationInput[]
    cursor?: ProductTranslationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductTranslationScalarFieldEnum | ProductTranslationScalarFieldEnum[]
  }

  /**
   * Product.discounts
   */
  export type Product$discountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductDiscount
     */
    select?: ProductDiscountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductDiscount
     */
    omit?: ProductDiscountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductDiscountInclude<ExtArgs> | null
    where?: ProductDiscountWhereInput
  }

  /**
   * Product.coupons
   */
  export type Product$couponsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCoupon
     */
    select?: ProductCouponSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCoupon
     */
    omit?: ProductCouponOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCouponInclude<ExtArgs> | null
    where?: ProductCouponWhereInput
  }

  /**
   * Product.images
   */
  export type Product$imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImage
     */
    select?: ProductImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImage
     */
    omit?: ProductImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImageInclude<ExtArgs> | null
    where?: ProductImageWhereInput
    orderBy?: ProductImageOrderByWithRelationInput | ProductImageOrderByWithRelationInput[]
    cursor?: ProductImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductImageScalarFieldEnum | ProductImageScalarFieldEnum[]
  }

  /**
   * Product.variants
   */
  export type Product$variantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    where?: ProductVariantWhereInput
    orderBy?: ProductVariantOrderByWithRelationInput | ProductVariantOrderByWithRelationInput[]
    cursor?: ProductVariantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductVariantScalarFieldEnum | ProductVariantScalarFieldEnum[]
  }

  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
  }


  /**
   * Model ProductTranslation
   */

  export type AggregateProductTranslation = {
    _count: ProductTranslationCountAggregateOutputType | null
    _min: ProductTranslationMinAggregateOutputType | null
    _max: ProductTranslationMaxAggregateOutputType | null
  }

  export type ProductTranslationMinAggregateOutputType = {
    id: string | null
    product_id: string | null
    language: $Enums.Language | null
    description: string | null
    changelog: string | null
  }

  export type ProductTranslationMaxAggregateOutputType = {
    id: string | null
    product_id: string | null
    language: $Enums.Language | null
    description: string | null
    changelog: string | null
  }

  export type ProductTranslationCountAggregateOutputType = {
    id: number
    product_id: number
    language: number
    description: number
    changelog: number
    _all: number
  }


  export type ProductTranslationMinAggregateInputType = {
    id?: true
    product_id?: true
    language?: true
    description?: true
    changelog?: true
  }

  export type ProductTranslationMaxAggregateInputType = {
    id?: true
    product_id?: true
    language?: true
    description?: true
    changelog?: true
  }

  export type ProductTranslationCountAggregateInputType = {
    id?: true
    product_id?: true
    language?: true
    description?: true
    changelog?: true
    _all?: true
  }

  export type ProductTranslationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductTranslation to aggregate.
     */
    where?: ProductTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductTranslations to fetch.
     */
    orderBy?: ProductTranslationOrderByWithRelationInput | ProductTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductTranslations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductTranslations
    **/
    _count?: true | ProductTranslationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductTranslationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductTranslationMaxAggregateInputType
  }

  export type GetProductTranslationAggregateType<T extends ProductTranslationAggregateArgs> = {
        [P in keyof T & keyof AggregateProductTranslation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductTranslation[P]>
      : GetScalarType<T[P], AggregateProductTranslation[P]>
  }




  export type ProductTranslationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductTranslationWhereInput
    orderBy?: ProductTranslationOrderByWithAggregationInput | ProductTranslationOrderByWithAggregationInput[]
    by: ProductTranslationScalarFieldEnum[] | ProductTranslationScalarFieldEnum
    having?: ProductTranslationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductTranslationCountAggregateInputType | true
    _min?: ProductTranslationMinAggregateInputType
    _max?: ProductTranslationMaxAggregateInputType
  }

  export type ProductTranslationGroupByOutputType = {
    id: string
    product_id: string
    language: $Enums.Language
    description: string
    changelog: string | null
    _count: ProductTranslationCountAggregateOutputType | null
    _min: ProductTranslationMinAggregateOutputType | null
    _max: ProductTranslationMaxAggregateOutputType | null
  }

  type GetProductTranslationGroupByPayload<T extends ProductTranslationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductTranslationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductTranslationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductTranslationGroupByOutputType[P]>
            : GetScalarType<T[P], ProductTranslationGroupByOutputType[P]>
        }
      >
    >


  export type ProductTranslationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    language?: boolean
    description?: boolean
    changelog?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productTranslation"]>

  export type ProductTranslationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    language?: boolean
    description?: boolean
    changelog?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productTranslation"]>

  export type ProductTranslationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    language?: boolean
    description?: boolean
    changelog?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productTranslation"]>

  export type ProductTranslationSelectScalar = {
    id?: boolean
    product_id?: boolean
    language?: boolean
    description?: boolean
    changelog?: boolean
  }

  export type ProductTranslationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "product_id" | "language" | "description" | "changelog", ExtArgs["result"]["productTranslation"]>
  export type ProductTranslationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type ProductTranslationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type ProductTranslationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $ProductTranslationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductTranslation"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      product_id: string
      language: $Enums.Language
      description: string
      changelog: string | null
    }, ExtArgs["result"]["productTranslation"]>
    composites: {}
  }

  type ProductTranslationGetPayload<S extends boolean | null | undefined | ProductTranslationDefaultArgs> = $Result.GetResult<Prisma.$ProductTranslationPayload, S>

  type ProductTranslationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductTranslationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductTranslationCountAggregateInputType | true
    }

  export interface ProductTranslationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductTranslation'], meta: { name: 'ProductTranslation' } }
    /**
     * Find zero or one ProductTranslation that matches the filter.
     * @param {ProductTranslationFindUniqueArgs} args - Arguments to find a ProductTranslation
     * @example
     * // Get one ProductTranslation
     * const productTranslation = await prisma.productTranslation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductTranslationFindUniqueArgs>(args: SelectSubset<T, ProductTranslationFindUniqueArgs<ExtArgs>>): Prisma__ProductTranslationClient<$Result.GetResult<Prisma.$ProductTranslationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProductTranslation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductTranslationFindUniqueOrThrowArgs} args - Arguments to find a ProductTranslation
     * @example
     * // Get one ProductTranslation
     * const productTranslation = await prisma.productTranslation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductTranslationFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductTranslationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductTranslationClient<$Result.GetResult<Prisma.$ProductTranslationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductTranslation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTranslationFindFirstArgs} args - Arguments to find a ProductTranslation
     * @example
     * // Get one ProductTranslation
     * const productTranslation = await prisma.productTranslation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductTranslationFindFirstArgs>(args?: SelectSubset<T, ProductTranslationFindFirstArgs<ExtArgs>>): Prisma__ProductTranslationClient<$Result.GetResult<Prisma.$ProductTranslationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductTranslation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTranslationFindFirstOrThrowArgs} args - Arguments to find a ProductTranslation
     * @example
     * // Get one ProductTranslation
     * const productTranslation = await prisma.productTranslation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductTranslationFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductTranslationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductTranslationClient<$Result.GetResult<Prisma.$ProductTranslationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductTranslations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTranslationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductTranslations
     * const productTranslations = await prisma.productTranslation.findMany()
     * 
     * // Get first 10 ProductTranslations
     * const productTranslations = await prisma.productTranslation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productTranslationWithIdOnly = await prisma.productTranslation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductTranslationFindManyArgs>(args?: SelectSubset<T, ProductTranslationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductTranslationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProductTranslation.
     * @param {ProductTranslationCreateArgs} args - Arguments to create a ProductTranslation.
     * @example
     * // Create one ProductTranslation
     * const ProductTranslation = await prisma.productTranslation.create({
     *   data: {
     *     // ... data to create a ProductTranslation
     *   }
     * })
     * 
     */
    create<T extends ProductTranslationCreateArgs>(args: SelectSubset<T, ProductTranslationCreateArgs<ExtArgs>>): Prisma__ProductTranslationClient<$Result.GetResult<Prisma.$ProductTranslationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProductTranslations.
     * @param {ProductTranslationCreateManyArgs} args - Arguments to create many ProductTranslations.
     * @example
     * // Create many ProductTranslations
     * const productTranslation = await prisma.productTranslation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductTranslationCreateManyArgs>(args?: SelectSubset<T, ProductTranslationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProductTranslations and returns the data saved in the database.
     * @param {ProductTranslationCreateManyAndReturnArgs} args - Arguments to create many ProductTranslations.
     * @example
     * // Create many ProductTranslations
     * const productTranslation = await prisma.productTranslation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProductTranslations and only return the `id`
     * const productTranslationWithIdOnly = await prisma.productTranslation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductTranslationCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductTranslationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductTranslationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProductTranslation.
     * @param {ProductTranslationDeleteArgs} args - Arguments to delete one ProductTranslation.
     * @example
     * // Delete one ProductTranslation
     * const ProductTranslation = await prisma.productTranslation.delete({
     *   where: {
     *     // ... filter to delete one ProductTranslation
     *   }
     * })
     * 
     */
    delete<T extends ProductTranslationDeleteArgs>(args: SelectSubset<T, ProductTranslationDeleteArgs<ExtArgs>>): Prisma__ProductTranslationClient<$Result.GetResult<Prisma.$ProductTranslationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProductTranslation.
     * @param {ProductTranslationUpdateArgs} args - Arguments to update one ProductTranslation.
     * @example
     * // Update one ProductTranslation
     * const productTranslation = await prisma.productTranslation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductTranslationUpdateArgs>(args: SelectSubset<T, ProductTranslationUpdateArgs<ExtArgs>>): Prisma__ProductTranslationClient<$Result.GetResult<Prisma.$ProductTranslationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProductTranslations.
     * @param {ProductTranslationDeleteManyArgs} args - Arguments to filter ProductTranslations to delete.
     * @example
     * // Delete a few ProductTranslations
     * const { count } = await prisma.productTranslation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductTranslationDeleteManyArgs>(args?: SelectSubset<T, ProductTranslationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductTranslations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTranslationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductTranslations
     * const productTranslation = await prisma.productTranslation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductTranslationUpdateManyArgs>(args: SelectSubset<T, ProductTranslationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductTranslations and returns the data updated in the database.
     * @param {ProductTranslationUpdateManyAndReturnArgs} args - Arguments to update many ProductTranslations.
     * @example
     * // Update many ProductTranslations
     * const productTranslation = await prisma.productTranslation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProductTranslations and only return the `id`
     * const productTranslationWithIdOnly = await prisma.productTranslation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductTranslationUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductTranslationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductTranslationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProductTranslation.
     * @param {ProductTranslationUpsertArgs} args - Arguments to update or create a ProductTranslation.
     * @example
     * // Update or create a ProductTranslation
     * const productTranslation = await prisma.productTranslation.upsert({
     *   create: {
     *     // ... data to create a ProductTranslation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductTranslation we want to update
     *   }
     * })
     */
    upsert<T extends ProductTranslationUpsertArgs>(args: SelectSubset<T, ProductTranslationUpsertArgs<ExtArgs>>): Prisma__ProductTranslationClient<$Result.GetResult<Prisma.$ProductTranslationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProductTranslations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTranslationCountArgs} args - Arguments to filter ProductTranslations to count.
     * @example
     * // Count the number of ProductTranslations
     * const count = await prisma.productTranslation.count({
     *   where: {
     *     // ... the filter for the ProductTranslations we want to count
     *   }
     * })
    **/
    count<T extends ProductTranslationCountArgs>(
      args?: Subset<T, ProductTranslationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductTranslationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductTranslation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTranslationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductTranslationAggregateArgs>(args: Subset<T, ProductTranslationAggregateArgs>): Prisma.PrismaPromise<GetProductTranslationAggregateType<T>>

    /**
     * Group by ProductTranslation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductTranslationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductTranslationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductTranslationGroupByArgs['orderBy'] }
        : { orderBy?: ProductTranslationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductTranslationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductTranslationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductTranslation model
   */
  readonly fields: ProductTranslationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductTranslation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductTranslationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductTranslation model
   */
  interface ProductTranslationFieldRefs {
    readonly id: FieldRef<"ProductTranslation", 'String'>
    readonly product_id: FieldRef<"ProductTranslation", 'String'>
    readonly language: FieldRef<"ProductTranslation", 'Language'>
    readonly description: FieldRef<"ProductTranslation", 'String'>
    readonly changelog: FieldRef<"ProductTranslation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProductTranslation findUnique
   */
  export type ProductTranslationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTranslation
     */
    select?: ProductTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTranslation
     */
    omit?: ProductTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductTranslationInclude<ExtArgs> | null
    /**
     * Filter, which ProductTranslation to fetch.
     */
    where: ProductTranslationWhereUniqueInput
  }

  /**
   * ProductTranslation findUniqueOrThrow
   */
  export type ProductTranslationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTranslation
     */
    select?: ProductTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTranslation
     */
    omit?: ProductTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductTranslationInclude<ExtArgs> | null
    /**
     * Filter, which ProductTranslation to fetch.
     */
    where: ProductTranslationWhereUniqueInput
  }

  /**
   * ProductTranslation findFirst
   */
  export type ProductTranslationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTranslation
     */
    select?: ProductTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTranslation
     */
    omit?: ProductTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductTranslationInclude<ExtArgs> | null
    /**
     * Filter, which ProductTranslation to fetch.
     */
    where?: ProductTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductTranslations to fetch.
     */
    orderBy?: ProductTranslationOrderByWithRelationInput | ProductTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductTranslations.
     */
    cursor?: ProductTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductTranslations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductTranslations.
     */
    distinct?: ProductTranslationScalarFieldEnum | ProductTranslationScalarFieldEnum[]
  }

  /**
   * ProductTranslation findFirstOrThrow
   */
  export type ProductTranslationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTranslation
     */
    select?: ProductTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTranslation
     */
    omit?: ProductTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductTranslationInclude<ExtArgs> | null
    /**
     * Filter, which ProductTranslation to fetch.
     */
    where?: ProductTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductTranslations to fetch.
     */
    orderBy?: ProductTranslationOrderByWithRelationInput | ProductTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductTranslations.
     */
    cursor?: ProductTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductTranslations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductTranslations.
     */
    distinct?: ProductTranslationScalarFieldEnum | ProductTranslationScalarFieldEnum[]
  }

  /**
   * ProductTranslation findMany
   */
  export type ProductTranslationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTranslation
     */
    select?: ProductTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTranslation
     */
    omit?: ProductTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductTranslationInclude<ExtArgs> | null
    /**
     * Filter, which ProductTranslations to fetch.
     */
    where?: ProductTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductTranslations to fetch.
     */
    orderBy?: ProductTranslationOrderByWithRelationInput | ProductTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductTranslations.
     */
    cursor?: ProductTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductTranslations.
     */
    skip?: number
    distinct?: ProductTranslationScalarFieldEnum | ProductTranslationScalarFieldEnum[]
  }

  /**
   * ProductTranslation create
   */
  export type ProductTranslationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTranslation
     */
    select?: ProductTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTranslation
     */
    omit?: ProductTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductTranslationInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductTranslation.
     */
    data: XOR<ProductTranslationCreateInput, ProductTranslationUncheckedCreateInput>
  }

  /**
   * ProductTranslation createMany
   */
  export type ProductTranslationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductTranslations.
     */
    data: ProductTranslationCreateManyInput | ProductTranslationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProductTranslation createManyAndReturn
   */
  export type ProductTranslationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTranslation
     */
    select?: ProductTranslationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTranslation
     */
    omit?: ProductTranslationOmit<ExtArgs> | null
    /**
     * The data used to create many ProductTranslations.
     */
    data: ProductTranslationCreateManyInput | ProductTranslationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductTranslationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductTranslation update
   */
  export type ProductTranslationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTranslation
     */
    select?: ProductTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTranslation
     */
    omit?: ProductTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductTranslationInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductTranslation.
     */
    data: XOR<ProductTranslationUpdateInput, ProductTranslationUncheckedUpdateInput>
    /**
     * Choose, which ProductTranslation to update.
     */
    where: ProductTranslationWhereUniqueInput
  }

  /**
   * ProductTranslation updateMany
   */
  export type ProductTranslationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductTranslations.
     */
    data: XOR<ProductTranslationUpdateManyMutationInput, ProductTranslationUncheckedUpdateManyInput>
    /**
     * Filter which ProductTranslations to update
     */
    where?: ProductTranslationWhereInput
    /**
     * Limit how many ProductTranslations to update.
     */
    limit?: number
  }

  /**
   * ProductTranslation updateManyAndReturn
   */
  export type ProductTranslationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTranslation
     */
    select?: ProductTranslationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTranslation
     */
    omit?: ProductTranslationOmit<ExtArgs> | null
    /**
     * The data used to update ProductTranslations.
     */
    data: XOR<ProductTranslationUpdateManyMutationInput, ProductTranslationUncheckedUpdateManyInput>
    /**
     * Filter which ProductTranslations to update
     */
    where?: ProductTranslationWhereInput
    /**
     * Limit how many ProductTranslations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductTranslationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductTranslation upsert
   */
  export type ProductTranslationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTranslation
     */
    select?: ProductTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTranslation
     */
    omit?: ProductTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductTranslationInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductTranslation to update in case it exists.
     */
    where: ProductTranslationWhereUniqueInput
    /**
     * In case the ProductTranslation found by the `where` argument doesn't exist, create a new ProductTranslation with this data.
     */
    create: XOR<ProductTranslationCreateInput, ProductTranslationUncheckedCreateInput>
    /**
     * In case the ProductTranslation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductTranslationUpdateInput, ProductTranslationUncheckedUpdateInput>
  }

  /**
   * ProductTranslation delete
   */
  export type ProductTranslationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTranslation
     */
    select?: ProductTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTranslation
     */
    omit?: ProductTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductTranslationInclude<ExtArgs> | null
    /**
     * Filter which ProductTranslation to delete.
     */
    where: ProductTranslationWhereUniqueInput
  }

  /**
   * ProductTranslation deleteMany
   */
  export type ProductTranslationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductTranslations to delete
     */
    where?: ProductTranslationWhereInput
    /**
     * Limit how many ProductTranslations to delete.
     */
    limit?: number
  }

  /**
   * ProductTranslation without action
   */
  export type ProductTranslationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductTranslation
     */
    select?: ProductTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductTranslation
     */
    omit?: ProductTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductTranslationInclude<ExtArgs> | null
  }


  /**
   * Model ProductDiscount
   */

  export type AggregateProductDiscount = {
    _count: ProductDiscountCountAggregateOutputType | null
    _avg: ProductDiscountAvgAggregateOutputType | null
    _sum: ProductDiscountSumAggregateOutputType | null
    _min: ProductDiscountMinAggregateOutputType | null
    _max: ProductDiscountMaxAggregateOutputType | null
  }

  export type ProductDiscountAvgAggregateOutputType = {
    id: number | null
    discount: number | null
    expired_at: number | null
  }

  export type ProductDiscountSumAggregateOutputType = {
    id: number | null
    discount: number | null
    expired_at: bigint | null
  }

  export type ProductDiscountMinAggregateOutputType = {
    id: number | null
    product_id: string | null
    discount: number | null
    expired_at: bigint | null
  }

  export type ProductDiscountMaxAggregateOutputType = {
    id: number | null
    product_id: string | null
    discount: number | null
    expired_at: bigint | null
  }

  export type ProductDiscountCountAggregateOutputType = {
    id: number
    product_id: number
    discount: number
    expired_at: number
    _all: number
  }


  export type ProductDiscountAvgAggregateInputType = {
    id?: true
    discount?: true
    expired_at?: true
  }

  export type ProductDiscountSumAggregateInputType = {
    id?: true
    discount?: true
    expired_at?: true
  }

  export type ProductDiscountMinAggregateInputType = {
    id?: true
    product_id?: true
    discount?: true
    expired_at?: true
  }

  export type ProductDiscountMaxAggregateInputType = {
    id?: true
    product_id?: true
    discount?: true
    expired_at?: true
  }

  export type ProductDiscountCountAggregateInputType = {
    id?: true
    product_id?: true
    discount?: true
    expired_at?: true
    _all?: true
  }

  export type ProductDiscountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductDiscount to aggregate.
     */
    where?: ProductDiscountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductDiscounts to fetch.
     */
    orderBy?: ProductDiscountOrderByWithRelationInput | ProductDiscountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductDiscountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductDiscounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductDiscounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductDiscounts
    **/
    _count?: true | ProductDiscountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductDiscountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductDiscountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductDiscountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductDiscountMaxAggregateInputType
  }

  export type GetProductDiscountAggregateType<T extends ProductDiscountAggregateArgs> = {
        [P in keyof T & keyof AggregateProductDiscount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductDiscount[P]>
      : GetScalarType<T[P], AggregateProductDiscount[P]>
  }




  export type ProductDiscountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductDiscountWhereInput
    orderBy?: ProductDiscountOrderByWithAggregationInput | ProductDiscountOrderByWithAggregationInput[]
    by: ProductDiscountScalarFieldEnum[] | ProductDiscountScalarFieldEnum
    having?: ProductDiscountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductDiscountCountAggregateInputType | true
    _avg?: ProductDiscountAvgAggregateInputType
    _sum?: ProductDiscountSumAggregateInputType
    _min?: ProductDiscountMinAggregateInputType
    _max?: ProductDiscountMaxAggregateInputType
  }

  export type ProductDiscountGroupByOutputType = {
    id: number
    product_id: string
    discount: number
    expired_at: bigint
    _count: ProductDiscountCountAggregateOutputType | null
    _avg: ProductDiscountAvgAggregateOutputType | null
    _sum: ProductDiscountSumAggregateOutputType | null
    _min: ProductDiscountMinAggregateOutputType | null
    _max: ProductDiscountMaxAggregateOutputType | null
  }

  type GetProductDiscountGroupByPayload<T extends ProductDiscountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductDiscountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductDiscountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductDiscountGroupByOutputType[P]>
            : GetScalarType<T[P], ProductDiscountGroupByOutputType[P]>
        }
      >
    >


  export type ProductDiscountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    discount?: boolean
    expired_at?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productDiscount"]>

  export type ProductDiscountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    discount?: boolean
    expired_at?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productDiscount"]>

  export type ProductDiscountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    discount?: boolean
    expired_at?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productDiscount"]>

  export type ProductDiscountSelectScalar = {
    id?: boolean
    product_id?: boolean
    discount?: boolean
    expired_at?: boolean
  }

  export type ProductDiscountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "product_id" | "discount" | "expired_at", ExtArgs["result"]["productDiscount"]>
  export type ProductDiscountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type ProductDiscountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type ProductDiscountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $ProductDiscountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductDiscount"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      product_id: string
      discount: number
      expired_at: bigint
    }, ExtArgs["result"]["productDiscount"]>
    composites: {}
  }

  type ProductDiscountGetPayload<S extends boolean | null | undefined | ProductDiscountDefaultArgs> = $Result.GetResult<Prisma.$ProductDiscountPayload, S>

  type ProductDiscountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductDiscountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductDiscountCountAggregateInputType | true
    }

  export interface ProductDiscountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductDiscount'], meta: { name: 'ProductDiscount' } }
    /**
     * Find zero or one ProductDiscount that matches the filter.
     * @param {ProductDiscountFindUniqueArgs} args - Arguments to find a ProductDiscount
     * @example
     * // Get one ProductDiscount
     * const productDiscount = await prisma.productDiscount.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductDiscountFindUniqueArgs>(args: SelectSubset<T, ProductDiscountFindUniqueArgs<ExtArgs>>): Prisma__ProductDiscountClient<$Result.GetResult<Prisma.$ProductDiscountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProductDiscount that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductDiscountFindUniqueOrThrowArgs} args - Arguments to find a ProductDiscount
     * @example
     * // Get one ProductDiscount
     * const productDiscount = await prisma.productDiscount.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductDiscountFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductDiscountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductDiscountClient<$Result.GetResult<Prisma.$ProductDiscountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductDiscount that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductDiscountFindFirstArgs} args - Arguments to find a ProductDiscount
     * @example
     * // Get one ProductDiscount
     * const productDiscount = await prisma.productDiscount.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductDiscountFindFirstArgs>(args?: SelectSubset<T, ProductDiscountFindFirstArgs<ExtArgs>>): Prisma__ProductDiscountClient<$Result.GetResult<Prisma.$ProductDiscountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductDiscount that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductDiscountFindFirstOrThrowArgs} args - Arguments to find a ProductDiscount
     * @example
     * // Get one ProductDiscount
     * const productDiscount = await prisma.productDiscount.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductDiscountFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductDiscountFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductDiscountClient<$Result.GetResult<Prisma.$ProductDiscountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductDiscounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductDiscountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductDiscounts
     * const productDiscounts = await prisma.productDiscount.findMany()
     * 
     * // Get first 10 ProductDiscounts
     * const productDiscounts = await prisma.productDiscount.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productDiscountWithIdOnly = await prisma.productDiscount.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductDiscountFindManyArgs>(args?: SelectSubset<T, ProductDiscountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductDiscountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProductDiscount.
     * @param {ProductDiscountCreateArgs} args - Arguments to create a ProductDiscount.
     * @example
     * // Create one ProductDiscount
     * const ProductDiscount = await prisma.productDiscount.create({
     *   data: {
     *     // ... data to create a ProductDiscount
     *   }
     * })
     * 
     */
    create<T extends ProductDiscountCreateArgs>(args: SelectSubset<T, ProductDiscountCreateArgs<ExtArgs>>): Prisma__ProductDiscountClient<$Result.GetResult<Prisma.$ProductDiscountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProductDiscounts.
     * @param {ProductDiscountCreateManyArgs} args - Arguments to create many ProductDiscounts.
     * @example
     * // Create many ProductDiscounts
     * const productDiscount = await prisma.productDiscount.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductDiscountCreateManyArgs>(args?: SelectSubset<T, ProductDiscountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProductDiscounts and returns the data saved in the database.
     * @param {ProductDiscountCreateManyAndReturnArgs} args - Arguments to create many ProductDiscounts.
     * @example
     * // Create many ProductDiscounts
     * const productDiscount = await prisma.productDiscount.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProductDiscounts and only return the `id`
     * const productDiscountWithIdOnly = await prisma.productDiscount.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductDiscountCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductDiscountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductDiscountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProductDiscount.
     * @param {ProductDiscountDeleteArgs} args - Arguments to delete one ProductDiscount.
     * @example
     * // Delete one ProductDiscount
     * const ProductDiscount = await prisma.productDiscount.delete({
     *   where: {
     *     // ... filter to delete one ProductDiscount
     *   }
     * })
     * 
     */
    delete<T extends ProductDiscountDeleteArgs>(args: SelectSubset<T, ProductDiscountDeleteArgs<ExtArgs>>): Prisma__ProductDiscountClient<$Result.GetResult<Prisma.$ProductDiscountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProductDiscount.
     * @param {ProductDiscountUpdateArgs} args - Arguments to update one ProductDiscount.
     * @example
     * // Update one ProductDiscount
     * const productDiscount = await prisma.productDiscount.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductDiscountUpdateArgs>(args: SelectSubset<T, ProductDiscountUpdateArgs<ExtArgs>>): Prisma__ProductDiscountClient<$Result.GetResult<Prisma.$ProductDiscountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProductDiscounts.
     * @param {ProductDiscountDeleteManyArgs} args - Arguments to filter ProductDiscounts to delete.
     * @example
     * // Delete a few ProductDiscounts
     * const { count } = await prisma.productDiscount.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductDiscountDeleteManyArgs>(args?: SelectSubset<T, ProductDiscountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductDiscounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductDiscountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductDiscounts
     * const productDiscount = await prisma.productDiscount.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductDiscountUpdateManyArgs>(args: SelectSubset<T, ProductDiscountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductDiscounts and returns the data updated in the database.
     * @param {ProductDiscountUpdateManyAndReturnArgs} args - Arguments to update many ProductDiscounts.
     * @example
     * // Update many ProductDiscounts
     * const productDiscount = await prisma.productDiscount.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProductDiscounts and only return the `id`
     * const productDiscountWithIdOnly = await prisma.productDiscount.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductDiscountUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductDiscountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductDiscountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProductDiscount.
     * @param {ProductDiscountUpsertArgs} args - Arguments to update or create a ProductDiscount.
     * @example
     * // Update or create a ProductDiscount
     * const productDiscount = await prisma.productDiscount.upsert({
     *   create: {
     *     // ... data to create a ProductDiscount
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductDiscount we want to update
     *   }
     * })
     */
    upsert<T extends ProductDiscountUpsertArgs>(args: SelectSubset<T, ProductDiscountUpsertArgs<ExtArgs>>): Prisma__ProductDiscountClient<$Result.GetResult<Prisma.$ProductDiscountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProductDiscounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductDiscountCountArgs} args - Arguments to filter ProductDiscounts to count.
     * @example
     * // Count the number of ProductDiscounts
     * const count = await prisma.productDiscount.count({
     *   where: {
     *     // ... the filter for the ProductDiscounts we want to count
     *   }
     * })
    **/
    count<T extends ProductDiscountCountArgs>(
      args?: Subset<T, ProductDiscountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductDiscountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductDiscount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductDiscountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductDiscountAggregateArgs>(args: Subset<T, ProductDiscountAggregateArgs>): Prisma.PrismaPromise<GetProductDiscountAggregateType<T>>

    /**
     * Group by ProductDiscount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductDiscountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductDiscountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductDiscountGroupByArgs['orderBy'] }
        : { orderBy?: ProductDiscountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductDiscountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductDiscountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductDiscount model
   */
  readonly fields: ProductDiscountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductDiscount.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductDiscountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductDiscount model
   */
  interface ProductDiscountFieldRefs {
    readonly id: FieldRef<"ProductDiscount", 'Int'>
    readonly product_id: FieldRef<"ProductDiscount", 'String'>
    readonly discount: FieldRef<"ProductDiscount", 'Int'>
    readonly expired_at: FieldRef<"ProductDiscount", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * ProductDiscount findUnique
   */
  export type ProductDiscountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductDiscount
     */
    select?: ProductDiscountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductDiscount
     */
    omit?: ProductDiscountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductDiscountInclude<ExtArgs> | null
    /**
     * Filter, which ProductDiscount to fetch.
     */
    where: ProductDiscountWhereUniqueInput
  }

  /**
   * ProductDiscount findUniqueOrThrow
   */
  export type ProductDiscountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductDiscount
     */
    select?: ProductDiscountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductDiscount
     */
    omit?: ProductDiscountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductDiscountInclude<ExtArgs> | null
    /**
     * Filter, which ProductDiscount to fetch.
     */
    where: ProductDiscountWhereUniqueInput
  }

  /**
   * ProductDiscount findFirst
   */
  export type ProductDiscountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductDiscount
     */
    select?: ProductDiscountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductDiscount
     */
    omit?: ProductDiscountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductDiscountInclude<ExtArgs> | null
    /**
     * Filter, which ProductDiscount to fetch.
     */
    where?: ProductDiscountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductDiscounts to fetch.
     */
    orderBy?: ProductDiscountOrderByWithRelationInput | ProductDiscountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductDiscounts.
     */
    cursor?: ProductDiscountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductDiscounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductDiscounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductDiscounts.
     */
    distinct?: ProductDiscountScalarFieldEnum | ProductDiscountScalarFieldEnum[]
  }

  /**
   * ProductDiscount findFirstOrThrow
   */
  export type ProductDiscountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductDiscount
     */
    select?: ProductDiscountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductDiscount
     */
    omit?: ProductDiscountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductDiscountInclude<ExtArgs> | null
    /**
     * Filter, which ProductDiscount to fetch.
     */
    where?: ProductDiscountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductDiscounts to fetch.
     */
    orderBy?: ProductDiscountOrderByWithRelationInput | ProductDiscountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductDiscounts.
     */
    cursor?: ProductDiscountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductDiscounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductDiscounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductDiscounts.
     */
    distinct?: ProductDiscountScalarFieldEnum | ProductDiscountScalarFieldEnum[]
  }

  /**
   * ProductDiscount findMany
   */
  export type ProductDiscountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductDiscount
     */
    select?: ProductDiscountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductDiscount
     */
    omit?: ProductDiscountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductDiscountInclude<ExtArgs> | null
    /**
     * Filter, which ProductDiscounts to fetch.
     */
    where?: ProductDiscountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductDiscounts to fetch.
     */
    orderBy?: ProductDiscountOrderByWithRelationInput | ProductDiscountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductDiscounts.
     */
    cursor?: ProductDiscountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductDiscounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductDiscounts.
     */
    skip?: number
    distinct?: ProductDiscountScalarFieldEnum | ProductDiscountScalarFieldEnum[]
  }

  /**
   * ProductDiscount create
   */
  export type ProductDiscountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductDiscount
     */
    select?: ProductDiscountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductDiscount
     */
    omit?: ProductDiscountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductDiscountInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductDiscount.
     */
    data: XOR<ProductDiscountCreateInput, ProductDiscountUncheckedCreateInput>
  }

  /**
   * ProductDiscount createMany
   */
  export type ProductDiscountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductDiscounts.
     */
    data: ProductDiscountCreateManyInput | ProductDiscountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProductDiscount createManyAndReturn
   */
  export type ProductDiscountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductDiscount
     */
    select?: ProductDiscountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductDiscount
     */
    omit?: ProductDiscountOmit<ExtArgs> | null
    /**
     * The data used to create many ProductDiscounts.
     */
    data: ProductDiscountCreateManyInput | ProductDiscountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductDiscountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductDiscount update
   */
  export type ProductDiscountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductDiscount
     */
    select?: ProductDiscountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductDiscount
     */
    omit?: ProductDiscountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductDiscountInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductDiscount.
     */
    data: XOR<ProductDiscountUpdateInput, ProductDiscountUncheckedUpdateInput>
    /**
     * Choose, which ProductDiscount to update.
     */
    where: ProductDiscountWhereUniqueInput
  }

  /**
   * ProductDiscount updateMany
   */
  export type ProductDiscountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductDiscounts.
     */
    data: XOR<ProductDiscountUpdateManyMutationInput, ProductDiscountUncheckedUpdateManyInput>
    /**
     * Filter which ProductDiscounts to update
     */
    where?: ProductDiscountWhereInput
    /**
     * Limit how many ProductDiscounts to update.
     */
    limit?: number
  }

  /**
   * ProductDiscount updateManyAndReturn
   */
  export type ProductDiscountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductDiscount
     */
    select?: ProductDiscountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductDiscount
     */
    omit?: ProductDiscountOmit<ExtArgs> | null
    /**
     * The data used to update ProductDiscounts.
     */
    data: XOR<ProductDiscountUpdateManyMutationInput, ProductDiscountUncheckedUpdateManyInput>
    /**
     * Filter which ProductDiscounts to update
     */
    where?: ProductDiscountWhereInput
    /**
     * Limit how many ProductDiscounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductDiscountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductDiscount upsert
   */
  export type ProductDiscountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductDiscount
     */
    select?: ProductDiscountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductDiscount
     */
    omit?: ProductDiscountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductDiscountInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductDiscount to update in case it exists.
     */
    where: ProductDiscountWhereUniqueInput
    /**
     * In case the ProductDiscount found by the `where` argument doesn't exist, create a new ProductDiscount with this data.
     */
    create: XOR<ProductDiscountCreateInput, ProductDiscountUncheckedCreateInput>
    /**
     * In case the ProductDiscount was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductDiscountUpdateInput, ProductDiscountUncheckedUpdateInput>
  }

  /**
   * ProductDiscount delete
   */
  export type ProductDiscountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductDiscount
     */
    select?: ProductDiscountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductDiscount
     */
    omit?: ProductDiscountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductDiscountInclude<ExtArgs> | null
    /**
     * Filter which ProductDiscount to delete.
     */
    where: ProductDiscountWhereUniqueInput
  }

  /**
   * ProductDiscount deleteMany
   */
  export type ProductDiscountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductDiscounts to delete
     */
    where?: ProductDiscountWhereInput
    /**
     * Limit how many ProductDiscounts to delete.
     */
    limit?: number
  }

  /**
   * ProductDiscount without action
   */
  export type ProductDiscountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductDiscount
     */
    select?: ProductDiscountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductDiscount
     */
    omit?: ProductDiscountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductDiscountInclude<ExtArgs> | null
  }


  /**
   * Model ProductCoupon
   */

  export type AggregateProductCoupon = {
    _count: ProductCouponCountAggregateOutputType | null
    _avg: ProductCouponAvgAggregateOutputType | null
    _sum: ProductCouponSumAggregateOutputType | null
    _min: ProductCouponMinAggregateOutputType | null
    _max: ProductCouponMaxAggregateOutputType | null
  }

  export type ProductCouponAvgAggregateOutputType = {
    id: number | null
    discount: number | null
    expired_at: number | null
  }

  export type ProductCouponSumAggregateOutputType = {
    id: number | null
    discount: number | null
    expired_at: bigint | null
  }

  export type ProductCouponMinAggregateOutputType = {
    id: number | null
    product_id: string | null
    code: string | null
    discount: number | null
    expired_at: bigint | null
  }

  export type ProductCouponMaxAggregateOutputType = {
    id: number | null
    product_id: string | null
    code: string | null
    discount: number | null
    expired_at: bigint | null
  }

  export type ProductCouponCountAggregateOutputType = {
    id: number
    product_id: number
    code: number
    discount: number
    expired_at: number
    _all: number
  }


  export type ProductCouponAvgAggregateInputType = {
    id?: true
    discount?: true
    expired_at?: true
  }

  export type ProductCouponSumAggregateInputType = {
    id?: true
    discount?: true
    expired_at?: true
  }

  export type ProductCouponMinAggregateInputType = {
    id?: true
    product_id?: true
    code?: true
    discount?: true
    expired_at?: true
  }

  export type ProductCouponMaxAggregateInputType = {
    id?: true
    product_id?: true
    code?: true
    discount?: true
    expired_at?: true
  }

  export type ProductCouponCountAggregateInputType = {
    id?: true
    product_id?: true
    code?: true
    discount?: true
    expired_at?: true
    _all?: true
  }

  export type ProductCouponAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductCoupon to aggregate.
     */
    where?: ProductCouponWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductCoupons to fetch.
     */
    orderBy?: ProductCouponOrderByWithRelationInput | ProductCouponOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductCouponWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductCoupons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductCoupons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductCoupons
    **/
    _count?: true | ProductCouponCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductCouponAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductCouponSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductCouponMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductCouponMaxAggregateInputType
  }

  export type GetProductCouponAggregateType<T extends ProductCouponAggregateArgs> = {
        [P in keyof T & keyof AggregateProductCoupon]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductCoupon[P]>
      : GetScalarType<T[P], AggregateProductCoupon[P]>
  }




  export type ProductCouponGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductCouponWhereInput
    orderBy?: ProductCouponOrderByWithAggregationInput | ProductCouponOrderByWithAggregationInput[]
    by: ProductCouponScalarFieldEnum[] | ProductCouponScalarFieldEnum
    having?: ProductCouponScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCouponCountAggregateInputType | true
    _avg?: ProductCouponAvgAggregateInputType
    _sum?: ProductCouponSumAggregateInputType
    _min?: ProductCouponMinAggregateInputType
    _max?: ProductCouponMaxAggregateInputType
  }

  export type ProductCouponGroupByOutputType = {
    id: number
    product_id: string
    code: string
    discount: number
    expired_at: bigint
    _count: ProductCouponCountAggregateOutputType | null
    _avg: ProductCouponAvgAggregateOutputType | null
    _sum: ProductCouponSumAggregateOutputType | null
    _min: ProductCouponMinAggregateOutputType | null
    _max: ProductCouponMaxAggregateOutputType | null
  }

  type GetProductCouponGroupByPayload<T extends ProductCouponGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductCouponGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductCouponGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductCouponGroupByOutputType[P]>
            : GetScalarType<T[P], ProductCouponGroupByOutputType[P]>
        }
      >
    >


  export type ProductCouponSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    code?: boolean
    discount?: boolean
    expired_at?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productCoupon"]>

  export type ProductCouponSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    code?: boolean
    discount?: boolean
    expired_at?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productCoupon"]>

  export type ProductCouponSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    code?: boolean
    discount?: boolean
    expired_at?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productCoupon"]>

  export type ProductCouponSelectScalar = {
    id?: boolean
    product_id?: boolean
    code?: boolean
    discount?: boolean
    expired_at?: boolean
  }

  export type ProductCouponOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "product_id" | "code" | "discount" | "expired_at", ExtArgs["result"]["productCoupon"]>
  export type ProductCouponInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type ProductCouponIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type ProductCouponIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $ProductCouponPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductCoupon"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      product_id: string
      code: string
      discount: number
      expired_at: bigint
    }, ExtArgs["result"]["productCoupon"]>
    composites: {}
  }

  type ProductCouponGetPayload<S extends boolean | null | undefined | ProductCouponDefaultArgs> = $Result.GetResult<Prisma.$ProductCouponPayload, S>

  type ProductCouponCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductCouponFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductCouponCountAggregateInputType | true
    }

  export interface ProductCouponDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductCoupon'], meta: { name: 'ProductCoupon' } }
    /**
     * Find zero or one ProductCoupon that matches the filter.
     * @param {ProductCouponFindUniqueArgs} args - Arguments to find a ProductCoupon
     * @example
     * // Get one ProductCoupon
     * const productCoupon = await prisma.productCoupon.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductCouponFindUniqueArgs>(args: SelectSubset<T, ProductCouponFindUniqueArgs<ExtArgs>>): Prisma__ProductCouponClient<$Result.GetResult<Prisma.$ProductCouponPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProductCoupon that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductCouponFindUniqueOrThrowArgs} args - Arguments to find a ProductCoupon
     * @example
     * // Get one ProductCoupon
     * const productCoupon = await prisma.productCoupon.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductCouponFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductCouponFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductCouponClient<$Result.GetResult<Prisma.$ProductCouponPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductCoupon that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCouponFindFirstArgs} args - Arguments to find a ProductCoupon
     * @example
     * // Get one ProductCoupon
     * const productCoupon = await prisma.productCoupon.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductCouponFindFirstArgs>(args?: SelectSubset<T, ProductCouponFindFirstArgs<ExtArgs>>): Prisma__ProductCouponClient<$Result.GetResult<Prisma.$ProductCouponPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductCoupon that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCouponFindFirstOrThrowArgs} args - Arguments to find a ProductCoupon
     * @example
     * // Get one ProductCoupon
     * const productCoupon = await prisma.productCoupon.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductCouponFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductCouponFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductCouponClient<$Result.GetResult<Prisma.$ProductCouponPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductCoupons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCouponFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductCoupons
     * const productCoupons = await prisma.productCoupon.findMany()
     * 
     * // Get first 10 ProductCoupons
     * const productCoupons = await prisma.productCoupon.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productCouponWithIdOnly = await prisma.productCoupon.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductCouponFindManyArgs>(args?: SelectSubset<T, ProductCouponFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductCouponPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProductCoupon.
     * @param {ProductCouponCreateArgs} args - Arguments to create a ProductCoupon.
     * @example
     * // Create one ProductCoupon
     * const ProductCoupon = await prisma.productCoupon.create({
     *   data: {
     *     // ... data to create a ProductCoupon
     *   }
     * })
     * 
     */
    create<T extends ProductCouponCreateArgs>(args: SelectSubset<T, ProductCouponCreateArgs<ExtArgs>>): Prisma__ProductCouponClient<$Result.GetResult<Prisma.$ProductCouponPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProductCoupons.
     * @param {ProductCouponCreateManyArgs} args - Arguments to create many ProductCoupons.
     * @example
     * // Create many ProductCoupons
     * const productCoupon = await prisma.productCoupon.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductCouponCreateManyArgs>(args?: SelectSubset<T, ProductCouponCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProductCoupons and returns the data saved in the database.
     * @param {ProductCouponCreateManyAndReturnArgs} args - Arguments to create many ProductCoupons.
     * @example
     * // Create many ProductCoupons
     * const productCoupon = await prisma.productCoupon.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProductCoupons and only return the `id`
     * const productCouponWithIdOnly = await prisma.productCoupon.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductCouponCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductCouponCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductCouponPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProductCoupon.
     * @param {ProductCouponDeleteArgs} args - Arguments to delete one ProductCoupon.
     * @example
     * // Delete one ProductCoupon
     * const ProductCoupon = await prisma.productCoupon.delete({
     *   where: {
     *     // ... filter to delete one ProductCoupon
     *   }
     * })
     * 
     */
    delete<T extends ProductCouponDeleteArgs>(args: SelectSubset<T, ProductCouponDeleteArgs<ExtArgs>>): Prisma__ProductCouponClient<$Result.GetResult<Prisma.$ProductCouponPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProductCoupon.
     * @param {ProductCouponUpdateArgs} args - Arguments to update one ProductCoupon.
     * @example
     * // Update one ProductCoupon
     * const productCoupon = await prisma.productCoupon.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductCouponUpdateArgs>(args: SelectSubset<T, ProductCouponUpdateArgs<ExtArgs>>): Prisma__ProductCouponClient<$Result.GetResult<Prisma.$ProductCouponPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProductCoupons.
     * @param {ProductCouponDeleteManyArgs} args - Arguments to filter ProductCoupons to delete.
     * @example
     * // Delete a few ProductCoupons
     * const { count } = await prisma.productCoupon.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductCouponDeleteManyArgs>(args?: SelectSubset<T, ProductCouponDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductCoupons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCouponUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductCoupons
     * const productCoupon = await prisma.productCoupon.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductCouponUpdateManyArgs>(args: SelectSubset<T, ProductCouponUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductCoupons and returns the data updated in the database.
     * @param {ProductCouponUpdateManyAndReturnArgs} args - Arguments to update many ProductCoupons.
     * @example
     * // Update many ProductCoupons
     * const productCoupon = await prisma.productCoupon.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProductCoupons and only return the `id`
     * const productCouponWithIdOnly = await prisma.productCoupon.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductCouponUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductCouponUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductCouponPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProductCoupon.
     * @param {ProductCouponUpsertArgs} args - Arguments to update or create a ProductCoupon.
     * @example
     * // Update or create a ProductCoupon
     * const productCoupon = await prisma.productCoupon.upsert({
     *   create: {
     *     // ... data to create a ProductCoupon
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductCoupon we want to update
     *   }
     * })
     */
    upsert<T extends ProductCouponUpsertArgs>(args: SelectSubset<T, ProductCouponUpsertArgs<ExtArgs>>): Prisma__ProductCouponClient<$Result.GetResult<Prisma.$ProductCouponPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProductCoupons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCouponCountArgs} args - Arguments to filter ProductCoupons to count.
     * @example
     * // Count the number of ProductCoupons
     * const count = await prisma.productCoupon.count({
     *   where: {
     *     // ... the filter for the ProductCoupons we want to count
     *   }
     * })
    **/
    count<T extends ProductCouponCountArgs>(
      args?: Subset<T, ProductCouponCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCouponCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductCoupon.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCouponAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductCouponAggregateArgs>(args: Subset<T, ProductCouponAggregateArgs>): Prisma.PrismaPromise<GetProductCouponAggregateType<T>>

    /**
     * Group by ProductCoupon.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCouponGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductCouponGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductCouponGroupByArgs['orderBy'] }
        : { orderBy?: ProductCouponGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductCouponGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductCouponGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductCoupon model
   */
  readonly fields: ProductCouponFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductCoupon.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductCouponClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductCoupon model
   */
  interface ProductCouponFieldRefs {
    readonly id: FieldRef<"ProductCoupon", 'Int'>
    readonly product_id: FieldRef<"ProductCoupon", 'String'>
    readonly code: FieldRef<"ProductCoupon", 'String'>
    readonly discount: FieldRef<"ProductCoupon", 'Int'>
    readonly expired_at: FieldRef<"ProductCoupon", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * ProductCoupon findUnique
   */
  export type ProductCouponFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCoupon
     */
    select?: ProductCouponSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCoupon
     */
    omit?: ProductCouponOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCouponInclude<ExtArgs> | null
    /**
     * Filter, which ProductCoupon to fetch.
     */
    where: ProductCouponWhereUniqueInput
  }

  /**
   * ProductCoupon findUniqueOrThrow
   */
  export type ProductCouponFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCoupon
     */
    select?: ProductCouponSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCoupon
     */
    omit?: ProductCouponOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCouponInclude<ExtArgs> | null
    /**
     * Filter, which ProductCoupon to fetch.
     */
    where: ProductCouponWhereUniqueInput
  }

  /**
   * ProductCoupon findFirst
   */
  export type ProductCouponFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCoupon
     */
    select?: ProductCouponSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCoupon
     */
    omit?: ProductCouponOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCouponInclude<ExtArgs> | null
    /**
     * Filter, which ProductCoupon to fetch.
     */
    where?: ProductCouponWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductCoupons to fetch.
     */
    orderBy?: ProductCouponOrderByWithRelationInput | ProductCouponOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductCoupons.
     */
    cursor?: ProductCouponWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductCoupons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductCoupons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductCoupons.
     */
    distinct?: ProductCouponScalarFieldEnum | ProductCouponScalarFieldEnum[]
  }

  /**
   * ProductCoupon findFirstOrThrow
   */
  export type ProductCouponFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCoupon
     */
    select?: ProductCouponSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCoupon
     */
    omit?: ProductCouponOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCouponInclude<ExtArgs> | null
    /**
     * Filter, which ProductCoupon to fetch.
     */
    where?: ProductCouponWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductCoupons to fetch.
     */
    orderBy?: ProductCouponOrderByWithRelationInput | ProductCouponOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductCoupons.
     */
    cursor?: ProductCouponWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductCoupons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductCoupons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductCoupons.
     */
    distinct?: ProductCouponScalarFieldEnum | ProductCouponScalarFieldEnum[]
  }

  /**
   * ProductCoupon findMany
   */
  export type ProductCouponFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCoupon
     */
    select?: ProductCouponSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCoupon
     */
    omit?: ProductCouponOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCouponInclude<ExtArgs> | null
    /**
     * Filter, which ProductCoupons to fetch.
     */
    where?: ProductCouponWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductCoupons to fetch.
     */
    orderBy?: ProductCouponOrderByWithRelationInput | ProductCouponOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductCoupons.
     */
    cursor?: ProductCouponWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductCoupons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductCoupons.
     */
    skip?: number
    distinct?: ProductCouponScalarFieldEnum | ProductCouponScalarFieldEnum[]
  }

  /**
   * ProductCoupon create
   */
  export type ProductCouponCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCoupon
     */
    select?: ProductCouponSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCoupon
     */
    omit?: ProductCouponOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCouponInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductCoupon.
     */
    data: XOR<ProductCouponCreateInput, ProductCouponUncheckedCreateInput>
  }

  /**
   * ProductCoupon createMany
   */
  export type ProductCouponCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductCoupons.
     */
    data: ProductCouponCreateManyInput | ProductCouponCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProductCoupon createManyAndReturn
   */
  export type ProductCouponCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCoupon
     */
    select?: ProductCouponSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCoupon
     */
    omit?: ProductCouponOmit<ExtArgs> | null
    /**
     * The data used to create many ProductCoupons.
     */
    data: ProductCouponCreateManyInput | ProductCouponCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCouponIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductCoupon update
   */
  export type ProductCouponUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCoupon
     */
    select?: ProductCouponSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCoupon
     */
    omit?: ProductCouponOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCouponInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductCoupon.
     */
    data: XOR<ProductCouponUpdateInput, ProductCouponUncheckedUpdateInput>
    /**
     * Choose, which ProductCoupon to update.
     */
    where: ProductCouponWhereUniqueInput
  }

  /**
   * ProductCoupon updateMany
   */
  export type ProductCouponUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductCoupons.
     */
    data: XOR<ProductCouponUpdateManyMutationInput, ProductCouponUncheckedUpdateManyInput>
    /**
     * Filter which ProductCoupons to update
     */
    where?: ProductCouponWhereInput
    /**
     * Limit how many ProductCoupons to update.
     */
    limit?: number
  }

  /**
   * ProductCoupon updateManyAndReturn
   */
  export type ProductCouponUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCoupon
     */
    select?: ProductCouponSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCoupon
     */
    omit?: ProductCouponOmit<ExtArgs> | null
    /**
     * The data used to update ProductCoupons.
     */
    data: XOR<ProductCouponUpdateManyMutationInput, ProductCouponUncheckedUpdateManyInput>
    /**
     * Filter which ProductCoupons to update
     */
    where?: ProductCouponWhereInput
    /**
     * Limit how many ProductCoupons to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCouponIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductCoupon upsert
   */
  export type ProductCouponUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCoupon
     */
    select?: ProductCouponSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCoupon
     */
    omit?: ProductCouponOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCouponInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductCoupon to update in case it exists.
     */
    where: ProductCouponWhereUniqueInput
    /**
     * In case the ProductCoupon found by the `where` argument doesn't exist, create a new ProductCoupon with this data.
     */
    create: XOR<ProductCouponCreateInput, ProductCouponUncheckedCreateInput>
    /**
     * In case the ProductCoupon was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductCouponUpdateInput, ProductCouponUncheckedUpdateInput>
  }

  /**
   * ProductCoupon delete
   */
  export type ProductCouponDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCoupon
     */
    select?: ProductCouponSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCoupon
     */
    omit?: ProductCouponOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCouponInclude<ExtArgs> | null
    /**
     * Filter which ProductCoupon to delete.
     */
    where: ProductCouponWhereUniqueInput
  }

  /**
   * ProductCoupon deleteMany
   */
  export type ProductCouponDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductCoupons to delete
     */
    where?: ProductCouponWhereInput
    /**
     * Limit how many ProductCoupons to delete.
     */
    limit?: number
  }

  /**
   * ProductCoupon without action
   */
  export type ProductCouponDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCoupon
     */
    select?: ProductCouponSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductCoupon
     */
    omit?: ProductCouponOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductCouponInclude<ExtArgs> | null
  }


  /**
   * Model ProductImage
   */

  export type AggregateProductImage = {
    _count: ProductImageCountAggregateOutputType | null
    _avg: ProductImageAvgAggregateOutputType | null
    _sum: ProductImageSumAggregateOutputType | null
    _min: ProductImageMinAggregateOutputType | null
    _max: ProductImageMaxAggregateOutputType | null
  }

  export type ProductImageAvgAggregateOutputType = {
    width: number | null
    height: number | null
  }

  export type ProductImageSumAggregateOutputType = {
    width: number | null
    height: number | null
  }

  export type ProductImageMinAggregateOutputType = {
    id: string | null
    product_id: string | null
    url: string | null
    is_thumbnail: boolean | null
    width: number | null
    height: number | null
  }

  export type ProductImageMaxAggregateOutputType = {
    id: string | null
    product_id: string | null
    url: string | null
    is_thumbnail: boolean | null
    width: number | null
    height: number | null
  }

  export type ProductImageCountAggregateOutputType = {
    id: number
    product_id: number
    url: number
    is_thumbnail: number
    width: number
    height: number
    _all: number
  }


  export type ProductImageAvgAggregateInputType = {
    width?: true
    height?: true
  }

  export type ProductImageSumAggregateInputType = {
    width?: true
    height?: true
  }

  export type ProductImageMinAggregateInputType = {
    id?: true
    product_id?: true
    url?: true
    is_thumbnail?: true
    width?: true
    height?: true
  }

  export type ProductImageMaxAggregateInputType = {
    id?: true
    product_id?: true
    url?: true
    is_thumbnail?: true
    width?: true
    height?: true
  }

  export type ProductImageCountAggregateInputType = {
    id?: true
    product_id?: true
    url?: true
    is_thumbnail?: true
    width?: true
    height?: true
    _all?: true
  }

  export type ProductImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductImage to aggregate.
     */
    where?: ProductImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductImages to fetch.
     */
    orderBy?: ProductImageOrderByWithRelationInput | ProductImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductImages
    **/
    _count?: true | ProductImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductImageMaxAggregateInputType
  }

  export type GetProductImageAggregateType<T extends ProductImageAggregateArgs> = {
        [P in keyof T & keyof AggregateProductImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductImage[P]>
      : GetScalarType<T[P], AggregateProductImage[P]>
  }




  export type ProductImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductImageWhereInput
    orderBy?: ProductImageOrderByWithAggregationInput | ProductImageOrderByWithAggregationInput[]
    by: ProductImageScalarFieldEnum[] | ProductImageScalarFieldEnum
    having?: ProductImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductImageCountAggregateInputType | true
    _avg?: ProductImageAvgAggregateInputType
    _sum?: ProductImageSumAggregateInputType
    _min?: ProductImageMinAggregateInputType
    _max?: ProductImageMaxAggregateInputType
  }

  export type ProductImageGroupByOutputType = {
    id: string
    product_id: string
    url: string
    is_thumbnail: boolean
    width: number
    height: number
    _count: ProductImageCountAggregateOutputType | null
    _avg: ProductImageAvgAggregateOutputType | null
    _sum: ProductImageSumAggregateOutputType | null
    _min: ProductImageMinAggregateOutputType | null
    _max: ProductImageMaxAggregateOutputType | null
  }

  type GetProductImageGroupByPayload<T extends ProductImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductImageGroupByOutputType[P]>
            : GetScalarType<T[P], ProductImageGroupByOutputType[P]>
        }
      >
    >


  export type ProductImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    url?: boolean
    is_thumbnail?: boolean
    width?: boolean
    height?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productImage"]>

  export type ProductImageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    url?: boolean
    is_thumbnail?: boolean
    width?: boolean
    height?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productImage"]>

  export type ProductImageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    url?: boolean
    is_thumbnail?: boolean
    width?: boolean
    height?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productImage"]>

  export type ProductImageSelectScalar = {
    id?: boolean
    product_id?: boolean
    url?: boolean
    is_thumbnail?: boolean
    width?: boolean
    height?: boolean
  }

  export type ProductImageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "product_id" | "url" | "is_thumbnail" | "width" | "height", ExtArgs["result"]["productImage"]>
  export type ProductImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type ProductImageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type ProductImageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $ProductImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductImage"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      product_id: string
      url: string
      is_thumbnail: boolean
      width: number
      height: number
    }, ExtArgs["result"]["productImage"]>
    composites: {}
  }

  type ProductImageGetPayload<S extends boolean | null | undefined | ProductImageDefaultArgs> = $Result.GetResult<Prisma.$ProductImagePayload, S>

  type ProductImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductImageCountAggregateInputType | true
    }

  export interface ProductImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductImage'], meta: { name: 'ProductImage' } }
    /**
     * Find zero or one ProductImage that matches the filter.
     * @param {ProductImageFindUniqueArgs} args - Arguments to find a ProductImage
     * @example
     * // Get one ProductImage
     * const productImage = await prisma.productImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductImageFindUniqueArgs>(args: SelectSubset<T, ProductImageFindUniqueArgs<ExtArgs>>): Prisma__ProductImageClient<$Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProductImage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductImageFindUniqueOrThrowArgs} args - Arguments to find a ProductImage
     * @example
     * // Get one ProductImage
     * const productImage = await prisma.productImage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductImageFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductImageClient<$Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductImageFindFirstArgs} args - Arguments to find a ProductImage
     * @example
     * // Get one ProductImage
     * const productImage = await prisma.productImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductImageFindFirstArgs>(args?: SelectSubset<T, ProductImageFindFirstArgs<ExtArgs>>): Prisma__ProductImageClient<$Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductImage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductImageFindFirstOrThrowArgs} args - Arguments to find a ProductImage
     * @example
     * // Get one ProductImage
     * const productImage = await prisma.productImage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductImageFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductImageClient<$Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductImages
     * const productImages = await prisma.productImage.findMany()
     * 
     * // Get first 10 ProductImages
     * const productImages = await prisma.productImage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productImageWithIdOnly = await prisma.productImage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductImageFindManyArgs>(args?: SelectSubset<T, ProductImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProductImage.
     * @param {ProductImageCreateArgs} args - Arguments to create a ProductImage.
     * @example
     * // Create one ProductImage
     * const ProductImage = await prisma.productImage.create({
     *   data: {
     *     // ... data to create a ProductImage
     *   }
     * })
     * 
     */
    create<T extends ProductImageCreateArgs>(args: SelectSubset<T, ProductImageCreateArgs<ExtArgs>>): Prisma__ProductImageClient<$Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProductImages.
     * @param {ProductImageCreateManyArgs} args - Arguments to create many ProductImages.
     * @example
     * // Create many ProductImages
     * const productImage = await prisma.productImage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductImageCreateManyArgs>(args?: SelectSubset<T, ProductImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProductImages and returns the data saved in the database.
     * @param {ProductImageCreateManyAndReturnArgs} args - Arguments to create many ProductImages.
     * @example
     * // Create many ProductImages
     * const productImage = await prisma.productImage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProductImages and only return the `id`
     * const productImageWithIdOnly = await prisma.productImage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductImageCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductImageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProductImage.
     * @param {ProductImageDeleteArgs} args - Arguments to delete one ProductImage.
     * @example
     * // Delete one ProductImage
     * const ProductImage = await prisma.productImage.delete({
     *   where: {
     *     // ... filter to delete one ProductImage
     *   }
     * })
     * 
     */
    delete<T extends ProductImageDeleteArgs>(args: SelectSubset<T, ProductImageDeleteArgs<ExtArgs>>): Prisma__ProductImageClient<$Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProductImage.
     * @param {ProductImageUpdateArgs} args - Arguments to update one ProductImage.
     * @example
     * // Update one ProductImage
     * const productImage = await prisma.productImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductImageUpdateArgs>(args: SelectSubset<T, ProductImageUpdateArgs<ExtArgs>>): Prisma__ProductImageClient<$Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProductImages.
     * @param {ProductImageDeleteManyArgs} args - Arguments to filter ProductImages to delete.
     * @example
     * // Delete a few ProductImages
     * const { count } = await prisma.productImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductImageDeleteManyArgs>(args?: SelectSubset<T, ProductImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductImages
     * const productImage = await prisma.productImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductImageUpdateManyArgs>(args: SelectSubset<T, ProductImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductImages and returns the data updated in the database.
     * @param {ProductImageUpdateManyAndReturnArgs} args - Arguments to update many ProductImages.
     * @example
     * // Update many ProductImages
     * const productImage = await prisma.productImage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProductImages and only return the `id`
     * const productImageWithIdOnly = await prisma.productImage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductImageUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductImageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProductImage.
     * @param {ProductImageUpsertArgs} args - Arguments to update or create a ProductImage.
     * @example
     * // Update or create a ProductImage
     * const productImage = await prisma.productImage.upsert({
     *   create: {
     *     // ... data to create a ProductImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductImage we want to update
     *   }
     * })
     */
    upsert<T extends ProductImageUpsertArgs>(args: SelectSubset<T, ProductImageUpsertArgs<ExtArgs>>): Prisma__ProductImageClient<$Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProductImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductImageCountArgs} args - Arguments to filter ProductImages to count.
     * @example
     * // Count the number of ProductImages
     * const count = await prisma.productImage.count({
     *   where: {
     *     // ... the filter for the ProductImages we want to count
     *   }
     * })
    **/
    count<T extends ProductImageCountArgs>(
      args?: Subset<T, ProductImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductImageAggregateArgs>(args: Subset<T, ProductImageAggregateArgs>): Prisma.PrismaPromise<GetProductImageAggregateType<T>>

    /**
     * Group by ProductImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductImageGroupByArgs['orderBy'] }
        : { orderBy?: ProductImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductImage model
   */
  readonly fields: ProductImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductImage model
   */
  interface ProductImageFieldRefs {
    readonly id: FieldRef<"ProductImage", 'String'>
    readonly product_id: FieldRef<"ProductImage", 'String'>
    readonly url: FieldRef<"ProductImage", 'String'>
    readonly is_thumbnail: FieldRef<"ProductImage", 'Boolean'>
    readonly width: FieldRef<"ProductImage", 'Int'>
    readonly height: FieldRef<"ProductImage", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ProductImage findUnique
   */
  export type ProductImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImage
     */
    select?: ProductImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImage
     */
    omit?: ProductImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImageInclude<ExtArgs> | null
    /**
     * Filter, which ProductImage to fetch.
     */
    where: ProductImageWhereUniqueInput
  }

  /**
   * ProductImage findUniqueOrThrow
   */
  export type ProductImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImage
     */
    select?: ProductImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImage
     */
    omit?: ProductImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImageInclude<ExtArgs> | null
    /**
     * Filter, which ProductImage to fetch.
     */
    where: ProductImageWhereUniqueInput
  }

  /**
   * ProductImage findFirst
   */
  export type ProductImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImage
     */
    select?: ProductImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImage
     */
    omit?: ProductImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImageInclude<ExtArgs> | null
    /**
     * Filter, which ProductImage to fetch.
     */
    where?: ProductImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductImages to fetch.
     */
    orderBy?: ProductImageOrderByWithRelationInput | ProductImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductImages.
     */
    cursor?: ProductImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductImages.
     */
    distinct?: ProductImageScalarFieldEnum | ProductImageScalarFieldEnum[]
  }

  /**
   * ProductImage findFirstOrThrow
   */
  export type ProductImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImage
     */
    select?: ProductImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImage
     */
    omit?: ProductImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImageInclude<ExtArgs> | null
    /**
     * Filter, which ProductImage to fetch.
     */
    where?: ProductImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductImages to fetch.
     */
    orderBy?: ProductImageOrderByWithRelationInput | ProductImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductImages.
     */
    cursor?: ProductImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductImages.
     */
    distinct?: ProductImageScalarFieldEnum | ProductImageScalarFieldEnum[]
  }

  /**
   * ProductImage findMany
   */
  export type ProductImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImage
     */
    select?: ProductImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImage
     */
    omit?: ProductImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImageInclude<ExtArgs> | null
    /**
     * Filter, which ProductImages to fetch.
     */
    where?: ProductImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductImages to fetch.
     */
    orderBy?: ProductImageOrderByWithRelationInput | ProductImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductImages.
     */
    cursor?: ProductImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductImages.
     */
    skip?: number
    distinct?: ProductImageScalarFieldEnum | ProductImageScalarFieldEnum[]
  }

  /**
   * ProductImage create
   */
  export type ProductImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImage
     */
    select?: ProductImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImage
     */
    omit?: ProductImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImageInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductImage.
     */
    data: XOR<ProductImageCreateInput, ProductImageUncheckedCreateInput>
  }

  /**
   * ProductImage createMany
   */
  export type ProductImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductImages.
     */
    data: ProductImageCreateManyInput | ProductImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProductImage createManyAndReturn
   */
  export type ProductImageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImage
     */
    select?: ProductImageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImage
     */
    omit?: ProductImageOmit<ExtArgs> | null
    /**
     * The data used to create many ProductImages.
     */
    data: ProductImageCreateManyInput | ProductImageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductImage update
   */
  export type ProductImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImage
     */
    select?: ProductImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImage
     */
    omit?: ProductImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImageInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductImage.
     */
    data: XOR<ProductImageUpdateInput, ProductImageUncheckedUpdateInput>
    /**
     * Choose, which ProductImage to update.
     */
    where: ProductImageWhereUniqueInput
  }

  /**
   * ProductImage updateMany
   */
  export type ProductImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductImages.
     */
    data: XOR<ProductImageUpdateManyMutationInput, ProductImageUncheckedUpdateManyInput>
    /**
     * Filter which ProductImages to update
     */
    where?: ProductImageWhereInput
    /**
     * Limit how many ProductImages to update.
     */
    limit?: number
  }

  /**
   * ProductImage updateManyAndReturn
   */
  export type ProductImageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImage
     */
    select?: ProductImageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImage
     */
    omit?: ProductImageOmit<ExtArgs> | null
    /**
     * The data used to update ProductImages.
     */
    data: XOR<ProductImageUpdateManyMutationInput, ProductImageUncheckedUpdateManyInput>
    /**
     * Filter which ProductImages to update
     */
    where?: ProductImageWhereInput
    /**
     * Limit how many ProductImages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductImage upsert
   */
  export type ProductImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImage
     */
    select?: ProductImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImage
     */
    omit?: ProductImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImageInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductImage to update in case it exists.
     */
    where: ProductImageWhereUniqueInput
    /**
     * In case the ProductImage found by the `where` argument doesn't exist, create a new ProductImage with this data.
     */
    create: XOR<ProductImageCreateInput, ProductImageUncheckedCreateInput>
    /**
     * In case the ProductImage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductImageUpdateInput, ProductImageUncheckedUpdateInput>
  }

  /**
   * ProductImage delete
   */
  export type ProductImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImage
     */
    select?: ProductImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImage
     */
    omit?: ProductImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImageInclude<ExtArgs> | null
    /**
     * Filter which ProductImage to delete.
     */
    where: ProductImageWhereUniqueInput
  }

  /**
   * ProductImage deleteMany
   */
  export type ProductImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductImages to delete
     */
    where?: ProductImageWhereInput
    /**
     * Limit how many ProductImages to delete.
     */
    limit?: number
  }

  /**
   * ProductImage without action
   */
  export type ProductImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImage
     */
    select?: ProductImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImage
     */
    omit?: ProductImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImageInclude<ExtArgs> | null
  }


  /**
   * Model ProductVariant
   */

  export type AggregateProductVariant = {
    _count: ProductVariantCountAggregateOutputType | null
    _min: ProductVariantMinAggregateOutputType | null
    _max: ProductVariantMaxAggregateOutputType | null
  }

  export type ProductVariantMinAggregateOutputType = {
    id: string | null
    product_id: string | null
    name: string | null
    download_link: string | null
  }

  export type ProductVariantMaxAggregateOutputType = {
    id: string | null
    product_id: string | null
    name: string | null
    download_link: string | null
  }

  export type ProductVariantCountAggregateOutputType = {
    id: number
    product_id: number
    name: number
    download_link: number
    _all: number
  }


  export type ProductVariantMinAggregateInputType = {
    id?: true
    product_id?: true
    name?: true
    download_link?: true
  }

  export type ProductVariantMaxAggregateInputType = {
    id?: true
    product_id?: true
    name?: true
    download_link?: true
  }

  export type ProductVariantCountAggregateInputType = {
    id?: true
    product_id?: true
    name?: true
    download_link?: true
    _all?: true
  }

  export type ProductVariantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductVariant to aggregate.
     */
    where?: ProductVariantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductVariants to fetch.
     */
    orderBy?: ProductVariantOrderByWithRelationInput | ProductVariantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductVariantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductVariants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductVariants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductVariants
    **/
    _count?: true | ProductVariantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductVariantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductVariantMaxAggregateInputType
  }

  export type GetProductVariantAggregateType<T extends ProductVariantAggregateArgs> = {
        [P in keyof T & keyof AggregateProductVariant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductVariant[P]>
      : GetScalarType<T[P], AggregateProductVariant[P]>
  }




  export type ProductVariantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductVariantWhereInput
    orderBy?: ProductVariantOrderByWithAggregationInput | ProductVariantOrderByWithAggregationInput[]
    by: ProductVariantScalarFieldEnum[] | ProductVariantScalarFieldEnum
    having?: ProductVariantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductVariantCountAggregateInputType | true
    _min?: ProductVariantMinAggregateInputType
    _max?: ProductVariantMaxAggregateInputType
  }

  export type ProductVariantGroupByOutputType = {
    id: string
    product_id: string
    name: string
    download_link: string | null
    _count: ProductVariantCountAggregateOutputType | null
    _min: ProductVariantMinAggregateOutputType | null
    _max: ProductVariantMaxAggregateOutputType | null
  }

  type GetProductVariantGroupByPayload<T extends ProductVariantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductVariantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductVariantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductVariantGroupByOutputType[P]>
            : GetScalarType<T[P], ProductVariantGroupByOutputType[P]>
        }
      >
    >


  export type ProductVariantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    name?: boolean
    download_link?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    prices?: boolean | ProductVariant$pricesArgs<ExtArgs>
    _count?: boolean | ProductVariantCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productVariant"]>

  export type ProductVariantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    name?: boolean
    download_link?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productVariant"]>

  export type ProductVariantSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    name?: boolean
    download_link?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productVariant"]>

  export type ProductVariantSelectScalar = {
    id?: boolean
    product_id?: boolean
    name?: boolean
    download_link?: boolean
  }

  export type ProductVariantOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "product_id" | "name" | "download_link", ExtArgs["result"]["productVariant"]>
  export type ProductVariantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    prices?: boolean | ProductVariant$pricesArgs<ExtArgs>
    _count?: boolean | ProductVariantCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProductVariantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type ProductVariantIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $ProductVariantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductVariant"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
      prices: Prisma.$ProductPricePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      product_id: string
      name: string
      download_link: string | null
    }, ExtArgs["result"]["productVariant"]>
    composites: {}
  }

  type ProductVariantGetPayload<S extends boolean | null | undefined | ProductVariantDefaultArgs> = $Result.GetResult<Prisma.$ProductVariantPayload, S>

  type ProductVariantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductVariantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductVariantCountAggregateInputType | true
    }

  export interface ProductVariantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductVariant'], meta: { name: 'ProductVariant' } }
    /**
     * Find zero or one ProductVariant that matches the filter.
     * @param {ProductVariantFindUniqueArgs} args - Arguments to find a ProductVariant
     * @example
     * // Get one ProductVariant
     * const productVariant = await prisma.productVariant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductVariantFindUniqueArgs>(args: SelectSubset<T, ProductVariantFindUniqueArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProductVariant that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductVariantFindUniqueOrThrowArgs} args - Arguments to find a ProductVariant
     * @example
     * // Get one ProductVariant
     * const productVariant = await prisma.productVariant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductVariantFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductVariantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductVariant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductVariantFindFirstArgs} args - Arguments to find a ProductVariant
     * @example
     * // Get one ProductVariant
     * const productVariant = await prisma.productVariant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductVariantFindFirstArgs>(args?: SelectSubset<T, ProductVariantFindFirstArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductVariant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductVariantFindFirstOrThrowArgs} args - Arguments to find a ProductVariant
     * @example
     * // Get one ProductVariant
     * const productVariant = await prisma.productVariant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductVariantFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductVariantFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductVariants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductVariantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductVariants
     * const productVariants = await prisma.productVariant.findMany()
     * 
     * // Get first 10 ProductVariants
     * const productVariants = await prisma.productVariant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productVariantWithIdOnly = await prisma.productVariant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductVariantFindManyArgs>(args?: SelectSubset<T, ProductVariantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProductVariant.
     * @param {ProductVariantCreateArgs} args - Arguments to create a ProductVariant.
     * @example
     * // Create one ProductVariant
     * const ProductVariant = await prisma.productVariant.create({
     *   data: {
     *     // ... data to create a ProductVariant
     *   }
     * })
     * 
     */
    create<T extends ProductVariantCreateArgs>(args: SelectSubset<T, ProductVariantCreateArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProductVariants.
     * @param {ProductVariantCreateManyArgs} args - Arguments to create many ProductVariants.
     * @example
     * // Create many ProductVariants
     * const productVariant = await prisma.productVariant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductVariantCreateManyArgs>(args?: SelectSubset<T, ProductVariantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProductVariants and returns the data saved in the database.
     * @param {ProductVariantCreateManyAndReturnArgs} args - Arguments to create many ProductVariants.
     * @example
     * // Create many ProductVariants
     * const productVariant = await prisma.productVariant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProductVariants and only return the `id`
     * const productVariantWithIdOnly = await prisma.productVariant.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductVariantCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductVariantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProductVariant.
     * @param {ProductVariantDeleteArgs} args - Arguments to delete one ProductVariant.
     * @example
     * // Delete one ProductVariant
     * const ProductVariant = await prisma.productVariant.delete({
     *   where: {
     *     // ... filter to delete one ProductVariant
     *   }
     * })
     * 
     */
    delete<T extends ProductVariantDeleteArgs>(args: SelectSubset<T, ProductVariantDeleteArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProductVariant.
     * @param {ProductVariantUpdateArgs} args - Arguments to update one ProductVariant.
     * @example
     * // Update one ProductVariant
     * const productVariant = await prisma.productVariant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductVariantUpdateArgs>(args: SelectSubset<T, ProductVariantUpdateArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProductVariants.
     * @param {ProductVariantDeleteManyArgs} args - Arguments to filter ProductVariants to delete.
     * @example
     * // Delete a few ProductVariants
     * const { count } = await prisma.productVariant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductVariantDeleteManyArgs>(args?: SelectSubset<T, ProductVariantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductVariants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductVariantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductVariants
     * const productVariant = await prisma.productVariant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductVariantUpdateManyArgs>(args: SelectSubset<T, ProductVariantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductVariants and returns the data updated in the database.
     * @param {ProductVariantUpdateManyAndReturnArgs} args - Arguments to update many ProductVariants.
     * @example
     * // Update many ProductVariants
     * const productVariant = await prisma.productVariant.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProductVariants and only return the `id`
     * const productVariantWithIdOnly = await prisma.productVariant.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductVariantUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductVariantUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProductVariant.
     * @param {ProductVariantUpsertArgs} args - Arguments to update or create a ProductVariant.
     * @example
     * // Update or create a ProductVariant
     * const productVariant = await prisma.productVariant.upsert({
     *   create: {
     *     // ... data to create a ProductVariant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductVariant we want to update
     *   }
     * })
     */
    upsert<T extends ProductVariantUpsertArgs>(args: SelectSubset<T, ProductVariantUpsertArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProductVariants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductVariantCountArgs} args - Arguments to filter ProductVariants to count.
     * @example
     * // Count the number of ProductVariants
     * const count = await prisma.productVariant.count({
     *   where: {
     *     // ... the filter for the ProductVariants we want to count
     *   }
     * })
    **/
    count<T extends ProductVariantCountArgs>(
      args?: Subset<T, ProductVariantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductVariantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductVariant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductVariantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductVariantAggregateArgs>(args: Subset<T, ProductVariantAggregateArgs>): Prisma.PrismaPromise<GetProductVariantAggregateType<T>>

    /**
     * Group by ProductVariant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductVariantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductVariantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductVariantGroupByArgs['orderBy'] }
        : { orderBy?: ProductVariantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductVariantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductVariantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductVariant model
   */
  readonly fields: ProductVariantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductVariant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductVariantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    prices<T extends ProductVariant$pricesArgs<ExtArgs> = {}>(args?: Subset<T, ProductVariant$pricesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPricePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductVariant model
   */
  interface ProductVariantFieldRefs {
    readonly id: FieldRef<"ProductVariant", 'String'>
    readonly product_id: FieldRef<"ProductVariant", 'String'>
    readonly name: FieldRef<"ProductVariant", 'String'>
    readonly download_link: FieldRef<"ProductVariant", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProductVariant findUnique
   */
  export type ProductVariantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    /**
     * Filter, which ProductVariant to fetch.
     */
    where: ProductVariantWhereUniqueInput
  }

  /**
   * ProductVariant findUniqueOrThrow
   */
  export type ProductVariantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    /**
     * Filter, which ProductVariant to fetch.
     */
    where: ProductVariantWhereUniqueInput
  }

  /**
   * ProductVariant findFirst
   */
  export type ProductVariantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    /**
     * Filter, which ProductVariant to fetch.
     */
    where?: ProductVariantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductVariants to fetch.
     */
    orderBy?: ProductVariantOrderByWithRelationInput | ProductVariantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductVariants.
     */
    cursor?: ProductVariantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductVariants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductVariants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductVariants.
     */
    distinct?: ProductVariantScalarFieldEnum | ProductVariantScalarFieldEnum[]
  }

  /**
   * ProductVariant findFirstOrThrow
   */
  export type ProductVariantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    /**
     * Filter, which ProductVariant to fetch.
     */
    where?: ProductVariantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductVariants to fetch.
     */
    orderBy?: ProductVariantOrderByWithRelationInput | ProductVariantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductVariants.
     */
    cursor?: ProductVariantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductVariants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductVariants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductVariants.
     */
    distinct?: ProductVariantScalarFieldEnum | ProductVariantScalarFieldEnum[]
  }

  /**
   * ProductVariant findMany
   */
  export type ProductVariantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    /**
     * Filter, which ProductVariants to fetch.
     */
    where?: ProductVariantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductVariants to fetch.
     */
    orderBy?: ProductVariantOrderByWithRelationInput | ProductVariantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductVariants.
     */
    cursor?: ProductVariantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductVariants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductVariants.
     */
    skip?: number
    distinct?: ProductVariantScalarFieldEnum | ProductVariantScalarFieldEnum[]
  }

  /**
   * ProductVariant create
   */
  export type ProductVariantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductVariant.
     */
    data: XOR<ProductVariantCreateInput, ProductVariantUncheckedCreateInput>
  }

  /**
   * ProductVariant createMany
   */
  export type ProductVariantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductVariants.
     */
    data: ProductVariantCreateManyInput | ProductVariantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProductVariant createManyAndReturn
   */
  export type ProductVariantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * The data used to create many ProductVariants.
     */
    data: ProductVariantCreateManyInput | ProductVariantCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductVariant update
   */
  export type ProductVariantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductVariant.
     */
    data: XOR<ProductVariantUpdateInput, ProductVariantUncheckedUpdateInput>
    /**
     * Choose, which ProductVariant to update.
     */
    where: ProductVariantWhereUniqueInput
  }

  /**
   * ProductVariant updateMany
   */
  export type ProductVariantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductVariants.
     */
    data: XOR<ProductVariantUpdateManyMutationInput, ProductVariantUncheckedUpdateManyInput>
    /**
     * Filter which ProductVariants to update
     */
    where?: ProductVariantWhereInput
    /**
     * Limit how many ProductVariants to update.
     */
    limit?: number
  }

  /**
   * ProductVariant updateManyAndReturn
   */
  export type ProductVariantUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * The data used to update ProductVariants.
     */
    data: XOR<ProductVariantUpdateManyMutationInput, ProductVariantUncheckedUpdateManyInput>
    /**
     * Filter which ProductVariants to update
     */
    where?: ProductVariantWhereInput
    /**
     * Limit how many ProductVariants to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductVariant upsert
   */
  export type ProductVariantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductVariant to update in case it exists.
     */
    where: ProductVariantWhereUniqueInput
    /**
     * In case the ProductVariant found by the `where` argument doesn't exist, create a new ProductVariant with this data.
     */
    create: XOR<ProductVariantCreateInput, ProductVariantUncheckedCreateInput>
    /**
     * In case the ProductVariant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductVariantUpdateInput, ProductVariantUncheckedUpdateInput>
  }

  /**
   * ProductVariant delete
   */
  export type ProductVariantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    /**
     * Filter which ProductVariant to delete.
     */
    where: ProductVariantWhereUniqueInput
  }

  /**
   * ProductVariant deleteMany
   */
  export type ProductVariantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductVariants to delete
     */
    where?: ProductVariantWhereInput
    /**
     * Limit how many ProductVariants to delete.
     */
    limit?: number
  }

  /**
   * ProductVariant.prices
   */
  export type ProductVariant$pricesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPrice
     */
    select?: ProductPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPrice
     */
    omit?: ProductPriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPriceInclude<ExtArgs> | null
    where?: ProductPriceWhereInput
    orderBy?: ProductPriceOrderByWithRelationInput | ProductPriceOrderByWithRelationInput[]
    cursor?: ProductPriceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductPriceScalarFieldEnum | ProductPriceScalarFieldEnum[]
  }

  /**
   * ProductVariant without action
   */
  export type ProductVariantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
  }


  /**
   * Model ProductPrice
   */

  export type AggregateProductPrice = {
    _count: ProductPriceCountAggregateOutputType | null
    _avg: ProductPriceAvgAggregateOutputType | null
    _sum: ProductPriceSumAggregateOutputType | null
    _min: ProductPriceMinAggregateOutputType | null
    _max: ProductPriceMaxAggregateOutputType | null
  }

  export type ProductPriceAvgAggregateOutputType = {
    price: number | null
  }

  export type ProductPriceSumAggregateOutputType = {
    price: number | null
  }

  export type ProductPriceMinAggregateOutputType = {
    id: string | null
    variant_id: string | null
    currency_code: $Enums.CurrencyCode | null
    price: number | null
  }

  export type ProductPriceMaxAggregateOutputType = {
    id: string | null
    variant_id: string | null
    currency_code: $Enums.CurrencyCode | null
    price: number | null
  }

  export type ProductPriceCountAggregateOutputType = {
    id: number
    variant_id: number
    currency_code: number
    price: number
    _all: number
  }


  export type ProductPriceAvgAggregateInputType = {
    price?: true
  }

  export type ProductPriceSumAggregateInputType = {
    price?: true
  }

  export type ProductPriceMinAggregateInputType = {
    id?: true
    variant_id?: true
    currency_code?: true
    price?: true
  }

  export type ProductPriceMaxAggregateInputType = {
    id?: true
    variant_id?: true
    currency_code?: true
    price?: true
  }

  export type ProductPriceCountAggregateInputType = {
    id?: true
    variant_id?: true
    currency_code?: true
    price?: true
    _all?: true
  }

  export type ProductPriceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductPrice to aggregate.
     */
    where?: ProductPriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductPrices to fetch.
     */
    orderBy?: ProductPriceOrderByWithRelationInput | ProductPriceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductPriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductPrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductPrices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductPrices
    **/
    _count?: true | ProductPriceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductPriceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductPriceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductPriceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductPriceMaxAggregateInputType
  }

  export type GetProductPriceAggregateType<T extends ProductPriceAggregateArgs> = {
        [P in keyof T & keyof AggregateProductPrice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductPrice[P]>
      : GetScalarType<T[P], AggregateProductPrice[P]>
  }




  export type ProductPriceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductPriceWhereInput
    orderBy?: ProductPriceOrderByWithAggregationInput | ProductPriceOrderByWithAggregationInput[]
    by: ProductPriceScalarFieldEnum[] | ProductPriceScalarFieldEnum
    having?: ProductPriceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductPriceCountAggregateInputType | true
    _avg?: ProductPriceAvgAggregateInputType
    _sum?: ProductPriceSumAggregateInputType
    _min?: ProductPriceMinAggregateInputType
    _max?: ProductPriceMaxAggregateInputType
  }

  export type ProductPriceGroupByOutputType = {
    id: string
    variant_id: string
    currency_code: $Enums.CurrencyCode
    price: number
    _count: ProductPriceCountAggregateOutputType | null
    _avg: ProductPriceAvgAggregateOutputType | null
    _sum: ProductPriceSumAggregateOutputType | null
    _min: ProductPriceMinAggregateOutputType | null
    _max: ProductPriceMaxAggregateOutputType | null
  }

  type GetProductPriceGroupByPayload<T extends ProductPriceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductPriceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductPriceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductPriceGroupByOutputType[P]>
            : GetScalarType<T[P], ProductPriceGroupByOutputType[P]>
        }
      >
    >


  export type ProductPriceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    variant_id?: boolean
    currency_code?: boolean
    price?: boolean
    variant?: boolean | ProductVariantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productPrice"]>

  export type ProductPriceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    variant_id?: boolean
    currency_code?: boolean
    price?: boolean
    variant?: boolean | ProductVariantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productPrice"]>

  export type ProductPriceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    variant_id?: boolean
    currency_code?: boolean
    price?: boolean
    variant?: boolean | ProductVariantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productPrice"]>

  export type ProductPriceSelectScalar = {
    id?: boolean
    variant_id?: boolean
    currency_code?: boolean
    price?: boolean
  }

  export type ProductPriceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "variant_id" | "currency_code" | "price", ExtArgs["result"]["productPrice"]>
  export type ProductPriceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    variant?: boolean | ProductVariantDefaultArgs<ExtArgs>
  }
  export type ProductPriceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    variant?: boolean | ProductVariantDefaultArgs<ExtArgs>
  }
  export type ProductPriceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    variant?: boolean | ProductVariantDefaultArgs<ExtArgs>
  }

  export type $ProductPricePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductPrice"
    objects: {
      variant: Prisma.$ProductVariantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      variant_id: string
      currency_code: $Enums.CurrencyCode
      price: number
    }, ExtArgs["result"]["productPrice"]>
    composites: {}
  }

  type ProductPriceGetPayload<S extends boolean | null | undefined | ProductPriceDefaultArgs> = $Result.GetResult<Prisma.$ProductPricePayload, S>

  type ProductPriceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductPriceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductPriceCountAggregateInputType | true
    }

  export interface ProductPriceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductPrice'], meta: { name: 'ProductPrice' } }
    /**
     * Find zero or one ProductPrice that matches the filter.
     * @param {ProductPriceFindUniqueArgs} args - Arguments to find a ProductPrice
     * @example
     * // Get one ProductPrice
     * const productPrice = await prisma.productPrice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductPriceFindUniqueArgs>(args: SelectSubset<T, ProductPriceFindUniqueArgs<ExtArgs>>): Prisma__ProductPriceClient<$Result.GetResult<Prisma.$ProductPricePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProductPrice that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductPriceFindUniqueOrThrowArgs} args - Arguments to find a ProductPrice
     * @example
     * // Get one ProductPrice
     * const productPrice = await prisma.productPrice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductPriceFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductPriceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductPriceClient<$Result.GetResult<Prisma.$ProductPricePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductPrice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductPriceFindFirstArgs} args - Arguments to find a ProductPrice
     * @example
     * // Get one ProductPrice
     * const productPrice = await prisma.productPrice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductPriceFindFirstArgs>(args?: SelectSubset<T, ProductPriceFindFirstArgs<ExtArgs>>): Prisma__ProductPriceClient<$Result.GetResult<Prisma.$ProductPricePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductPrice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductPriceFindFirstOrThrowArgs} args - Arguments to find a ProductPrice
     * @example
     * // Get one ProductPrice
     * const productPrice = await prisma.productPrice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductPriceFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductPriceFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductPriceClient<$Result.GetResult<Prisma.$ProductPricePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductPrices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductPriceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductPrices
     * const productPrices = await prisma.productPrice.findMany()
     * 
     * // Get first 10 ProductPrices
     * const productPrices = await prisma.productPrice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productPriceWithIdOnly = await prisma.productPrice.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductPriceFindManyArgs>(args?: SelectSubset<T, ProductPriceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPricePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProductPrice.
     * @param {ProductPriceCreateArgs} args - Arguments to create a ProductPrice.
     * @example
     * // Create one ProductPrice
     * const ProductPrice = await prisma.productPrice.create({
     *   data: {
     *     // ... data to create a ProductPrice
     *   }
     * })
     * 
     */
    create<T extends ProductPriceCreateArgs>(args: SelectSubset<T, ProductPriceCreateArgs<ExtArgs>>): Prisma__ProductPriceClient<$Result.GetResult<Prisma.$ProductPricePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProductPrices.
     * @param {ProductPriceCreateManyArgs} args - Arguments to create many ProductPrices.
     * @example
     * // Create many ProductPrices
     * const productPrice = await prisma.productPrice.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductPriceCreateManyArgs>(args?: SelectSubset<T, ProductPriceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProductPrices and returns the data saved in the database.
     * @param {ProductPriceCreateManyAndReturnArgs} args - Arguments to create many ProductPrices.
     * @example
     * // Create many ProductPrices
     * const productPrice = await prisma.productPrice.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProductPrices and only return the `id`
     * const productPriceWithIdOnly = await prisma.productPrice.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductPriceCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductPriceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPricePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProductPrice.
     * @param {ProductPriceDeleteArgs} args - Arguments to delete one ProductPrice.
     * @example
     * // Delete one ProductPrice
     * const ProductPrice = await prisma.productPrice.delete({
     *   where: {
     *     // ... filter to delete one ProductPrice
     *   }
     * })
     * 
     */
    delete<T extends ProductPriceDeleteArgs>(args: SelectSubset<T, ProductPriceDeleteArgs<ExtArgs>>): Prisma__ProductPriceClient<$Result.GetResult<Prisma.$ProductPricePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProductPrice.
     * @param {ProductPriceUpdateArgs} args - Arguments to update one ProductPrice.
     * @example
     * // Update one ProductPrice
     * const productPrice = await prisma.productPrice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductPriceUpdateArgs>(args: SelectSubset<T, ProductPriceUpdateArgs<ExtArgs>>): Prisma__ProductPriceClient<$Result.GetResult<Prisma.$ProductPricePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProductPrices.
     * @param {ProductPriceDeleteManyArgs} args - Arguments to filter ProductPrices to delete.
     * @example
     * // Delete a few ProductPrices
     * const { count } = await prisma.productPrice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductPriceDeleteManyArgs>(args?: SelectSubset<T, ProductPriceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductPrices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductPriceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductPrices
     * const productPrice = await prisma.productPrice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductPriceUpdateManyArgs>(args: SelectSubset<T, ProductPriceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductPrices and returns the data updated in the database.
     * @param {ProductPriceUpdateManyAndReturnArgs} args - Arguments to update many ProductPrices.
     * @example
     * // Update many ProductPrices
     * const productPrice = await prisma.productPrice.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProductPrices and only return the `id`
     * const productPriceWithIdOnly = await prisma.productPrice.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductPriceUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductPriceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPricePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProductPrice.
     * @param {ProductPriceUpsertArgs} args - Arguments to update or create a ProductPrice.
     * @example
     * // Update or create a ProductPrice
     * const productPrice = await prisma.productPrice.upsert({
     *   create: {
     *     // ... data to create a ProductPrice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductPrice we want to update
     *   }
     * })
     */
    upsert<T extends ProductPriceUpsertArgs>(args: SelectSubset<T, ProductPriceUpsertArgs<ExtArgs>>): Prisma__ProductPriceClient<$Result.GetResult<Prisma.$ProductPricePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProductPrices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductPriceCountArgs} args - Arguments to filter ProductPrices to count.
     * @example
     * // Count the number of ProductPrices
     * const count = await prisma.productPrice.count({
     *   where: {
     *     // ... the filter for the ProductPrices we want to count
     *   }
     * })
    **/
    count<T extends ProductPriceCountArgs>(
      args?: Subset<T, ProductPriceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductPriceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductPrice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductPriceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductPriceAggregateArgs>(args: Subset<T, ProductPriceAggregateArgs>): Prisma.PrismaPromise<GetProductPriceAggregateType<T>>

    /**
     * Group by ProductPrice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductPriceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductPriceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductPriceGroupByArgs['orderBy'] }
        : { orderBy?: ProductPriceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductPriceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductPriceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductPrice model
   */
  readonly fields: ProductPriceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductPrice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductPriceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    variant<T extends ProductVariantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductVariantDefaultArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductPrice model
   */
  interface ProductPriceFieldRefs {
    readonly id: FieldRef<"ProductPrice", 'String'>
    readonly variant_id: FieldRef<"ProductPrice", 'String'>
    readonly currency_code: FieldRef<"ProductPrice", 'CurrencyCode'>
    readonly price: FieldRef<"ProductPrice", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ProductPrice findUnique
   */
  export type ProductPriceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPrice
     */
    select?: ProductPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPrice
     */
    omit?: ProductPriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPriceInclude<ExtArgs> | null
    /**
     * Filter, which ProductPrice to fetch.
     */
    where: ProductPriceWhereUniqueInput
  }

  /**
   * ProductPrice findUniqueOrThrow
   */
  export type ProductPriceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPrice
     */
    select?: ProductPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPrice
     */
    omit?: ProductPriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPriceInclude<ExtArgs> | null
    /**
     * Filter, which ProductPrice to fetch.
     */
    where: ProductPriceWhereUniqueInput
  }

  /**
   * ProductPrice findFirst
   */
  export type ProductPriceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPrice
     */
    select?: ProductPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPrice
     */
    omit?: ProductPriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPriceInclude<ExtArgs> | null
    /**
     * Filter, which ProductPrice to fetch.
     */
    where?: ProductPriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductPrices to fetch.
     */
    orderBy?: ProductPriceOrderByWithRelationInput | ProductPriceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductPrices.
     */
    cursor?: ProductPriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductPrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductPrices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductPrices.
     */
    distinct?: ProductPriceScalarFieldEnum | ProductPriceScalarFieldEnum[]
  }

  /**
   * ProductPrice findFirstOrThrow
   */
  export type ProductPriceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPrice
     */
    select?: ProductPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPrice
     */
    omit?: ProductPriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPriceInclude<ExtArgs> | null
    /**
     * Filter, which ProductPrice to fetch.
     */
    where?: ProductPriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductPrices to fetch.
     */
    orderBy?: ProductPriceOrderByWithRelationInput | ProductPriceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductPrices.
     */
    cursor?: ProductPriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductPrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductPrices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductPrices.
     */
    distinct?: ProductPriceScalarFieldEnum | ProductPriceScalarFieldEnum[]
  }

  /**
   * ProductPrice findMany
   */
  export type ProductPriceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPrice
     */
    select?: ProductPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPrice
     */
    omit?: ProductPriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPriceInclude<ExtArgs> | null
    /**
     * Filter, which ProductPrices to fetch.
     */
    where?: ProductPriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductPrices to fetch.
     */
    orderBy?: ProductPriceOrderByWithRelationInput | ProductPriceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductPrices.
     */
    cursor?: ProductPriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductPrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductPrices.
     */
    skip?: number
    distinct?: ProductPriceScalarFieldEnum | ProductPriceScalarFieldEnum[]
  }

  /**
   * ProductPrice create
   */
  export type ProductPriceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPrice
     */
    select?: ProductPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPrice
     */
    omit?: ProductPriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPriceInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductPrice.
     */
    data: XOR<ProductPriceCreateInput, ProductPriceUncheckedCreateInput>
  }

  /**
   * ProductPrice createMany
   */
  export type ProductPriceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductPrices.
     */
    data: ProductPriceCreateManyInput | ProductPriceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProductPrice createManyAndReturn
   */
  export type ProductPriceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPrice
     */
    select?: ProductPriceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPrice
     */
    omit?: ProductPriceOmit<ExtArgs> | null
    /**
     * The data used to create many ProductPrices.
     */
    data: ProductPriceCreateManyInput | ProductPriceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPriceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductPrice update
   */
  export type ProductPriceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPrice
     */
    select?: ProductPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPrice
     */
    omit?: ProductPriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPriceInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductPrice.
     */
    data: XOR<ProductPriceUpdateInput, ProductPriceUncheckedUpdateInput>
    /**
     * Choose, which ProductPrice to update.
     */
    where: ProductPriceWhereUniqueInput
  }

  /**
   * ProductPrice updateMany
   */
  export type ProductPriceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductPrices.
     */
    data: XOR<ProductPriceUpdateManyMutationInput, ProductPriceUncheckedUpdateManyInput>
    /**
     * Filter which ProductPrices to update
     */
    where?: ProductPriceWhereInput
    /**
     * Limit how many ProductPrices to update.
     */
    limit?: number
  }

  /**
   * ProductPrice updateManyAndReturn
   */
  export type ProductPriceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPrice
     */
    select?: ProductPriceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPrice
     */
    omit?: ProductPriceOmit<ExtArgs> | null
    /**
     * The data used to update ProductPrices.
     */
    data: XOR<ProductPriceUpdateManyMutationInput, ProductPriceUncheckedUpdateManyInput>
    /**
     * Filter which ProductPrices to update
     */
    where?: ProductPriceWhereInput
    /**
     * Limit how many ProductPrices to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPriceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductPrice upsert
   */
  export type ProductPriceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPrice
     */
    select?: ProductPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPrice
     */
    omit?: ProductPriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPriceInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductPrice to update in case it exists.
     */
    where: ProductPriceWhereUniqueInput
    /**
     * In case the ProductPrice found by the `where` argument doesn't exist, create a new ProductPrice with this data.
     */
    create: XOR<ProductPriceCreateInput, ProductPriceUncheckedCreateInput>
    /**
     * In case the ProductPrice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductPriceUpdateInput, ProductPriceUncheckedUpdateInput>
  }

  /**
   * ProductPrice delete
   */
  export type ProductPriceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPrice
     */
    select?: ProductPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPrice
     */
    omit?: ProductPriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPriceInclude<ExtArgs> | null
    /**
     * Filter which ProductPrice to delete.
     */
    where: ProductPriceWhereUniqueInput
  }

  /**
   * ProductPrice deleteMany
   */
  export type ProductPriceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductPrices to delete
     */
    where?: ProductPriceWhereInput
    /**
     * Limit how many ProductPrices to delete.
     */
    limit?: number
  }

  /**
   * ProductPrice without action
   */
  export type ProductPriceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductPrice
     */
    select?: ProductPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductPrice
     */
    omit?: ProductPriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductPriceInclude<ExtArgs> | null
  }


  /**
   * Model TermsOfService
   */

  export type AggregateTermsOfService = {
    _count: TermsOfServiceCountAggregateOutputType | null
    _avg: TermsOfServiceAvgAggregateOutputType | null
    _sum: TermsOfServiceSumAggregateOutputType | null
    _min: TermsOfServiceMinAggregateOutputType | null
    _max: TermsOfServiceMaxAggregateOutputType | null
  }

  export type TermsOfServiceAvgAggregateOutputType = {
    id: number | null
    created_at: number | null
    updated_at: number | null
  }

  export type TermsOfServiceSumAggregateOutputType = {
    id: number | null
    created_at: bigint | null
    updated_at: bigint | null
  }

  export type TermsOfServiceMinAggregateOutputType = {
    id: number | null
    created_at: bigint | null
    updated_at: bigint | null
  }

  export type TermsOfServiceMaxAggregateOutputType = {
    id: number | null
    created_at: bigint | null
    updated_at: bigint | null
  }

  export type TermsOfServiceCountAggregateOutputType = {
    id: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type TermsOfServiceAvgAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
  }

  export type TermsOfServiceSumAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
  }

  export type TermsOfServiceMinAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
  }

  export type TermsOfServiceMaxAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
  }

  export type TermsOfServiceCountAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type TermsOfServiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TermsOfService to aggregate.
     */
    where?: TermsOfServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TermsOfServices to fetch.
     */
    orderBy?: TermsOfServiceOrderByWithRelationInput | TermsOfServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TermsOfServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TermsOfServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TermsOfServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TermsOfServices
    **/
    _count?: true | TermsOfServiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TermsOfServiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TermsOfServiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TermsOfServiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TermsOfServiceMaxAggregateInputType
  }

  export type GetTermsOfServiceAggregateType<T extends TermsOfServiceAggregateArgs> = {
        [P in keyof T & keyof AggregateTermsOfService]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTermsOfService[P]>
      : GetScalarType<T[P], AggregateTermsOfService[P]>
  }




  export type TermsOfServiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TermsOfServiceWhereInput
    orderBy?: TermsOfServiceOrderByWithAggregationInput | TermsOfServiceOrderByWithAggregationInput[]
    by: TermsOfServiceScalarFieldEnum[] | TermsOfServiceScalarFieldEnum
    having?: TermsOfServiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TermsOfServiceCountAggregateInputType | true
    _avg?: TermsOfServiceAvgAggregateInputType
    _sum?: TermsOfServiceSumAggregateInputType
    _min?: TermsOfServiceMinAggregateInputType
    _max?: TermsOfServiceMaxAggregateInputType
  }

  export type TermsOfServiceGroupByOutputType = {
    id: number
    created_at: bigint
    updated_at: bigint
    _count: TermsOfServiceCountAggregateOutputType | null
    _avg: TermsOfServiceAvgAggregateOutputType | null
    _sum: TermsOfServiceSumAggregateOutputType | null
    _min: TermsOfServiceMinAggregateOutputType | null
    _max: TermsOfServiceMaxAggregateOutputType | null
  }

  type GetTermsOfServiceGroupByPayload<T extends TermsOfServiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TermsOfServiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TermsOfServiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TermsOfServiceGroupByOutputType[P]>
            : GetScalarType<T[P], TermsOfServiceGroupByOutputType[P]>
        }
      >
    >


  export type TermsOfServiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    translations?: boolean | TermsOfService$translationsArgs<ExtArgs>
    _count?: boolean | TermsOfServiceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["termsOfService"]>

  export type TermsOfServiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["termsOfService"]>

  export type TermsOfServiceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["termsOfService"]>

  export type TermsOfServiceSelectScalar = {
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type TermsOfServiceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "created_at" | "updated_at", ExtArgs["result"]["termsOfService"]>
  export type TermsOfServiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    translations?: boolean | TermsOfService$translationsArgs<ExtArgs>
    _count?: boolean | TermsOfServiceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TermsOfServiceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type TermsOfServiceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TermsOfServicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TermsOfService"
    objects: {
      translations: Prisma.$TermsOfServiceTranslationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      created_at: bigint
      updated_at: bigint
    }, ExtArgs["result"]["termsOfService"]>
    composites: {}
  }

  type TermsOfServiceGetPayload<S extends boolean | null | undefined | TermsOfServiceDefaultArgs> = $Result.GetResult<Prisma.$TermsOfServicePayload, S>

  type TermsOfServiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TermsOfServiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TermsOfServiceCountAggregateInputType | true
    }

  export interface TermsOfServiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TermsOfService'], meta: { name: 'TermsOfService' } }
    /**
     * Find zero or one TermsOfService that matches the filter.
     * @param {TermsOfServiceFindUniqueArgs} args - Arguments to find a TermsOfService
     * @example
     * // Get one TermsOfService
     * const termsOfService = await prisma.termsOfService.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TermsOfServiceFindUniqueArgs>(args: SelectSubset<T, TermsOfServiceFindUniqueArgs<ExtArgs>>): Prisma__TermsOfServiceClient<$Result.GetResult<Prisma.$TermsOfServicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TermsOfService that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TermsOfServiceFindUniqueOrThrowArgs} args - Arguments to find a TermsOfService
     * @example
     * // Get one TermsOfService
     * const termsOfService = await prisma.termsOfService.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TermsOfServiceFindUniqueOrThrowArgs>(args: SelectSubset<T, TermsOfServiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TermsOfServiceClient<$Result.GetResult<Prisma.$TermsOfServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TermsOfService that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermsOfServiceFindFirstArgs} args - Arguments to find a TermsOfService
     * @example
     * // Get one TermsOfService
     * const termsOfService = await prisma.termsOfService.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TermsOfServiceFindFirstArgs>(args?: SelectSubset<T, TermsOfServiceFindFirstArgs<ExtArgs>>): Prisma__TermsOfServiceClient<$Result.GetResult<Prisma.$TermsOfServicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TermsOfService that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermsOfServiceFindFirstOrThrowArgs} args - Arguments to find a TermsOfService
     * @example
     * // Get one TermsOfService
     * const termsOfService = await prisma.termsOfService.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TermsOfServiceFindFirstOrThrowArgs>(args?: SelectSubset<T, TermsOfServiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__TermsOfServiceClient<$Result.GetResult<Prisma.$TermsOfServicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TermsOfServices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermsOfServiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TermsOfServices
     * const termsOfServices = await prisma.termsOfService.findMany()
     * 
     * // Get first 10 TermsOfServices
     * const termsOfServices = await prisma.termsOfService.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const termsOfServiceWithIdOnly = await prisma.termsOfService.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TermsOfServiceFindManyArgs>(args?: SelectSubset<T, TermsOfServiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TermsOfServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TermsOfService.
     * @param {TermsOfServiceCreateArgs} args - Arguments to create a TermsOfService.
     * @example
     * // Create one TermsOfService
     * const TermsOfService = await prisma.termsOfService.create({
     *   data: {
     *     // ... data to create a TermsOfService
     *   }
     * })
     * 
     */
    create<T extends TermsOfServiceCreateArgs>(args: SelectSubset<T, TermsOfServiceCreateArgs<ExtArgs>>): Prisma__TermsOfServiceClient<$Result.GetResult<Prisma.$TermsOfServicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TermsOfServices.
     * @param {TermsOfServiceCreateManyArgs} args - Arguments to create many TermsOfServices.
     * @example
     * // Create many TermsOfServices
     * const termsOfService = await prisma.termsOfService.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TermsOfServiceCreateManyArgs>(args?: SelectSubset<T, TermsOfServiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TermsOfServices and returns the data saved in the database.
     * @param {TermsOfServiceCreateManyAndReturnArgs} args - Arguments to create many TermsOfServices.
     * @example
     * // Create many TermsOfServices
     * const termsOfService = await prisma.termsOfService.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TermsOfServices and only return the `id`
     * const termsOfServiceWithIdOnly = await prisma.termsOfService.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TermsOfServiceCreateManyAndReturnArgs>(args?: SelectSubset<T, TermsOfServiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TermsOfServicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TermsOfService.
     * @param {TermsOfServiceDeleteArgs} args - Arguments to delete one TermsOfService.
     * @example
     * // Delete one TermsOfService
     * const TermsOfService = await prisma.termsOfService.delete({
     *   where: {
     *     // ... filter to delete one TermsOfService
     *   }
     * })
     * 
     */
    delete<T extends TermsOfServiceDeleteArgs>(args: SelectSubset<T, TermsOfServiceDeleteArgs<ExtArgs>>): Prisma__TermsOfServiceClient<$Result.GetResult<Prisma.$TermsOfServicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TermsOfService.
     * @param {TermsOfServiceUpdateArgs} args - Arguments to update one TermsOfService.
     * @example
     * // Update one TermsOfService
     * const termsOfService = await prisma.termsOfService.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TermsOfServiceUpdateArgs>(args: SelectSubset<T, TermsOfServiceUpdateArgs<ExtArgs>>): Prisma__TermsOfServiceClient<$Result.GetResult<Prisma.$TermsOfServicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TermsOfServices.
     * @param {TermsOfServiceDeleteManyArgs} args - Arguments to filter TermsOfServices to delete.
     * @example
     * // Delete a few TermsOfServices
     * const { count } = await prisma.termsOfService.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TermsOfServiceDeleteManyArgs>(args?: SelectSubset<T, TermsOfServiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TermsOfServices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermsOfServiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TermsOfServices
     * const termsOfService = await prisma.termsOfService.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TermsOfServiceUpdateManyArgs>(args: SelectSubset<T, TermsOfServiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TermsOfServices and returns the data updated in the database.
     * @param {TermsOfServiceUpdateManyAndReturnArgs} args - Arguments to update many TermsOfServices.
     * @example
     * // Update many TermsOfServices
     * const termsOfService = await prisma.termsOfService.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TermsOfServices and only return the `id`
     * const termsOfServiceWithIdOnly = await prisma.termsOfService.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TermsOfServiceUpdateManyAndReturnArgs>(args: SelectSubset<T, TermsOfServiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TermsOfServicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TermsOfService.
     * @param {TermsOfServiceUpsertArgs} args - Arguments to update or create a TermsOfService.
     * @example
     * // Update or create a TermsOfService
     * const termsOfService = await prisma.termsOfService.upsert({
     *   create: {
     *     // ... data to create a TermsOfService
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TermsOfService we want to update
     *   }
     * })
     */
    upsert<T extends TermsOfServiceUpsertArgs>(args: SelectSubset<T, TermsOfServiceUpsertArgs<ExtArgs>>): Prisma__TermsOfServiceClient<$Result.GetResult<Prisma.$TermsOfServicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TermsOfServices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermsOfServiceCountArgs} args - Arguments to filter TermsOfServices to count.
     * @example
     * // Count the number of TermsOfServices
     * const count = await prisma.termsOfService.count({
     *   where: {
     *     // ... the filter for the TermsOfServices we want to count
     *   }
     * })
    **/
    count<T extends TermsOfServiceCountArgs>(
      args?: Subset<T, TermsOfServiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TermsOfServiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TermsOfService.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermsOfServiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TermsOfServiceAggregateArgs>(args: Subset<T, TermsOfServiceAggregateArgs>): Prisma.PrismaPromise<GetTermsOfServiceAggregateType<T>>

    /**
     * Group by TermsOfService.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermsOfServiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TermsOfServiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TermsOfServiceGroupByArgs['orderBy'] }
        : { orderBy?: TermsOfServiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TermsOfServiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTermsOfServiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TermsOfService model
   */
  readonly fields: TermsOfServiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TermsOfService.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TermsOfServiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    translations<T extends TermsOfService$translationsArgs<ExtArgs> = {}>(args?: Subset<T, TermsOfService$translationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TermsOfServiceTranslationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TermsOfService model
   */
  interface TermsOfServiceFieldRefs {
    readonly id: FieldRef<"TermsOfService", 'Int'>
    readonly created_at: FieldRef<"TermsOfService", 'BigInt'>
    readonly updated_at: FieldRef<"TermsOfService", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * TermsOfService findUnique
   */
  export type TermsOfServiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermsOfService
     */
    select?: TermsOfServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TermsOfService
     */
    omit?: TermsOfServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermsOfServiceInclude<ExtArgs> | null
    /**
     * Filter, which TermsOfService to fetch.
     */
    where: TermsOfServiceWhereUniqueInput
  }

  /**
   * TermsOfService findUniqueOrThrow
   */
  export type TermsOfServiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermsOfService
     */
    select?: TermsOfServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TermsOfService
     */
    omit?: TermsOfServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermsOfServiceInclude<ExtArgs> | null
    /**
     * Filter, which TermsOfService to fetch.
     */
    where: TermsOfServiceWhereUniqueInput
  }

  /**
   * TermsOfService findFirst
   */
  export type TermsOfServiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermsOfService
     */
    select?: TermsOfServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TermsOfService
     */
    omit?: TermsOfServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermsOfServiceInclude<ExtArgs> | null
    /**
     * Filter, which TermsOfService to fetch.
     */
    where?: TermsOfServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TermsOfServices to fetch.
     */
    orderBy?: TermsOfServiceOrderByWithRelationInput | TermsOfServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TermsOfServices.
     */
    cursor?: TermsOfServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TermsOfServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TermsOfServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TermsOfServices.
     */
    distinct?: TermsOfServiceScalarFieldEnum | TermsOfServiceScalarFieldEnum[]
  }

  /**
   * TermsOfService findFirstOrThrow
   */
  export type TermsOfServiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermsOfService
     */
    select?: TermsOfServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TermsOfService
     */
    omit?: TermsOfServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermsOfServiceInclude<ExtArgs> | null
    /**
     * Filter, which TermsOfService to fetch.
     */
    where?: TermsOfServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TermsOfServices to fetch.
     */
    orderBy?: TermsOfServiceOrderByWithRelationInput | TermsOfServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TermsOfServices.
     */
    cursor?: TermsOfServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TermsOfServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TermsOfServices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TermsOfServices.
     */
    distinct?: TermsOfServiceScalarFieldEnum | TermsOfServiceScalarFieldEnum[]
  }

  /**
   * TermsOfService findMany
   */
  export type TermsOfServiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermsOfService
     */
    select?: TermsOfServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TermsOfService
     */
    omit?: TermsOfServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermsOfServiceInclude<ExtArgs> | null
    /**
     * Filter, which TermsOfServices to fetch.
     */
    where?: TermsOfServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TermsOfServices to fetch.
     */
    orderBy?: TermsOfServiceOrderByWithRelationInput | TermsOfServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TermsOfServices.
     */
    cursor?: TermsOfServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TermsOfServices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TermsOfServices.
     */
    skip?: number
    distinct?: TermsOfServiceScalarFieldEnum | TermsOfServiceScalarFieldEnum[]
  }

  /**
   * TermsOfService create
   */
  export type TermsOfServiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermsOfService
     */
    select?: TermsOfServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TermsOfService
     */
    omit?: TermsOfServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermsOfServiceInclude<ExtArgs> | null
    /**
     * The data needed to create a TermsOfService.
     */
    data: XOR<TermsOfServiceCreateInput, TermsOfServiceUncheckedCreateInput>
  }

  /**
   * TermsOfService createMany
   */
  export type TermsOfServiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TermsOfServices.
     */
    data: TermsOfServiceCreateManyInput | TermsOfServiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TermsOfService createManyAndReturn
   */
  export type TermsOfServiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermsOfService
     */
    select?: TermsOfServiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TermsOfService
     */
    omit?: TermsOfServiceOmit<ExtArgs> | null
    /**
     * The data used to create many TermsOfServices.
     */
    data: TermsOfServiceCreateManyInput | TermsOfServiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TermsOfService update
   */
  export type TermsOfServiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermsOfService
     */
    select?: TermsOfServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TermsOfService
     */
    omit?: TermsOfServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermsOfServiceInclude<ExtArgs> | null
    /**
     * The data needed to update a TermsOfService.
     */
    data: XOR<TermsOfServiceUpdateInput, TermsOfServiceUncheckedUpdateInput>
    /**
     * Choose, which TermsOfService to update.
     */
    where: TermsOfServiceWhereUniqueInput
  }

  /**
   * TermsOfService updateMany
   */
  export type TermsOfServiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TermsOfServices.
     */
    data: XOR<TermsOfServiceUpdateManyMutationInput, TermsOfServiceUncheckedUpdateManyInput>
    /**
     * Filter which TermsOfServices to update
     */
    where?: TermsOfServiceWhereInput
    /**
     * Limit how many TermsOfServices to update.
     */
    limit?: number
  }

  /**
   * TermsOfService updateManyAndReturn
   */
  export type TermsOfServiceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermsOfService
     */
    select?: TermsOfServiceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TermsOfService
     */
    omit?: TermsOfServiceOmit<ExtArgs> | null
    /**
     * The data used to update TermsOfServices.
     */
    data: XOR<TermsOfServiceUpdateManyMutationInput, TermsOfServiceUncheckedUpdateManyInput>
    /**
     * Filter which TermsOfServices to update
     */
    where?: TermsOfServiceWhereInput
    /**
     * Limit how many TermsOfServices to update.
     */
    limit?: number
  }

  /**
   * TermsOfService upsert
   */
  export type TermsOfServiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermsOfService
     */
    select?: TermsOfServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TermsOfService
     */
    omit?: TermsOfServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermsOfServiceInclude<ExtArgs> | null
    /**
     * The filter to search for the TermsOfService to update in case it exists.
     */
    where: TermsOfServiceWhereUniqueInput
    /**
     * In case the TermsOfService found by the `where` argument doesn't exist, create a new TermsOfService with this data.
     */
    create: XOR<TermsOfServiceCreateInput, TermsOfServiceUncheckedCreateInput>
    /**
     * In case the TermsOfService was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TermsOfServiceUpdateInput, TermsOfServiceUncheckedUpdateInput>
  }

  /**
   * TermsOfService delete
   */
  export type TermsOfServiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermsOfService
     */
    select?: TermsOfServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TermsOfService
     */
    omit?: TermsOfServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermsOfServiceInclude<ExtArgs> | null
    /**
     * Filter which TermsOfService to delete.
     */
    where: TermsOfServiceWhereUniqueInput
  }

  /**
   * TermsOfService deleteMany
   */
  export type TermsOfServiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TermsOfServices to delete
     */
    where?: TermsOfServiceWhereInput
    /**
     * Limit how many TermsOfServices to delete.
     */
    limit?: number
  }

  /**
   * TermsOfService.translations
   */
  export type TermsOfService$translationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermsOfServiceTranslation
     */
    select?: TermsOfServiceTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TermsOfServiceTranslation
     */
    omit?: TermsOfServiceTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermsOfServiceTranslationInclude<ExtArgs> | null
    where?: TermsOfServiceTranslationWhereInput
    orderBy?: TermsOfServiceTranslationOrderByWithRelationInput | TermsOfServiceTranslationOrderByWithRelationInput[]
    cursor?: TermsOfServiceTranslationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TermsOfServiceTranslationScalarFieldEnum | TermsOfServiceTranslationScalarFieldEnum[]
  }

  /**
   * TermsOfService without action
   */
  export type TermsOfServiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermsOfService
     */
    select?: TermsOfServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TermsOfService
     */
    omit?: TermsOfServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermsOfServiceInclude<ExtArgs> | null
  }


  /**
   * Model TermsOfServiceTranslation
   */

  export type AggregateTermsOfServiceTranslation = {
    _count: TermsOfServiceTranslationCountAggregateOutputType | null
    _avg: TermsOfServiceTranslationAvgAggregateOutputType | null
    _sum: TermsOfServiceTranslationSumAggregateOutputType | null
    _min: TermsOfServiceTranslationMinAggregateOutputType | null
    _max: TermsOfServiceTranslationMaxAggregateOutputType | null
  }

  export type TermsOfServiceTranslationAvgAggregateOutputType = {
    id: number | null
    terms_of_service_id: number | null
  }

  export type TermsOfServiceTranslationSumAggregateOutputType = {
    id: number | null
    terms_of_service_id: number | null
  }

  export type TermsOfServiceTranslationMinAggregateOutputType = {
    id: number | null
    terms_of_service_id: number | null
    language: $Enums.Language | null
    content: string | null
  }

  export type TermsOfServiceTranslationMaxAggregateOutputType = {
    id: number | null
    terms_of_service_id: number | null
    language: $Enums.Language | null
    content: string | null
  }

  export type TermsOfServiceTranslationCountAggregateOutputType = {
    id: number
    terms_of_service_id: number
    language: number
    content: number
    _all: number
  }


  export type TermsOfServiceTranslationAvgAggregateInputType = {
    id?: true
    terms_of_service_id?: true
  }

  export type TermsOfServiceTranslationSumAggregateInputType = {
    id?: true
    terms_of_service_id?: true
  }

  export type TermsOfServiceTranslationMinAggregateInputType = {
    id?: true
    terms_of_service_id?: true
    language?: true
    content?: true
  }

  export type TermsOfServiceTranslationMaxAggregateInputType = {
    id?: true
    terms_of_service_id?: true
    language?: true
    content?: true
  }

  export type TermsOfServiceTranslationCountAggregateInputType = {
    id?: true
    terms_of_service_id?: true
    language?: true
    content?: true
    _all?: true
  }

  export type TermsOfServiceTranslationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TermsOfServiceTranslation to aggregate.
     */
    where?: TermsOfServiceTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TermsOfServiceTranslations to fetch.
     */
    orderBy?: TermsOfServiceTranslationOrderByWithRelationInput | TermsOfServiceTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TermsOfServiceTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TermsOfServiceTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TermsOfServiceTranslations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TermsOfServiceTranslations
    **/
    _count?: true | TermsOfServiceTranslationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TermsOfServiceTranslationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TermsOfServiceTranslationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TermsOfServiceTranslationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TermsOfServiceTranslationMaxAggregateInputType
  }

  export type GetTermsOfServiceTranslationAggregateType<T extends TermsOfServiceTranslationAggregateArgs> = {
        [P in keyof T & keyof AggregateTermsOfServiceTranslation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTermsOfServiceTranslation[P]>
      : GetScalarType<T[P], AggregateTermsOfServiceTranslation[P]>
  }




  export type TermsOfServiceTranslationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TermsOfServiceTranslationWhereInput
    orderBy?: TermsOfServiceTranslationOrderByWithAggregationInput | TermsOfServiceTranslationOrderByWithAggregationInput[]
    by: TermsOfServiceTranslationScalarFieldEnum[] | TermsOfServiceTranslationScalarFieldEnum
    having?: TermsOfServiceTranslationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TermsOfServiceTranslationCountAggregateInputType | true
    _avg?: TermsOfServiceTranslationAvgAggregateInputType
    _sum?: TermsOfServiceTranslationSumAggregateInputType
    _min?: TermsOfServiceTranslationMinAggregateInputType
    _max?: TermsOfServiceTranslationMaxAggregateInputType
  }

  export type TermsOfServiceTranslationGroupByOutputType = {
    id: number
    terms_of_service_id: number
    language: $Enums.Language
    content: string
    _count: TermsOfServiceTranslationCountAggregateOutputType | null
    _avg: TermsOfServiceTranslationAvgAggregateOutputType | null
    _sum: TermsOfServiceTranslationSumAggregateOutputType | null
    _min: TermsOfServiceTranslationMinAggregateOutputType | null
    _max: TermsOfServiceTranslationMaxAggregateOutputType | null
  }

  type GetTermsOfServiceTranslationGroupByPayload<T extends TermsOfServiceTranslationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TermsOfServiceTranslationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TermsOfServiceTranslationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TermsOfServiceTranslationGroupByOutputType[P]>
            : GetScalarType<T[P], TermsOfServiceTranslationGroupByOutputType[P]>
        }
      >
    >


  export type TermsOfServiceTranslationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    terms_of_service_id?: boolean
    language?: boolean
    content?: boolean
    terms_of_service?: boolean | TermsOfServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["termsOfServiceTranslation"]>

  export type TermsOfServiceTranslationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    terms_of_service_id?: boolean
    language?: boolean
    content?: boolean
    terms_of_service?: boolean | TermsOfServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["termsOfServiceTranslation"]>

  export type TermsOfServiceTranslationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    terms_of_service_id?: boolean
    language?: boolean
    content?: boolean
    terms_of_service?: boolean | TermsOfServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["termsOfServiceTranslation"]>

  export type TermsOfServiceTranslationSelectScalar = {
    id?: boolean
    terms_of_service_id?: boolean
    language?: boolean
    content?: boolean
  }

  export type TermsOfServiceTranslationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "terms_of_service_id" | "language" | "content", ExtArgs["result"]["termsOfServiceTranslation"]>
  export type TermsOfServiceTranslationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    terms_of_service?: boolean | TermsOfServiceDefaultArgs<ExtArgs>
  }
  export type TermsOfServiceTranslationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    terms_of_service?: boolean | TermsOfServiceDefaultArgs<ExtArgs>
  }
  export type TermsOfServiceTranslationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    terms_of_service?: boolean | TermsOfServiceDefaultArgs<ExtArgs>
  }

  export type $TermsOfServiceTranslationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TermsOfServiceTranslation"
    objects: {
      terms_of_service: Prisma.$TermsOfServicePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      terms_of_service_id: number
      language: $Enums.Language
      content: string
    }, ExtArgs["result"]["termsOfServiceTranslation"]>
    composites: {}
  }

  type TermsOfServiceTranslationGetPayload<S extends boolean | null | undefined | TermsOfServiceTranslationDefaultArgs> = $Result.GetResult<Prisma.$TermsOfServiceTranslationPayload, S>

  type TermsOfServiceTranslationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TermsOfServiceTranslationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TermsOfServiceTranslationCountAggregateInputType | true
    }

  export interface TermsOfServiceTranslationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TermsOfServiceTranslation'], meta: { name: 'TermsOfServiceTranslation' } }
    /**
     * Find zero or one TermsOfServiceTranslation that matches the filter.
     * @param {TermsOfServiceTranslationFindUniqueArgs} args - Arguments to find a TermsOfServiceTranslation
     * @example
     * // Get one TermsOfServiceTranslation
     * const termsOfServiceTranslation = await prisma.termsOfServiceTranslation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TermsOfServiceTranslationFindUniqueArgs>(args: SelectSubset<T, TermsOfServiceTranslationFindUniqueArgs<ExtArgs>>): Prisma__TermsOfServiceTranslationClient<$Result.GetResult<Prisma.$TermsOfServiceTranslationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TermsOfServiceTranslation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TermsOfServiceTranslationFindUniqueOrThrowArgs} args - Arguments to find a TermsOfServiceTranslation
     * @example
     * // Get one TermsOfServiceTranslation
     * const termsOfServiceTranslation = await prisma.termsOfServiceTranslation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TermsOfServiceTranslationFindUniqueOrThrowArgs>(args: SelectSubset<T, TermsOfServiceTranslationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TermsOfServiceTranslationClient<$Result.GetResult<Prisma.$TermsOfServiceTranslationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TermsOfServiceTranslation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermsOfServiceTranslationFindFirstArgs} args - Arguments to find a TermsOfServiceTranslation
     * @example
     * // Get one TermsOfServiceTranslation
     * const termsOfServiceTranslation = await prisma.termsOfServiceTranslation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TermsOfServiceTranslationFindFirstArgs>(args?: SelectSubset<T, TermsOfServiceTranslationFindFirstArgs<ExtArgs>>): Prisma__TermsOfServiceTranslationClient<$Result.GetResult<Prisma.$TermsOfServiceTranslationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TermsOfServiceTranslation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermsOfServiceTranslationFindFirstOrThrowArgs} args - Arguments to find a TermsOfServiceTranslation
     * @example
     * // Get one TermsOfServiceTranslation
     * const termsOfServiceTranslation = await prisma.termsOfServiceTranslation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TermsOfServiceTranslationFindFirstOrThrowArgs>(args?: SelectSubset<T, TermsOfServiceTranslationFindFirstOrThrowArgs<ExtArgs>>): Prisma__TermsOfServiceTranslationClient<$Result.GetResult<Prisma.$TermsOfServiceTranslationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TermsOfServiceTranslations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermsOfServiceTranslationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TermsOfServiceTranslations
     * const termsOfServiceTranslations = await prisma.termsOfServiceTranslation.findMany()
     * 
     * // Get first 10 TermsOfServiceTranslations
     * const termsOfServiceTranslations = await prisma.termsOfServiceTranslation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const termsOfServiceTranslationWithIdOnly = await prisma.termsOfServiceTranslation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TermsOfServiceTranslationFindManyArgs>(args?: SelectSubset<T, TermsOfServiceTranslationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TermsOfServiceTranslationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TermsOfServiceTranslation.
     * @param {TermsOfServiceTranslationCreateArgs} args - Arguments to create a TermsOfServiceTranslation.
     * @example
     * // Create one TermsOfServiceTranslation
     * const TermsOfServiceTranslation = await prisma.termsOfServiceTranslation.create({
     *   data: {
     *     // ... data to create a TermsOfServiceTranslation
     *   }
     * })
     * 
     */
    create<T extends TermsOfServiceTranslationCreateArgs>(args: SelectSubset<T, TermsOfServiceTranslationCreateArgs<ExtArgs>>): Prisma__TermsOfServiceTranslationClient<$Result.GetResult<Prisma.$TermsOfServiceTranslationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TermsOfServiceTranslations.
     * @param {TermsOfServiceTranslationCreateManyArgs} args - Arguments to create many TermsOfServiceTranslations.
     * @example
     * // Create many TermsOfServiceTranslations
     * const termsOfServiceTranslation = await prisma.termsOfServiceTranslation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TermsOfServiceTranslationCreateManyArgs>(args?: SelectSubset<T, TermsOfServiceTranslationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TermsOfServiceTranslations and returns the data saved in the database.
     * @param {TermsOfServiceTranslationCreateManyAndReturnArgs} args - Arguments to create many TermsOfServiceTranslations.
     * @example
     * // Create many TermsOfServiceTranslations
     * const termsOfServiceTranslation = await prisma.termsOfServiceTranslation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TermsOfServiceTranslations and only return the `id`
     * const termsOfServiceTranslationWithIdOnly = await prisma.termsOfServiceTranslation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TermsOfServiceTranslationCreateManyAndReturnArgs>(args?: SelectSubset<T, TermsOfServiceTranslationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TermsOfServiceTranslationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TermsOfServiceTranslation.
     * @param {TermsOfServiceTranslationDeleteArgs} args - Arguments to delete one TermsOfServiceTranslation.
     * @example
     * // Delete one TermsOfServiceTranslation
     * const TermsOfServiceTranslation = await prisma.termsOfServiceTranslation.delete({
     *   where: {
     *     // ... filter to delete one TermsOfServiceTranslation
     *   }
     * })
     * 
     */
    delete<T extends TermsOfServiceTranslationDeleteArgs>(args: SelectSubset<T, TermsOfServiceTranslationDeleteArgs<ExtArgs>>): Prisma__TermsOfServiceTranslationClient<$Result.GetResult<Prisma.$TermsOfServiceTranslationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TermsOfServiceTranslation.
     * @param {TermsOfServiceTranslationUpdateArgs} args - Arguments to update one TermsOfServiceTranslation.
     * @example
     * // Update one TermsOfServiceTranslation
     * const termsOfServiceTranslation = await prisma.termsOfServiceTranslation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TermsOfServiceTranslationUpdateArgs>(args: SelectSubset<T, TermsOfServiceTranslationUpdateArgs<ExtArgs>>): Prisma__TermsOfServiceTranslationClient<$Result.GetResult<Prisma.$TermsOfServiceTranslationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TermsOfServiceTranslations.
     * @param {TermsOfServiceTranslationDeleteManyArgs} args - Arguments to filter TermsOfServiceTranslations to delete.
     * @example
     * // Delete a few TermsOfServiceTranslations
     * const { count } = await prisma.termsOfServiceTranslation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TermsOfServiceTranslationDeleteManyArgs>(args?: SelectSubset<T, TermsOfServiceTranslationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TermsOfServiceTranslations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermsOfServiceTranslationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TermsOfServiceTranslations
     * const termsOfServiceTranslation = await prisma.termsOfServiceTranslation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TermsOfServiceTranslationUpdateManyArgs>(args: SelectSubset<T, TermsOfServiceTranslationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TermsOfServiceTranslations and returns the data updated in the database.
     * @param {TermsOfServiceTranslationUpdateManyAndReturnArgs} args - Arguments to update many TermsOfServiceTranslations.
     * @example
     * // Update many TermsOfServiceTranslations
     * const termsOfServiceTranslation = await prisma.termsOfServiceTranslation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TermsOfServiceTranslations and only return the `id`
     * const termsOfServiceTranslationWithIdOnly = await prisma.termsOfServiceTranslation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TermsOfServiceTranslationUpdateManyAndReturnArgs>(args: SelectSubset<T, TermsOfServiceTranslationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TermsOfServiceTranslationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TermsOfServiceTranslation.
     * @param {TermsOfServiceTranslationUpsertArgs} args - Arguments to update or create a TermsOfServiceTranslation.
     * @example
     * // Update or create a TermsOfServiceTranslation
     * const termsOfServiceTranslation = await prisma.termsOfServiceTranslation.upsert({
     *   create: {
     *     // ... data to create a TermsOfServiceTranslation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TermsOfServiceTranslation we want to update
     *   }
     * })
     */
    upsert<T extends TermsOfServiceTranslationUpsertArgs>(args: SelectSubset<T, TermsOfServiceTranslationUpsertArgs<ExtArgs>>): Prisma__TermsOfServiceTranslationClient<$Result.GetResult<Prisma.$TermsOfServiceTranslationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TermsOfServiceTranslations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermsOfServiceTranslationCountArgs} args - Arguments to filter TermsOfServiceTranslations to count.
     * @example
     * // Count the number of TermsOfServiceTranslations
     * const count = await prisma.termsOfServiceTranslation.count({
     *   where: {
     *     // ... the filter for the TermsOfServiceTranslations we want to count
     *   }
     * })
    **/
    count<T extends TermsOfServiceTranslationCountArgs>(
      args?: Subset<T, TermsOfServiceTranslationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TermsOfServiceTranslationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TermsOfServiceTranslation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermsOfServiceTranslationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TermsOfServiceTranslationAggregateArgs>(args: Subset<T, TermsOfServiceTranslationAggregateArgs>): Prisma.PrismaPromise<GetTermsOfServiceTranslationAggregateType<T>>

    /**
     * Group by TermsOfServiceTranslation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermsOfServiceTranslationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TermsOfServiceTranslationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TermsOfServiceTranslationGroupByArgs['orderBy'] }
        : { orderBy?: TermsOfServiceTranslationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TermsOfServiceTranslationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTermsOfServiceTranslationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TermsOfServiceTranslation model
   */
  readonly fields: TermsOfServiceTranslationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TermsOfServiceTranslation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TermsOfServiceTranslationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    terms_of_service<T extends TermsOfServiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TermsOfServiceDefaultArgs<ExtArgs>>): Prisma__TermsOfServiceClient<$Result.GetResult<Prisma.$TermsOfServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TermsOfServiceTranslation model
   */
  interface TermsOfServiceTranslationFieldRefs {
    readonly id: FieldRef<"TermsOfServiceTranslation", 'Int'>
    readonly terms_of_service_id: FieldRef<"TermsOfServiceTranslation", 'Int'>
    readonly language: FieldRef<"TermsOfServiceTranslation", 'Language'>
    readonly content: FieldRef<"TermsOfServiceTranslation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TermsOfServiceTranslation findUnique
   */
  export type TermsOfServiceTranslationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermsOfServiceTranslation
     */
    select?: TermsOfServiceTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TermsOfServiceTranslation
     */
    omit?: TermsOfServiceTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermsOfServiceTranslationInclude<ExtArgs> | null
    /**
     * Filter, which TermsOfServiceTranslation to fetch.
     */
    where: TermsOfServiceTranslationWhereUniqueInput
  }

  /**
   * TermsOfServiceTranslation findUniqueOrThrow
   */
  export type TermsOfServiceTranslationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermsOfServiceTranslation
     */
    select?: TermsOfServiceTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TermsOfServiceTranslation
     */
    omit?: TermsOfServiceTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermsOfServiceTranslationInclude<ExtArgs> | null
    /**
     * Filter, which TermsOfServiceTranslation to fetch.
     */
    where: TermsOfServiceTranslationWhereUniqueInput
  }

  /**
   * TermsOfServiceTranslation findFirst
   */
  export type TermsOfServiceTranslationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermsOfServiceTranslation
     */
    select?: TermsOfServiceTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TermsOfServiceTranslation
     */
    omit?: TermsOfServiceTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermsOfServiceTranslationInclude<ExtArgs> | null
    /**
     * Filter, which TermsOfServiceTranslation to fetch.
     */
    where?: TermsOfServiceTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TermsOfServiceTranslations to fetch.
     */
    orderBy?: TermsOfServiceTranslationOrderByWithRelationInput | TermsOfServiceTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TermsOfServiceTranslations.
     */
    cursor?: TermsOfServiceTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TermsOfServiceTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TermsOfServiceTranslations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TermsOfServiceTranslations.
     */
    distinct?: TermsOfServiceTranslationScalarFieldEnum | TermsOfServiceTranslationScalarFieldEnum[]
  }

  /**
   * TermsOfServiceTranslation findFirstOrThrow
   */
  export type TermsOfServiceTranslationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermsOfServiceTranslation
     */
    select?: TermsOfServiceTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TermsOfServiceTranslation
     */
    omit?: TermsOfServiceTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermsOfServiceTranslationInclude<ExtArgs> | null
    /**
     * Filter, which TermsOfServiceTranslation to fetch.
     */
    where?: TermsOfServiceTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TermsOfServiceTranslations to fetch.
     */
    orderBy?: TermsOfServiceTranslationOrderByWithRelationInput | TermsOfServiceTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TermsOfServiceTranslations.
     */
    cursor?: TermsOfServiceTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TermsOfServiceTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TermsOfServiceTranslations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TermsOfServiceTranslations.
     */
    distinct?: TermsOfServiceTranslationScalarFieldEnum | TermsOfServiceTranslationScalarFieldEnum[]
  }

  /**
   * TermsOfServiceTranslation findMany
   */
  export type TermsOfServiceTranslationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermsOfServiceTranslation
     */
    select?: TermsOfServiceTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TermsOfServiceTranslation
     */
    omit?: TermsOfServiceTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermsOfServiceTranslationInclude<ExtArgs> | null
    /**
     * Filter, which TermsOfServiceTranslations to fetch.
     */
    where?: TermsOfServiceTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TermsOfServiceTranslations to fetch.
     */
    orderBy?: TermsOfServiceTranslationOrderByWithRelationInput | TermsOfServiceTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TermsOfServiceTranslations.
     */
    cursor?: TermsOfServiceTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TermsOfServiceTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TermsOfServiceTranslations.
     */
    skip?: number
    distinct?: TermsOfServiceTranslationScalarFieldEnum | TermsOfServiceTranslationScalarFieldEnum[]
  }

  /**
   * TermsOfServiceTranslation create
   */
  export type TermsOfServiceTranslationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermsOfServiceTranslation
     */
    select?: TermsOfServiceTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TermsOfServiceTranslation
     */
    omit?: TermsOfServiceTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermsOfServiceTranslationInclude<ExtArgs> | null
    /**
     * The data needed to create a TermsOfServiceTranslation.
     */
    data: XOR<TermsOfServiceTranslationCreateInput, TermsOfServiceTranslationUncheckedCreateInput>
  }

  /**
   * TermsOfServiceTranslation createMany
   */
  export type TermsOfServiceTranslationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TermsOfServiceTranslations.
     */
    data: TermsOfServiceTranslationCreateManyInput | TermsOfServiceTranslationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TermsOfServiceTranslation createManyAndReturn
   */
  export type TermsOfServiceTranslationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermsOfServiceTranslation
     */
    select?: TermsOfServiceTranslationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TermsOfServiceTranslation
     */
    omit?: TermsOfServiceTranslationOmit<ExtArgs> | null
    /**
     * The data used to create many TermsOfServiceTranslations.
     */
    data: TermsOfServiceTranslationCreateManyInput | TermsOfServiceTranslationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermsOfServiceTranslationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TermsOfServiceTranslation update
   */
  export type TermsOfServiceTranslationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermsOfServiceTranslation
     */
    select?: TermsOfServiceTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TermsOfServiceTranslation
     */
    omit?: TermsOfServiceTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermsOfServiceTranslationInclude<ExtArgs> | null
    /**
     * The data needed to update a TermsOfServiceTranslation.
     */
    data: XOR<TermsOfServiceTranslationUpdateInput, TermsOfServiceTranslationUncheckedUpdateInput>
    /**
     * Choose, which TermsOfServiceTranslation to update.
     */
    where: TermsOfServiceTranslationWhereUniqueInput
  }

  /**
   * TermsOfServiceTranslation updateMany
   */
  export type TermsOfServiceTranslationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TermsOfServiceTranslations.
     */
    data: XOR<TermsOfServiceTranslationUpdateManyMutationInput, TermsOfServiceTranslationUncheckedUpdateManyInput>
    /**
     * Filter which TermsOfServiceTranslations to update
     */
    where?: TermsOfServiceTranslationWhereInput
    /**
     * Limit how many TermsOfServiceTranslations to update.
     */
    limit?: number
  }

  /**
   * TermsOfServiceTranslation updateManyAndReturn
   */
  export type TermsOfServiceTranslationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermsOfServiceTranslation
     */
    select?: TermsOfServiceTranslationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TermsOfServiceTranslation
     */
    omit?: TermsOfServiceTranslationOmit<ExtArgs> | null
    /**
     * The data used to update TermsOfServiceTranslations.
     */
    data: XOR<TermsOfServiceTranslationUpdateManyMutationInput, TermsOfServiceTranslationUncheckedUpdateManyInput>
    /**
     * Filter which TermsOfServiceTranslations to update
     */
    where?: TermsOfServiceTranslationWhereInput
    /**
     * Limit how many TermsOfServiceTranslations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermsOfServiceTranslationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TermsOfServiceTranslation upsert
   */
  export type TermsOfServiceTranslationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermsOfServiceTranslation
     */
    select?: TermsOfServiceTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TermsOfServiceTranslation
     */
    omit?: TermsOfServiceTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermsOfServiceTranslationInclude<ExtArgs> | null
    /**
     * The filter to search for the TermsOfServiceTranslation to update in case it exists.
     */
    where: TermsOfServiceTranslationWhereUniqueInput
    /**
     * In case the TermsOfServiceTranslation found by the `where` argument doesn't exist, create a new TermsOfServiceTranslation with this data.
     */
    create: XOR<TermsOfServiceTranslationCreateInput, TermsOfServiceTranslationUncheckedCreateInput>
    /**
     * In case the TermsOfServiceTranslation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TermsOfServiceTranslationUpdateInput, TermsOfServiceTranslationUncheckedUpdateInput>
  }

  /**
   * TermsOfServiceTranslation delete
   */
  export type TermsOfServiceTranslationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermsOfServiceTranslation
     */
    select?: TermsOfServiceTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TermsOfServiceTranslation
     */
    omit?: TermsOfServiceTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermsOfServiceTranslationInclude<ExtArgs> | null
    /**
     * Filter which TermsOfServiceTranslation to delete.
     */
    where: TermsOfServiceTranslationWhereUniqueInput
  }

  /**
   * TermsOfServiceTranslation deleteMany
   */
  export type TermsOfServiceTranslationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TermsOfServiceTranslations to delete
     */
    where?: TermsOfServiceTranslationWhereInput
    /**
     * Limit how many TermsOfServiceTranslations to delete.
     */
    limit?: number
  }

  /**
   * TermsOfServiceTranslation without action
   */
  export type TermsOfServiceTranslationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermsOfServiceTranslation
     */
    select?: TermsOfServiceTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TermsOfServiceTranslation
     */
    omit?: TermsOfServiceTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermsOfServiceTranslationInclude<ExtArgs> | null
  }


  /**
   * Model PrivacyPolicy
   */

  export type AggregatePrivacyPolicy = {
    _count: PrivacyPolicyCountAggregateOutputType | null
    _avg: PrivacyPolicyAvgAggregateOutputType | null
    _sum: PrivacyPolicySumAggregateOutputType | null
    _min: PrivacyPolicyMinAggregateOutputType | null
    _max: PrivacyPolicyMaxAggregateOutputType | null
  }

  export type PrivacyPolicyAvgAggregateOutputType = {
    id: number | null
    created_at: number | null
    updated_at: number | null
  }

  export type PrivacyPolicySumAggregateOutputType = {
    id: number | null
    created_at: bigint | null
    updated_at: bigint | null
  }

  export type PrivacyPolicyMinAggregateOutputType = {
    id: number | null
    created_at: bigint | null
    updated_at: bigint | null
  }

  export type PrivacyPolicyMaxAggregateOutputType = {
    id: number | null
    created_at: bigint | null
    updated_at: bigint | null
  }

  export type PrivacyPolicyCountAggregateOutputType = {
    id: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type PrivacyPolicyAvgAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
  }

  export type PrivacyPolicySumAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
  }

  export type PrivacyPolicyMinAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
  }

  export type PrivacyPolicyMaxAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
  }

  export type PrivacyPolicyCountAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type PrivacyPolicyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PrivacyPolicy to aggregate.
     */
    where?: PrivacyPolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrivacyPolicies to fetch.
     */
    orderBy?: PrivacyPolicyOrderByWithRelationInput | PrivacyPolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PrivacyPolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrivacyPolicies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrivacyPolicies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PrivacyPolicies
    **/
    _count?: true | PrivacyPolicyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PrivacyPolicyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PrivacyPolicySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PrivacyPolicyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PrivacyPolicyMaxAggregateInputType
  }

  export type GetPrivacyPolicyAggregateType<T extends PrivacyPolicyAggregateArgs> = {
        [P in keyof T & keyof AggregatePrivacyPolicy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePrivacyPolicy[P]>
      : GetScalarType<T[P], AggregatePrivacyPolicy[P]>
  }




  export type PrivacyPolicyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrivacyPolicyWhereInput
    orderBy?: PrivacyPolicyOrderByWithAggregationInput | PrivacyPolicyOrderByWithAggregationInput[]
    by: PrivacyPolicyScalarFieldEnum[] | PrivacyPolicyScalarFieldEnum
    having?: PrivacyPolicyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PrivacyPolicyCountAggregateInputType | true
    _avg?: PrivacyPolicyAvgAggregateInputType
    _sum?: PrivacyPolicySumAggregateInputType
    _min?: PrivacyPolicyMinAggregateInputType
    _max?: PrivacyPolicyMaxAggregateInputType
  }

  export type PrivacyPolicyGroupByOutputType = {
    id: number
    created_at: bigint
    updated_at: bigint
    _count: PrivacyPolicyCountAggregateOutputType | null
    _avg: PrivacyPolicyAvgAggregateOutputType | null
    _sum: PrivacyPolicySumAggregateOutputType | null
    _min: PrivacyPolicyMinAggregateOutputType | null
    _max: PrivacyPolicyMaxAggregateOutputType | null
  }

  type GetPrivacyPolicyGroupByPayload<T extends PrivacyPolicyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PrivacyPolicyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PrivacyPolicyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PrivacyPolicyGroupByOutputType[P]>
            : GetScalarType<T[P], PrivacyPolicyGroupByOutputType[P]>
        }
      >
    >


  export type PrivacyPolicySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    translations?: boolean | PrivacyPolicy$translationsArgs<ExtArgs>
    _count?: boolean | PrivacyPolicyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["privacyPolicy"]>

  export type PrivacyPolicySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["privacyPolicy"]>

  export type PrivacyPolicySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["privacyPolicy"]>

  export type PrivacyPolicySelectScalar = {
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type PrivacyPolicyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "created_at" | "updated_at", ExtArgs["result"]["privacyPolicy"]>
  export type PrivacyPolicyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    translations?: boolean | PrivacyPolicy$translationsArgs<ExtArgs>
    _count?: boolean | PrivacyPolicyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PrivacyPolicyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PrivacyPolicyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PrivacyPolicyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PrivacyPolicy"
    objects: {
      translations: Prisma.$PrivacyPolicyTranslationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      created_at: bigint
      updated_at: bigint
    }, ExtArgs["result"]["privacyPolicy"]>
    composites: {}
  }

  type PrivacyPolicyGetPayload<S extends boolean | null | undefined | PrivacyPolicyDefaultArgs> = $Result.GetResult<Prisma.$PrivacyPolicyPayload, S>

  type PrivacyPolicyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PrivacyPolicyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PrivacyPolicyCountAggregateInputType | true
    }

  export interface PrivacyPolicyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PrivacyPolicy'], meta: { name: 'PrivacyPolicy' } }
    /**
     * Find zero or one PrivacyPolicy that matches the filter.
     * @param {PrivacyPolicyFindUniqueArgs} args - Arguments to find a PrivacyPolicy
     * @example
     * // Get one PrivacyPolicy
     * const privacyPolicy = await prisma.privacyPolicy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PrivacyPolicyFindUniqueArgs>(args: SelectSubset<T, PrivacyPolicyFindUniqueArgs<ExtArgs>>): Prisma__PrivacyPolicyClient<$Result.GetResult<Prisma.$PrivacyPolicyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PrivacyPolicy that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PrivacyPolicyFindUniqueOrThrowArgs} args - Arguments to find a PrivacyPolicy
     * @example
     * // Get one PrivacyPolicy
     * const privacyPolicy = await prisma.privacyPolicy.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PrivacyPolicyFindUniqueOrThrowArgs>(args: SelectSubset<T, PrivacyPolicyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PrivacyPolicyClient<$Result.GetResult<Prisma.$PrivacyPolicyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PrivacyPolicy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivacyPolicyFindFirstArgs} args - Arguments to find a PrivacyPolicy
     * @example
     * // Get one PrivacyPolicy
     * const privacyPolicy = await prisma.privacyPolicy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PrivacyPolicyFindFirstArgs>(args?: SelectSubset<T, PrivacyPolicyFindFirstArgs<ExtArgs>>): Prisma__PrivacyPolicyClient<$Result.GetResult<Prisma.$PrivacyPolicyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PrivacyPolicy that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivacyPolicyFindFirstOrThrowArgs} args - Arguments to find a PrivacyPolicy
     * @example
     * // Get one PrivacyPolicy
     * const privacyPolicy = await prisma.privacyPolicy.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PrivacyPolicyFindFirstOrThrowArgs>(args?: SelectSubset<T, PrivacyPolicyFindFirstOrThrowArgs<ExtArgs>>): Prisma__PrivacyPolicyClient<$Result.GetResult<Prisma.$PrivacyPolicyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PrivacyPolicies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivacyPolicyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PrivacyPolicies
     * const privacyPolicies = await prisma.privacyPolicy.findMany()
     * 
     * // Get first 10 PrivacyPolicies
     * const privacyPolicies = await prisma.privacyPolicy.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const privacyPolicyWithIdOnly = await prisma.privacyPolicy.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PrivacyPolicyFindManyArgs>(args?: SelectSubset<T, PrivacyPolicyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrivacyPolicyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PrivacyPolicy.
     * @param {PrivacyPolicyCreateArgs} args - Arguments to create a PrivacyPolicy.
     * @example
     * // Create one PrivacyPolicy
     * const PrivacyPolicy = await prisma.privacyPolicy.create({
     *   data: {
     *     // ... data to create a PrivacyPolicy
     *   }
     * })
     * 
     */
    create<T extends PrivacyPolicyCreateArgs>(args: SelectSubset<T, PrivacyPolicyCreateArgs<ExtArgs>>): Prisma__PrivacyPolicyClient<$Result.GetResult<Prisma.$PrivacyPolicyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PrivacyPolicies.
     * @param {PrivacyPolicyCreateManyArgs} args - Arguments to create many PrivacyPolicies.
     * @example
     * // Create many PrivacyPolicies
     * const privacyPolicy = await prisma.privacyPolicy.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PrivacyPolicyCreateManyArgs>(args?: SelectSubset<T, PrivacyPolicyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PrivacyPolicies and returns the data saved in the database.
     * @param {PrivacyPolicyCreateManyAndReturnArgs} args - Arguments to create many PrivacyPolicies.
     * @example
     * // Create many PrivacyPolicies
     * const privacyPolicy = await prisma.privacyPolicy.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PrivacyPolicies and only return the `id`
     * const privacyPolicyWithIdOnly = await prisma.privacyPolicy.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PrivacyPolicyCreateManyAndReturnArgs>(args?: SelectSubset<T, PrivacyPolicyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrivacyPolicyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PrivacyPolicy.
     * @param {PrivacyPolicyDeleteArgs} args - Arguments to delete one PrivacyPolicy.
     * @example
     * // Delete one PrivacyPolicy
     * const PrivacyPolicy = await prisma.privacyPolicy.delete({
     *   where: {
     *     // ... filter to delete one PrivacyPolicy
     *   }
     * })
     * 
     */
    delete<T extends PrivacyPolicyDeleteArgs>(args: SelectSubset<T, PrivacyPolicyDeleteArgs<ExtArgs>>): Prisma__PrivacyPolicyClient<$Result.GetResult<Prisma.$PrivacyPolicyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PrivacyPolicy.
     * @param {PrivacyPolicyUpdateArgs} args - Arguments to update one PrivacyPolicy.
     * @example
     * // Update one PrivacyPolicy
     * const privacyPolicy = await prisma.privacyPolicy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PrivacyPolicyUpdateArgs>(args: SelectSubset<T, PrivacyPolicyUpdateArgs<ExtArgs>>): Prisma__PrivacyPolicyClient<$Result.GetResult<Prisma.$PrivacyPolicyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PrivacyPolicies.
     * @param {PrivacyPolicyDeleteManyArgs} args - Arguments to filter PrivacyPolicies to delete.
     * @example
     * // Delete a few PrivacyPolicies
     * const { count } = await prisma.privacyPolicy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PrivacyPolicyDeleteManyArgs>(args?: SelectSubset<T, PrivacyPolicyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PrivacyPolicies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivacyPolicyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PrivacyPolicies
     * const privacyPolicy = await prisma.privacyPolicy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PrivacyPolicyUpdateManyArgs>(args: SelectSubset<T, PrivacyPolicyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PrivacyPolicies and returns the data updated in the database.
     * @param {PrivacyPolicyUpdateManyAndReturnArgs} args - Arguments to update many PrivacyPolicies.
     * @example
     * // Update many PrivacyPolicies
     * const privacyPolicy = await prisma.privacyPolicy.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PrivacyPolicies and only return the `id`
     * const privacyPolicyWithIdOnly = await prisma.privacyPolicy.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PrivacyPolicyUpdateManyAndReturnArgs>(args: SelectSubset<T, PrivacyPolicyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrivacyPolicyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PrivacyPolicy.
     * @param {PrivacyPolicyUpsertArgs} args - Arguments to update or create a PrivacyPolicy.
     * @example
     * // Update or create a PrivacyPolicy
     * const privacyPolicy = await prisma.privacyPolicy.upsert({
     *   create: {
     *     // ... data to create a PrivacyPolicy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PrivacyPolicy we want to update
     *   }
     * })
     */
    upsert<T extends PrivacyPolicyUpsertArgs>(args: SelectSubset<T, PrivacyPolicyUpsertArgs<ExtArgs>>): Prisma__PrivacyPolicyClient<$Result.GetResult<Prisma.$PrivacyPolicyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PrivacyPolicies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivacyPolicyCountArgs} args - Arguments to filter PrivacyPolicies to count.
     * @example
     * // Count the number of PrivacyPolicies
     * const count = await prisma.privacyPolicy.count({
     *   where: {
     *     // ... the filter for the PrivacyPolicies we want to count
     *   }
     * })
    **/
    count<T extends PrivacyPolicyCountArgs>(
      args?: Subset<T, PrivacyPolicyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PrivacyPolicyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PrivacyPolicy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivacyPolicyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PrivacyPolicyAggregateArgs>(args: Subset<T, PrivacyPolicyAggregateArgs>): Prisma.PrismaPromise<GetPrivacyPolicyAggregateType<T>>

    /**
     * Group by PrivacyPolicy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivacyPolicyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PrivacyPolicyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PrivacyPolicyGroupByArgs['orderBy'] }
        : { orderBy?: PrivacyPolicyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PrivacyPolicyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPrivacyPolicyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PrivacyPolicy model
   */
  readonly fields: PrivacyPolicyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PrivacyPolicy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PrivacyPolicyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    translations<T extends PrivacyPolicy$translationsArgs<ExtArgs> = {}>(args?: Subset<T, PrivacyPolicy$translationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrivacyPolicyTranslationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PrivacyPolicy model
   */
  interface PrivacyPolicyFieldRefs {
    readonly id: FieldRef<"PrivacyPolicy", 'Int'>
    readonly created_at: FieldRef<"PrivacyPolicy", 'BigInt'>
    readonly updated_at: FieldRef<"PrivacyPolicy", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * PrivacyPolicy findUnique
   */
  export type PrivacyPolicyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivacyPolicy
     */
    select?: PrivacyPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrivacyPolicy
     */
    omit?: PrivacyPolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrivacyPolicyInclude<ExtArgs> | null
    /**
     * Filter, which PrivacyPolicy to fetch.
     */
    where: PrivacyPolicyWhereUniqueInput
  }

  /**
   * PrivacyPolicy findUniqueOrThrow
   */
  export type PrivacyPolicyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivacyPolicy
     */
    select?: PrivacyPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrivacyPolicy
     */
    omit?: PrivacyPolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrivacyPolicyInclude<ExtArgs> | null
    /**
     * Filter, which PrivacyPolicy to fetch.
     */
    where: PrivacyPolicyWhereUniqueInput
  }

  /**
   * PrivacyPolicy findFirst
   */
  export type PrivacyPolicyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivacyPolicy
     */
    select?: PrivacyPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrivacyPolicy
     */
    omit?: PrivacyPolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrivacyPolicyInclude<ExtArgs> | null
    /**
     * Filter, which PrivacyPolicy to fetch.
     */
    where?: PrivacyPolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrivacyPolicies to fetch.
     */
    orderBy?: PrivacyPolicyOrderByWithRelationInput | PrivacyPolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PrivacyPolicies.
     */
    cursor?: PrivacyPolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrivacyPolicies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrivacyPolicies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PrivacyPolicies.
     */
    distinct?: PrivacyPolicyScalarFieldEnum | PrivacyPolicyScalarFieldEnum[]
  }

  /**
   * PrivacyPolicy findFirstOrThrow
   */
  export type PrivacyPolicyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivacyPolicy
     */
    select?: PrivacyPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrivacyPolicy
     */
    omit?: PrivacyPolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrivacyPolicyInclude<ExtArgs> | null
    /**
     * Filter, which PrivacyPolicy to fetch.
     */
    where?: PrivacyPolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrivacyPolicies to fetch.
     */
    orderBy?: PrivacyPolicyOrderByWithRelationInput | PrivacyPolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PrivacyPolicies.
     */
    cursor?: PrivacyPolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrivacyPolicies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrivacyPolicies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PrivacyPolicies.
     */
    distinct?: PrivacyPolicyScalarFieldEnum | PrivacyPolicyScalarFieldEnum[]
  }

  /**
   * PrivacyPolicy findMany
   */
  export type PrivacyPolicyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivacyPolicy
     */
    select?: PrivacyPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrivacyPolicy
     */
    omit?: PrivacyPolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrivacyPolicyInclude<ExtArgs> | null
    /**
     * Filter, which PrivacyPolicies to fetch.
     */
    where?: PrivacyPolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrivacyPolicies to fetch.
     */
    orderBy?: PrivacyPolicyOrderByWithRelationInput | PrivacyPolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PrivacyPolicies.
     */
    cursor?: PrivacyPolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrivacyPolicies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrivacyPolicies.
     */
    skip?: number
    distinct?: PrivacyPolicyScalarFieldEnum | PrivacyPolicyScalarFieldEnum[]
  }

  /**
   * PrivacyPolicy create
   */
  export type PrivacyPolicyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivacyPolicy
     */
    select?: PrivacyPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrivacyPolicy
     */
    omit?: PrivacyPolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrivacyPolicyInclude<ExtArgs> | null
    /**
     * The data needed to create a PrivacyPolicy.
     */
    data: XOR<PrivacyPolicyCreateInput, PrivacyPolicyUncheckedCreateInput>
  }

  /**
   * PrivacyPolicy createMany
   */
  export type PrivacyPolicyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PrivacyPolicies.
     */
    data: PrivacyPolicyCreateManyInput | PrivacyPolicyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PrivacyPolicy createManyAndReturn
   */
  export type PrivacyPolicyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivacyPolicy
     */
    select?: PrivacyPolicySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PrivacyPolicy
     */
    omit?: PrivacyPolicyOmit<ExtArgs> | null
    /**
     * The data used to create many PrivacyPolicies.
     */
    data: PrivacyPolicyCreateManyInput | PrivacyPolicyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PrivacyPolicy update
   */
  export type PrivacyPolicyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivacyPolicy
     */
    select?: PrivacyPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrivacyPolicy
     */
    omit?: PrivacyPolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrivacyPolicyInclude<ExtArgs> | null
    /**
     * The data needed to update a PrivacyPolicy.
     */
    data: XOR<PrivacyPolicyUpdateInput, PrivacyPolicyUncheckedUpdateInput>
    /**
     * Choose, which PrivacyPolicy to update.
     */
    where: PrivacyPolicyWhereUniqueInput
  }

  /**
   * PrivacyPolicy updateMany
   */
  export type PrivacyPolicyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PrivacyPolicies.
     */
    data: XOR<PrivacyPolicyUpdateManyMutationInput, PrivacyPolicyUncheckedUpdateManyInput>
    /**
     * Filter which PrivacyPolicies to update
     */
    where?: PrivacyPolicyWhereInput
    /**
     * Limit how many PrivacyPolicies to update.
     */
    limit?: number
  }

  /**
   * PrivacyPolicy updateManyAndReturn
   */
  export type PrivacyPolicyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivacyPolicy
     */
    select?: PrivacyPolicySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PrivacyPolicy
     */
    omit?: PrivacyPolicyOmit<ExtArgs> | null
    /**
     * The data used to update PrivacyPolicies.
     */
    data: XOR<PrivacyPolicyUpdateManyMutationInput, PrivacyPolicyUncheckedUpdateManyInput>
    /**
     * Filter which PrivacyPolicies to update
     */
    where?: PrivacyPolicyWhereInput
    /**
     * Limit how many PrivacyPolicies to update.
     */
    limit?: number
  }

  /**
   * PrivacyPolicy upsert
   */
  export type PrivacyPolicyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivacyPolicy
     */
    select?: PrivacyPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrivacyPolicy
     */
    omit?: PrivacyPolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrivacyPolicyInclude<ExtArgs> | null
    /**
     * The filter to search for the PrivacyPolicy to update in case it exists.
     */
    where: PrivacyPolicyWhereUniqueInput
    /**
     * In case the PrivacyPolicy found by the `where` argument doesn't exist, create a new PrivacyPolicy with this data.
     */
    create: XOR<PrivacyPolicyCreateInput, PrivacyPolicyUncheckedCreateInput>
    /**
     * In case the PrivacyPolicy was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PrivacyPolicyUpdateInput, PrivacyPolicyUncheckedUpdateInput>
  }

  /**
   * PrivacyPolicy delete
   */
  export type PrivacyPolicyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivacyPolicy
     */
    select?: PrivacyPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrivacyPolicy
     */
    omit?: PrivacyPolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrivacyPolicyInclude<ExtArgs> | null
    /**
     * Filter which PrivacyPolicy to delete.
     */
    where: PrivacyPolicyWhereUniqueInput
  }

  /**
   * PrivacyPolicy deleteMany
   */
  export type PrivacyPolicyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PrivacyPolicies to delete
     */
    where?: PrivacyPolicyWhereInput
    /**
     * Limit how many PrivacyPolicies to delete.
     */
    limit?: number
  }

  /**
   * PrivacyPolicy.translations
   */
  export type PrivacyPolicy$translationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivacyPolicyTranslation
     */
    select?: PrivacyPolicyTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrivacyPolicyTranslation
     */
    omit?: PrivacyPolicyTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrivacyPolicyTranslationInclude<ExtArgs> | null
    where?: PrivacyPolicyTranslationWhereInput
    orderBy?: PrivacyPolicyTranslationOrderByWithRelationInput | PrivacyPolicyTranslationOrderByWithRelationInput[]
    cursor?: PrivacyPolicyTranslationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PrivacyPolicyTranslationScalarFieldEnum | PrivacyPolicyTranslationScalarFieldEnum[]
  }

  /**
   * PrivacyPolicy without action
   */
  export type PrivacyPolicyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivacyPolicy
     */
    select?: PrivacyPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrivacyPolicy
     */
    omit?: PrivacyPolicyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrivacyPolicyInclude<ExtArgs> | null
  }


  /**
   * Model PrivacyPolicyTranslation
   */

  export type AggregatePrivacyPolicyTranslation = {
    _count: PrivacyPolicyTranslationCountAggregateOutputType | null
    _avg: PrivacyPolicyTranslationAvgAggregateOutputType | null
    _sum: PrivacyPolicyTranslationSumAggregateOutputType | null
    _min: PrivacyPolicyTranslationMinAggregateOutputType | null
    _max: PrivacyPolicyTranslationMaxAggregateOutputType | null
  }

  export type PrivacyPolicyTranslationAvgAggregateOutputType = {
    id: number | null
    privacy_policy_id: number | null
  }

  export type PrivacyPolicyTranslationSumAggregateOutputType = {
    id: number | null
    privacy_policy_id: number | null
  }

  export type PrivacyPolicyTranslationMinAggregateOutputType = {
    id: number | null
    privacy_policy_id: number | null
    language: $Enums.Language | null
    content: string | null
  }

  export type PrivacyPolicyTranslationMaxAggregateOutputType = {
    id: number | null
    privacy_policy_id: number | null
    language: $Enums.Language | null
    content: string | null
  }

  export type PrivacyPolicyTranslationCountAggregateOutputType = {
    id: number
    privacy_policy_id: number
    language: number
    content: number
    _all: number
  }


  export type PrivacyPolicyTranslationAvgAggregateInputType = {
    id?: true
    privacy_policy_id?: true
  }

  export type PrivacyPolicyTranslationSumAggregateInputType = {
    id?: true
    privacy_policy_id?: true
  }

  export type PrivacyPolicyTranslationMinAggregateInputType = {
    id?: true
    privacy_policy_id?: true
    language?: true
    content?: true
  }

  export type PrivacyPolicyTranslationMaxAggregateInputType = {
    id?: true
    privacy_policy_id?: true
    language?: true
    content?: true
  }

  export type PrivacyPolicyTranslationCountAggregateInputType = {
    id?: true
    privacy_policy_id?: true
    language?: true
    content?: true
    _all?: true
  }

  export type PrivacyPolicyTranslationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PrivacyPolicyTranslation to aggregate.
     */
    where?: PrivacyPolicyTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrivacyPolicyTranslations to fetch.
     */
    orderBy?: PrivacyPolicyTranslationOrderByWithRelationInput | PrivacyPolicyTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PrivacyPolicyTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrivacyPolicyTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrivacyPolicyTranslations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PrivacyPolicyTranslations
    **/
    _count?: true | PrivacyPolicyTranslationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PrivacyPolicyTranslationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PrivacyPolicyTranslationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PrivacyPolicyTranslationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PrivacyPolicyTranslationMaxAggregateInputType
  }

  export type GetPrivacyPolicyTranslationAggregateType<T extends PrivacyPolicyTranslationAggregateArgs> = {
        [P in keyof T & keyof AggregatePrivacyPolicyTranslation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePrivacyPolicyTranslation[P]>
      : GetScalarType<T[P], AggregatePrivacyPolicyTranslation[P]>
  }




  export type PrivacyPolicyTranslationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PrivacyPolicyTranslationWhereInput
    orderBy?: PrivacyPolicyTranslationOrderByWithAggregationInput | PrivacyPolicyTranslationOrderByWithAggregationInput[]
    by: PrivacyPolicyTranslationScalarFieldEnum[] | PrivacyPolicyTranslationScalarFieldEnum
    having?: PrivacyPolicyTranslationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PrivacyPolicyTranslationCountAggregateInputType | true
    _avg?: PrivacyPolicyTranslationAvgAggregateInputType
    _sum?: PrivacyPolicyTranslationSumAggregateInputType
    _min?: PrivacyPolicyTranslationMinAggregateInputType
    _max?: PrivacyPolicyTranslationMaxAggregateInputType
  }

  export type PrivacyPolicyTranslationGroupByOutputType = {
    id: number
    privacy_policy_id: number
    language: $Enums.Language
    content: string
    _count: PrivacyPolicyTranslationCountAggregateOutputType | null
    _avg: PrivacyPolicyTranslationAvgAggregateOutputType | null
    _sum: PrivacyPolicyTranslationSumAggregateOutputType | null
    _min: PrivacyPolicyTranslationMinAggregateOutputType | null
    _max: PrivacyPolicyTranslationMaxAggregateOutputType | null
  }

  type GetPrivacyPolicyTranslationGroupByPayload<T extends PrivacyPolicyTranslationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PrivacyPolicyTranslationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PrivacyPolicyTranslationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PrivacyPolicyTranslationGroupByOutputType[P]>
            : GetScalarType<T[P], PrivacyPolicyTranslationGroupByOutputType[P]>
        }
      >
    >


  export type PrivacyPolicyTranslationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    privacy_policy_id?: boolean
    language?: boolean
    content?: boolean
    privacy_policy?: boolean | PrivacyPolicyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["privacyPolicyTranslation"]>

  export type PrivacyPolicyTranslationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    privacy_policy_id?: boolean
    language?: boolean
    content?: boolean
    privacy_policy?: boolean | PrivacyPolicyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["privacyPolicyTranslation"]>

  export type PrivacyPolicyTranslationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    privacy_policy_id?: boolean
    language?: boolean
    content?: boolean
    privacy_policy?: boolean | PrivacyPolicyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["privacyPolicyTranslation"]>

  export type PrivacyPolicyTranslationSelectScalar = {
    id?: boolean
    privacy_policy_id?: boolean
    language?: boolean
    content?: boolean
  }

  export type PrivacyPolicyTranslationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "privacy_policy_id" | "language" | "content", ExtArgs["result"]["privacyPolicyTranslation"]>
  export type PrivacyPolicyTranslationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    privacy_policy?: boolean | PrivacyPolicyDefaultArgs<ExtArgs>
  }
  export type PrivacyPolicyTranslationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    privacy_policy?: boolean | PrivacyPolicyDefaultArgs<ExtArgs>
  }
  export type PrivacyPolicyTranslationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    privacy_policy?: boolean | PrivacyPolicyDefaultArgs<ExtArgs>
  }

  export type $PrivacyPolicyTranslationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PrivacyPolicyTranslation"
    objects: {
      privacy_policy: Prisma.$PrivacyPolicyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      privacy_policy_id: number
      language: $Enums.Language
      content: string
    }, ExtArgs["result"]["privacyPolicyTranslation"]>
    composites: {}
  }

  type PrivacyPolicyTranslationGetPayload<S extends boolean | null | undefined | PrivacyPolicyTranslationDefaultArgs> = $Result.GetResult<Prisma.$PrivacyPolicyTranslationPayload, S>

  type PrivacyPolicyTranslationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PrivacyPolicyTranslationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PrivacyPolicyTranslationCountAggregateInputType | true
    }

  export interface PrivacyPolicyTranslationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PrivacyPolicyTranslation'], meta: { name: 'PrivacyPolicyTranslation' } }
    /**
     * Find zero or one PrivacyPolicyTranslation that matches the filter.
     * @param {PrivacyPolicyTranslationFindUniqueArgs} args - Arguments to find a PrivacyPolicyTranslation
     * @example
     * // Get one PrivacyPolicyTranslation
     * const privacyPolicyTranslation = await prisma.privacyPolicyTranslation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PrivacyPolicyTranslationFindUniqueArgs>(args: SelectSubset<T, PrivacyPolicyTranslationFindUniqueArgs<ExtArgs>>): Prisma__PrivacyPolicyTranslationClient<$Result.GetResult<Prisma.$PrivacyPolicyTranslationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PrivacyPolicyTranslation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PrivacyPolicyTranslationFindUniqueOrThrowArgs} args - Arguments to find a PrivacyPolicyTranslation
     * @example
     * // Get one PrivacyPolicyTranslation
     * const privacyPolicyTranslation = await prisma.privacyPolicyTranslation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PrivacyPolicyTranslationFindUniqueOrThrowArgs>(args: SelectSubset<T, PrivacyPolicyTranslationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PrivacyPolicyTranslationClient<$Result.GetResult<Prisma.$PrivacyPolicyTranslationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PrivacyPolicyTranslation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivacyPolicyTranslationFindFirstArgs} args - Arguments to find a PrivacyPolicyTranslation
     * @example
     * // Get one PrivacyPolicyTranslation
     * const privacyPolicyTranslation = await prisma.privacyPolicyTranslation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PrivacyPolicyTranslationFindFirstArgs>(args?: SelectSubset<T, PrivacyPolicyTranslationFindFirstArgs<ExtArgs>>): Prisma__PrivacyPolicyTranslationClient<$Result.GetResult<Prisma.$PrivacyPolicyTranslationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PrivacyPolicyTranslation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivacyPolicyTranslationFindFirstOrThrowArgs} args - Arguments to find a PrivacyPolicyTranslation
     * @example
     * // Get one PrivacyPolicyTranslation
     * const privacyPolicyTranslation = await prisma.privacyPolicyTranslation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PrivacyPolicyTranslationFindFirstOrThrowArgs>(args?: SelectSubset<T, PrivacyPolicyTranslationFindFirstOrThrowArgs<ExtArgs>>): Prisma__PrivacyPolicyTranslationClient<$Result.GetResult<Prisma.$PrivacyPolicyTranslationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PrivacyPolicyTranslations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivacyPolicyTranslationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PrivacyPolicyTranslations
     * const privacyPolicyTranslations = await prisma.privacyPolicyTranslation.findMany()
     * 
     * // Get first 10 PrivacyPolicyTranslations
     * const privacyPolicyTranslations = await prisma.privacyPolicyTranslation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const privacyPolicyTranslationWithIdOnly = await prisma.privacyPolicyTranslation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PrivacyPolicyTranslationFindManyArgs>(args?: SelectSubset<T, PrivacyPolicyTranslationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrivacyPolicyTranslationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PrivacyPolicyTranslation.
     * @param {PrivacyPolicyTranslationCreateArgs} args - Arguments to create a PrivacyPolicyTranslation.
     * @example
     * // Create one PrivacyPolicyTranslation
     * const PrivacyPolicyTranslation = await prisma.privacyPolicyTranslation.create({
     *   data: {
     *     // ... data to create a PrivacyPolicyTranslation
     *   }
     * })
     * 
     */
    create<T extends PrivacyPolicyTranslationCreateArgs>(args: SelectSubset<T, PrivacyPolicyTranslationCreateArgs<ExtArgs>>): Prisma__PrivacyPolicyTranslationClient<$Result.GetResult<Prisma.$PrivacyPolicyTranslationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PrivacyPolicyTranslations.
     * @param {PrivacyPolicyTranslationCreateManyArgs} args - Arguments to create many PrivacyPolicyTranslations.
     * @example
     * // Create many PrivacyPolicyTranslations
     * const privacyPolicyTranslation = await prisma.privacyPolicyTranslation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PrivacyPolicyTranslationCreateManyArgs>(args?: SelectSubset<T, PrivacyPolicyTranslationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PrivacyPolicyTranslations and returns the data saved in the database.
     * @param {PrivacyPolicyTranslationCreateManyAndReturnArgs} args - Arguments to create many PrivacyPolicyTranslations.
     * @example
     * // Create many PrivacyPolicyTranslations
     * const privacyPolicyTranslation = await prisma.privacyPolicyTranslation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PrivacyPolicyTranslations and only return the `id`
     * const privacyPolicyTranslationWithIdOnly = await prisma.privacyPolicyTranslation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PrivacyPolicyTranslationCreateManyAndReturnArgs>(args?: SelectSubset<T, PrivacyPolicyTranslationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrivacyPolicyTranslationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PrivacyPolicyTranslation.
     * @param {PrivacyPolicyTranslationDeleteArgs} args - Arguments to delete one PrivacyPolicyTranslation.
     * @example
     * // Delete one PrivacyPolicyTranslation
     * const PrivacyPolicyTranslation = await prisma.privacyPolicyTranslation.delete({
     *   where: {
     *     // ... filter to delete one PrivacyPolicyTranslation
     *   }
     * })
     * 
     */
    delete<T extends PrivacyPolicyTranslationDeleteArgs>(args: SelectSubset<T, PrivacyPolicyTranslationDeleteArgs<ExtArgs>>): Prisma__PrivacyPolicyTranslationClient<$Result.GetResult<Prisma.$PrivacyPolicyTranslationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PrivacyPolicyTranslation.
     * @param {PrivacyPolicyTranslationUpdateArgs} args - Arguments to update one PrivacyPolicyTranslation.
     * @example
     * // Update one PrivacyPolicyTranslation
     * const privacyPolicyTranslation = await prisma.privacyPolicyTranslation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PrivacyPolicyTranslationUpdateArgs>(args: SelectSubset<T, PrivacyPolicyTranslationUpdateArgs<ExtArgs>>): Prisma__PrivacyPolicyTranslationClient<$Result.GetResult<Prisma.$PrivacyPolicyTranslationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PrivacyPolicyTranslations.
     * @param {PrivacyPolicyTranslationDeleteManyArgs} args - Arguments to filter PrivacyPolicyTranslations to delete.
     * @example
     * // Delete a few PrivacyPolicyTranslations
     * const { count } = await prisma.privacyPolicyTranslation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PrivacyPolicyTranslationDeleteManyArgs>(args?: SelectSubset<T, PrivacyPolicyTranslationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PrivacyPolicyTranslations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivacyPolicyTranslationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PrivacyPolicyTranslations
     * const privacyPolicyTranslation = await prisma.privacyPolicyTranslation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PrivacyPolicyTranslationUpdateManyArgs>(args: SelectSubset<T, PrivacyPolicyTranslationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PrivacyPolicyTranslations and returns the data updated in the database.
     * @param {PrivacyPolicyTranslationUpdateManyAndReturnArgs} args - Arguments to update many PrivacyPolicyTranslations.
     * @example
     * // Update many PrivacyPolicyTranslations
     * const privacyPolicyTranslation = await prisma.privacyPolicyTranslation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PrivacyPolicyTranslations and only return the `id`
     * const privacyPolicyTranslationWithIdOnly = await prisma.privacyPolicyTranslation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PrivacyPolicyTranslationUpdateManyAndReturnArgs>(args: SelectSubset<T, PrivacyPolicyTranslationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PrivacyPolicyTranslationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PrivacyPolicyTranslation.
     * @param {PrivacyPolicyTranslationUpsertArgs} args - Arguments to update or create a PrivacyPolicyTranslation.
     * @example
     * // Update or create a PrivacyPolicyTranslation
     * const privacyPolicyTranslation = await prisma.privacyPolicyTranslation.upsert({
     *   create: {
     *     // ... data to create a PrivacyPolicyTranslation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PrivacyPolicyTranslation we want to update
     *   }
     * })
     */
    upsert<T extends PrivacyPolicyTranslationUpsertArgs>(args: SelectSubset<T, PrivacyPolicyTranslationUpsertArgs<ExtArgs>>): Prisma__PrivacyPolicyTranslationClient<$Result.GetResult<Prisma.$PrivacyPolicyTranslationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PrivacyPolicyTranslations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivacyPolicyTranslationCountArgs} args - Arguments to filter PrivacyPolicyTranslations to count.
     * @example
     * // Count the number of PrivacyPolicyTranslations
     * const count = await prisma.privacyPolicyTranslation.count({
     *   where: {
     *     // ... the filter for the PrivacyPolicyTranslations we want to count
     *   }
     * })
    **/
    count<T extends PrivacyPolicyTranslationCountArgs>(
      args?: Subset<T, PrivacyPolicyTranslationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PrivacyPolicyTranslationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PrivacyPolicyTranslation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivacyPolicyTranslationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PrivacyPolicyTranslationAggregateArgs>(args: Subset<T, PrivacyPolicyTranslationAggregateArgs>): Prisma.PrismaPromise<GetPrivacyPolicyTranslationAggregateType<T>>

    /**
     * Group by PrivacyPolicyTranslation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PrivacyPolicyTranslationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PrivacyPolicyTranslationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PrivacyPolicyTranslationGroupByArgs['orderBy'] }
        : { orderBy?: PrivacyPolicyTranslationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PrivacyPolicyTranslationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPrivacyPolicyTranslationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PrivacyPolicyTranslation model
   */
  readonly fields: PrivacyPolicyTranslationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PrivacyPolicyTranslation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PrivacyPolicyTranslationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    privacy_policy<T extends PrivacyPolicyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PrivacyPolicyDefaultArgs<ExtArgs>>): Prisma__PrivacyPolicyClient<$Result.GetResult<Prisma.$PrivacyPolicyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PrivacyPolicyTranslation model
   */
  interface PrivacyPolicyTranslationFieldRefs {
    readonly id: FieldRef<"PrivacyPolicyTranslation", 'Int'>
    readonly privacy_policy_id: FieldRef<"PrivacyPolicyTranslation", 'Int'>
    readonly language: FieldRef<"PrivacyPolicyTranslation", 'Language'>
    readonly content: FieldRef<"PrivacyPolicyTranslation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PrivacyPolicyTranslation findUnique
   */
  export type PrivacyPolicyTranslationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivacyPolicyTranslation
     */
    select?: PrivacyPolicyTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrivacyPolicyTranslation
     */
    omit?: PrivacyPolicyTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrivacyPolicyTranslationInclude<ExtArgs> | null
    /**
     * Filter, which PrivacyPolicyTranslation to fetch.
     */
    where: PrivacyPolicyTranslationWhereUniqueInput
  }

  /**
   * PrivacyPolicyTranslation findUniqueOrThrow
   */
  export type PrivacyPolicyTranslationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivacyPolicyTranslation
     */
    select?: PrivacyPolicyTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrivacyPolicyTranslation
     */
    omit?: PrivacyPolicyTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrivacyPolicyTranslationInclude<ExtArgs> | null
    /**
     * Filter, which PrivacyPolicyTranslation to fetch.
     */
    where: PrivacyPolicyTranslationWhereUniqueInput
  }

  /**
   * PrivacyPolicyTranslation findFirst
   */
  export type PrivacyPolicyTranslationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivacyPolicyTranslation
     */
    select?: PrivacyPolicyTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrivacyPolicyTranslation
     */
    omit?: PrivacyPolicyTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrivacyPolicyTranslationInclude<ExtArgs> | null
    /**
     * Filter, which PrivacyPolicyTranslation to fetch.
     */
    where?: PrivacyPolicyTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrivacyPolicyTranslations to fetch.
     */
    orderBy?: PrivacyPolicyTranslationOrderByWithRelationInput | PrivacyPolicyTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PrivacyPolicyTranslations.
     */
    cursor?: PrivacyPolicyTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrivacyPolicyTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrivacyPolicyTranslations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PrivacyPolicyTranslations.
     */
    distinct?: PrivacyPolicyTranslationScalarFieldEnum | PrivacyPolicyTranslationScalarFieldEnum[]
  }

  /**
   * PrivacyPolicyTranslation findFirstOrThrow
   */
  export type PrivacyPolicyTranslationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivacyPolicyTranslation
     */
    select?: PrivacyPolicyTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrivacyPolicyTranslation
     */
    omit?: PrivacyPolicyTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrivacyPolicyTranslationInclude<ExtArgs> | null
    /**
     * Filter, which PrivacyPolicyTranslation to fetch.
     */
    where?: PrivacyPolicyTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrivacyPolicyTranslations to fetch.
     */
    orderBy?: PrivacyPolicyTranslationOrderByWithRelationInput | PrivacyPolicyTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PrivacyPolicyTranslations.
     */
    cursor?: PrivacyPolicyTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrivacyPolicyTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrivacyPolicyTranslations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PrivacyPolicyTranslations.
     */
    distinct?: PrivacyPolicyTranslationScalarFieldEnum | PrivacyPolicyTranslationScalarFieldEnum[]
  }

  /**
   * PrivacyPolicyTranslation findMany
   */
  export type PrivacyPolicyTranslationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivacyPolicyTranslation
     */
    select?: PrivacyPolicyTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrivacyPolicyTranslation
     */
    omit?: PrivacyPolicyTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrivacyPolicyTranslationInclude<ExtArgs> | null
    /**
     * Filter, which PrivacyPolicyTranslations to fetch.
     */
    where?: PrivacyPolicyTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PrivacyPolicyTranslations to fetch.
     */
    orderBy?: PrivacyPolicyTranslationOrderByWithRelationInput | PrivacyPolicyTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PrivacyPolicyTranslations.
     */
    cursor?: PrivacyPolicyTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PrivacyPolicyTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PrivacyPolicyTranslations.
     */
    skip?: number
    distinct?: PrivacyPolicyTranslationScalarFieldEnum | PrivacyPolicyTranslationScalarFieldEnum[]
  }

  /**
   * PrivacyPolicyTranslation create
   */
  export type PrivacyPolicyTranslationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivacyPolicyTranslation
     */
    select?: PrivacyPolicyTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrivacyPolicyTranslation
     */
    omit?: PrivacyPolicyTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrivacyPolicyTranslationInclude<ExtArgs> | null
    /**
     * The data needed to create a PrivacyPolicyTranslation.
     */
    data: XOR<PrivacyPolicyTranslationCreateInput, PrivacyPolicyTranslationUncheckedCreateInput>
  }

  /**
   * PrivacyPolicyTranslation createMany
   */
  export type PrivacyPolicyTranslationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PrivacyPolicyTranslations.
     */
    data: PrivacyPolicyTranslationCreateManyInput | PrivacyPolicyTranslationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PrivacyPolicyTranslation createManyAndReturn
   */
  export type PrivacyPolicyTranslationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivacyPolicyTranslation
     */
    select?: PrivacyPolicyTranslationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PrivacyPolicyTranslation
     */
    omit?: PrivacyPolicyTranslationOmit<ExtArgs> | null
    /**
     * The data used to create many PrivacyPolicyTranslations.
     */
    data: PrivacyPolicyTranslationCreateManyInput | PrivacyPolicyTranslationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrivacyPolicyTranslationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PrivacyPolicyTranslation update
   */
  export type PrivacyPolicyTranslationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivacyPolicyTranslation
     */
    select?: PrivacyPolicyTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrivacyPolicyTranslation
     */
    omit?: PrivacyPolicyTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrivacyPolicyTranslationInclude<ExtArgs> | null
    /**
     * The data needed to update a PrivacyPolicyTranslation.
     */
    data: XOR<PrivacyPolicyTranslationUpdateInput, PrivacyPolicyTranslationUncheckedUpdateInput>
    /**
     * Choose, which PrivacyPolicyTranslation to update.
     */
    where: PrivacyPolicyTranslationWhereUniqueInput
  }

  /**
   * PrivacyPolicyTranslation updateMany
   */
  export type PrivacyPolicyTranslationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PrivacyPolicyTranslations.
     */
    data: XOR<PrivacyPolicyTranslationUpdateManyMutationInput, PrivacyPolicyTranslationUncheckedUpdateManyInput>
    /**
     * Filter which PrivacyPolicyTranslations to update
     */
    where?: PrivacyPolicyTranslationWhereInput
    /**
     * Limit how many PrivacyPolicyTranslations to update.
     */
    limit?: number
  }

  /**
   * PrivacyPolicyTranslation updateManyAndReturn
   */
  export type PrivacyPolicyTranslationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivacyPolicyTranslation
     */
    select?: PrivacyPolicyTranslationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PrivacyPolicyTranslation
     */
    omit?: PrivacyPolicyTranslationOmit<ExtArgs> | null
    /**
     * The data used to update PrivacyPolicyTranslations.
     */
    data: XOR<PrivacyPolicyTranslationUpdateManyMutationInput, PrivacyPolicyTranslationUncheckedUpdateManyInput>
    /**
     * Filter which PrivacyPolicyTranslations to update
     */
    where?: PrivacyPolicyTranslationWhereInput
    /**
     * Limit how many PrivacyPolicyTranslations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrivacyPolicyTranslationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PrivacyPolicyTranslation upsert
   */
  export type PrivacyPolicyTranslationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivacyPolicyTranslation
     */
    select?: PrivacyPolicyTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrivacyPolicyTranslation
     */
    omit?: PrivacyPolicyTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrivacyPolicyTranslationInclude<ExtArgs> | null
    /**
     * The filter to search for the PrivacyPolicyTranslation to update in case it exists.
     */
    where: PrivacyPolicyTranslationWhereUniqueInput
    /**
     * In case the PrivacyPolicyTranslation found by the `where` argument doesn't exist, create a new PrivacyPolicyTranslation with this data.
     */
    create: XOR<PrivacyPolicyTranslationCreateInput, PrivacyPolicyTranslationUncheckedCreateInput>
    /**
     * In case the PrivacyPolicyTranslation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PrivacyPolicyTranslationUpdateInput, PrivacyPolicyTranslationUncheckedUpdateInput>
  }

  /**
   * PrivacyPolicyTranslation delete
   */
  export type PrivacyPolicyTranslationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivacyPolicyTranslation
     */
    select?: PrivacyPolicyTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrivacyPolicyTranslation
     */
    omit?: PrivacyPolicyTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrivacyPolicyTranslationInclude<ExtArgs> | null
    /**
     * Filter which PrivacyPolicyTranslation to delete.
     */
    where: PrivacyPolicyTranslationWhereUniqueInput
  }

  /**
   * PrivacyPolicyTranslation deleteMany
   */
  export type PrivacyPolicyTranslationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PrivacyPolicyTranslations to delete
     */
    where?: PrivacyPolicyTranslationWhereInput
    /**
     * Limit how many PrivacyPolicyTranslations to delete.
     */
    limit?: number
  }

  /**
   * PrivacyPolicyTranslation without action
   */
  export type PrivacyPolicyTranslationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PrivacyPolicyTranslation
     */
    select?: PrivacyPolicyTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PrivacyPolicyTranslation
     */
    omit?: PrivacyPolicyTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PrivacyPolicyTranslationInclude<ExtArgs> | null
  }


  /**
   * Model AboutUs
   */

  export type AggregateAboutUs = {
    _count: AboutUsCountAggregateOutputType | null
    _avg: AboutUsAvgAggregateOutputType | null
    _sum: AboutUsSumAggregateOutputType | null
    _min: AboutUsMinAggregateOutputType | null
    _max: AboutUsMaxAggregateOutputType | null
  }

  export type AboutUsAvgAggregateOutputType = {
    id: number | null
  }

  export type AboutUsSumAggregateOutputType = {
    id: number | null
  }

  export type AboutUsMinAggregateOutputType = {
    id: number | null
  }

  export type AboutUsMaxAggregateOutputType = {
    id: number | null
  }

  export type AboutUsCountAggregateOutputType = {
    id: number
    _all: number
  }


  export type AboutUsAvgAggregateInputType = {
    id?: true
  }

  export type AboutUsSumAggregateInputType = {
    id?: true
  }

  export type AboutUsMinAggregateInputType = {
    id?: true
  }

  export type AboutUsMaxAggregateInputType = {
    id?: true
  }

  export type AboutUsCountAggregateInputType = {
    id?: true
    _all?: true
  }

  export type AboutUsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AboutUs to aggregate.
     */
    where?: AboutUsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aboutuses to fetch.
     */
    orderBy?: AboutUsOrderByWithRelationInput | AboutUsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AboutUsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aboutuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aboutuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Aboutuses
    **/
    _count?: true | AboutUsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AboutUsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AboutUsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AboutUsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AboutUsMaxAggregateInputType
  }

  export type GetAboutUsAggregateType<T extends AboutUsAggregateArgs> = {
        [P in keyof T & keyof AggregateAboutUs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAboutUs[P]>
      : GetScalarType<T[P], AggregateAboutUs[P]>
  }




  export type AboutUsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AboutUsWhereInput
    orderBy?: AboutUsOrderByWithAggregationInput | AboutUsOrderByWithAggregationInput[]
    by: AboutUsScalarFieldEnum[] | AboutUsScalarFieldEnum
    having?: AboutUsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AboutUsCountAggregateInputType | true
    _avg?: AboutUsAvgAggregateInputType
    _sum?: AboutUsSumAggregateInputType
    _min?: AboutUsMinAggregateInputType
    _max?: AboutUsMaxAggregateInputType
  }

  export type AboutUsGroupByOutputType = {
    id: number
    _count: AboutUsCountAggregateOutputType | null
    _avg: AboutUsAvgAggregateOutputType | null
    _sum: AboutUsSumAggregateOutputType | null
    _min: AboutUsMinAggregateOutputType | null
    _max: AboutUsMaxAggregateOutputType | null
  }

  type GetAboutUsGroupByPayload<T extends AboutUsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AboutUsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AboutUsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AboutUsGroupByOutputType[P]>
            : GetScalarType<T[P], AboutUsGroupByOutputType[P]>
        }
      >
    >


  export type AboutUsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    translations?: boolean | AboutUs$translationsArgs<ExtArgs>
    _count?: boolean | AboutUsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aboutUs"]>

  export type AboutUsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
  }, ExtArgs["result"]["aboutUs"]>

  export type AboutUsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
  }, ExtArgs["result"]["aboutUs"]>

  export type AboutUsSelectScalar = {
    id?: boolean
  }

  export type AboutUsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id", ExtArgs["result"]["aboutUs"]>
  export type AboutUsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    translations?: boolean | AboutUs$translationsArgs<ExtArgs>
    _count?: boolean | AboutUsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AboutUsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type AboutUsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $AboutUsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AboutUs"
    objects: {
      translations: Prisma.$AboutUsTranslationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
    }, ExtArgs["result"]["aboutUs"]>
    composites: {}
  }

  type AboutUsGetPayload<S extends boolean | null | undefined | AboutUsDefaultArgs> = $Result.GetResult<Prisma.$AboutUsPayload, S>

  type AboutUsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AboutUsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AboutUsCountAggregateInputType | true
    }

  export interface AboutUsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AboutUs'], meta: { name: 'AboutUs' } }
    /**
     * Find zero or one AboutUs that matches the filter.
     * @param {AboutUsFindUniqueArgs} args - Arguments to find a AboutUs
     * @example
     * // Get one AboutUs
     * const aboutUs = await prisma.aboutUs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AboutUsFindUniqueArgs>(args: SelectSubset<T, AboutUsFindUniqueArgs<ExtArgs>>): Prisma__AboutUsClient<$Result.GetResult<Prisma.$AboutUsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AboutUs that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AboutUsFindUniqueOrThrowArgs} args - Arguments to find a AboutUs
     * @example
     * // Get one AboutUs
     * const aboutUs = await prisma.aboutUs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AboutUsFindUniqueOrThrowArgs>(args: SelectSubset<T, AboutUsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AboutUsClient<$Result.GetResult<Prisma.$AboutUsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AboutUs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutUsFindFirstArgs} args - Arguments to find a AboutUs
     * @example
     * // Get one AboutUs
     * const aboutUs = await prisma.aboutUs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AboutUsFindFirstArgs>(args?: SelectSubset<T, AboutUsFindFirstArgs<ExtArgs>>): Prisma__AboutUsClient<$Result.GetResult<Prisma.$AboutUsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AboutUs that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutUsFindFirstOrThrowArgs} args - Arguments to find a AboutUs
     * @example
     * // Get one AboutUs
     * const aboutUs = await prisma.aboutUs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AboutUsFindFirstOrThrowArgs>(args?: SelectSubset<T, AboutUsFindFirstOrThrowArgs<ExtArgs>>): Prisma__AboutUsClient<$Result.GetResult<Prisma.$AboutUsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Aboutuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutUsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Aboutuses
     * const aboutuses = await prisma.aboutUs.findMany()
     * 
     * // Get first 10 Aboutuses
     * const aboutuses = await prisma.aboutUs.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aboutUsWithIdOnly = await prisma.aboutUs.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AboutUsFindManyArgs>(args?: SelectSubset<T, AboutUsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AboutUsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AboutUs.
     * @param {AboutUsCreateArgs} args - Arguments to create a AboutUs.
     * @example
     * // Create one AboutUs
     * const AboutUs = await prisma.aboutUs.create({
     *   data: {
     *     // ... data to create a AboutUs
     *   }
     * })
     * 
     */
    create<T extends AboutUsCreateArgs>(args: SelectSubset<T, AboutUsCreateArgs<ExtArgs>>): Prisma__AboutUsClient<$Result.GetResult<Prisma.$AboutUsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Aboutuses.
     * @param {AboutUsCreateManyArgs} args - Arguments to create many Aboutuses.
     * @example
     * // Create many Aboutuses
     * const aboutUs = await prisma.aboutUs.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AboutUsCreateManyArgs>(args?: SelectSubset<T, AboutUsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Aboutuses and returns the data saved in the database.
     * @param {AboutUsCreateManyAndReturnArgs} args - Arguments to create many Aboutuses.
     * @example
     * // Create many Aboutuses
     * const aboutUs = await prisma.aboutUs.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Aboutuses and only return the `id`
     * const aboutUsWithIdOnly = await prisma.aboutUs.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AboutUsCreateManyAndReturnArgs>(args?: SelectSubset<T, AboutUsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AboutUsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AboutUs.
     * @param {AboutUsDeleteArgs} args - Arguments to delete one AboutUs.
     * @example
     * // Delete one AboutUs
     * const AboutUs = await prisma.aboutUs.delete({
     *   where: {
     *     // ... filter to delete one AboutUs
     *   }
     * })
     * 
     */
    delete<T extends AboutUsDeleteArgs>(args: SelectSubset<T, AboutUsDeleteArgs<ExtArgs>>): Prisma__AboutUsClient<$Result.GetResult<Prisma.$AboutUsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AboutUs.
     * @param {AboutUsUpdateArgs} args - Arguments to update one AboutUs.
     * @example
     * // Update one AboutUs
     * const aboutUs = await prisma.aboutUs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AboutUsUpdateArgs>(args: SelectSubset<T, AboutUsUpdateArgs<ExtArgs>>): Prisma__AboutUsClient<$Result.GetResult<Prisma.$AboutUsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Aboutuses.
     * @param {AboutUsDeleteManyArgs} args - Arguments to filter Aboutuses to delete.
     * @example
     * // Delete a few Aboutuses
     * const { count } = await prisma.aboutUs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AboutUsDeleteManyArgs>(args?: SelectSubset<T, AboutUsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Aboutuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutUsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Aboutuses
     * const aboutUs = await prisma.aboutUs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AboutUsUpdateManyArgs>(args: SelectSubset<T, AboutUsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Aboutuses and returns the data updated in the database.
     * @param {AboutUsUpdateManyAndReturnArgs} args - Arguments to update many Aboutuses.
     * @example
     * // Update many Aboutuses
     * const aboutUs = await prisma.aboutUs.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Aboutuses and only return the `id`
     * const aboutUsWithIdOnly = await prisma.aboutUs.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AboutUsUpdateManyAndReturnArgs>(args: SelectSubset<T, AboutUsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AboutUsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AboutUs.
     * @param {AboutUsUpsertArgs} args - Arguments to update or create a AboutUs.
     * @example
     * // Update or create a AboutUs
     * const aboutUs = await prisma.aboutUs.upsert({
     *   create: {
     *     // ... data to create a AboutUs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AboutUs we want to update
     *   }
     * })
     */
    upsert<T extends AboutUsUpsertArgs>(args: SelectSubset<T, AboutUsUpsertArgs<ExtArgs>>): Prisma__AboutUsClient<$Result.GetResult<Prisma.$AboutUsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Aboutuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutUsCountArgs} args - Arguments to filter Aboutuses to count.
     * @example
     * // Count the number of Aboutuses
     * const count = await prisma.aboutUs.count({
     *   where: {
     *     // ... the filter for the Aboutuses we want to count
     *   }
     * })
    **/
    count<T extends AboutUsCountArgs>(
      args?: Subset<T, AboutUsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AboutUsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AboutUs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutUsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AboutUsAggregateArgs>(args: Subset<T, AboutUsAggregateArgs>): Prisma.PrismaPromise<GetAboutUsAggregateType<T>>

    /**
     * Group by AboutUs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutUsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AboutUsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AboutUsGroupByArgs['orderBy'] }
        : { orderBy?: AboutUsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AboutUsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAboutUsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AboutUs model
   */
  readonly fields: AboutUsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AboutUs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AboutUsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    translations<T extends AboutUs$translationsArgs<ExtArgs> = {}>(args?: Subset<T, AboutUs$translationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AboutUsTranslationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AboutUs model
   */
  interface AboutUsFieldRefs {
    readonly id: FieldRef<"AboutUs", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * AboutUs findUnique
   */
  export type AboutUsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutUs
     */
    select?: AboutUsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AboutUs
     */
    omit?: AboutUsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AboutUsInclude<ExtArgs> | null
    /**
     * Filter, which AboutUs to fetch.
     */
    where: AboutUsWhereUniqueInput
  }

  /**
   * AboutUs findUniqueOrThrow
   */
  export type AboutUsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutUs
     */
    select?: AboutUsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AboutUs
     */
    omit?: AboutUsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AboutUsInclude<ExtArgs> | null
    /**
     * Filter, which AboutUs to fetch.
     */
    where: AboutUsWhereUniqueInput
  }

  /**
   * AboutUs findFirst
   */
  export type AboutUsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutUs
     */
    select?: AboutUsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AboutUs
     */
    omit?: AboutUsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AboutUsInclude<ExtArgs> | null
    /**
     * Filter, which AboutUs to fetch.
     */
    where?: AboutUsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aboutuses to fetch.
     */
    orderBy?: AboutUsOrderByWithRelationInput | AboutUsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Aboutuses.
     */
    cursor?: AboutUsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aboutuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aboutuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Aboutuses.
     */
    distinct?: AboutUsScalarFieldEnum | AboutUsScalarFieldEnum[]
  }

  /**
   * AboutUs findFirstOrThrow
   */
  export type AboutUsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutUs
     */
    select?: AboutUsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AboutUs
     */
    omit?: AboutUsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AboutUsInclude<ExtArgs> | null
    /**
     * Filter, which AboutUs to fetch.
     */
    where?: AboutUsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aboutuses to fetch.
     */
    orderBy?: AboutUsOrderByWithRelationInput | AboutUsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Aboutuses.
     */
    cursor?: AboutUsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aboutuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aboutuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Aboutuses.
     */
    distinct?: AboutUsScalarFieldEnum | AboutUsScalarFieldEnum[]
  }

  /**
   * AboutUs findMany
   */
  export type AboutUsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutUs
     */
    select?: AboutUsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AboutUs
     */
    omit?: AboutUsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AboutUsInclude<ExtArgs> | null
    /**
     * Filter, which Aboutuses to fetch.
     */
    where?: AboutUsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Aboutuses to fetch.
     */
    orderBy?: AboutUsOrderByWithRelationInput | AboutUsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Aboutuses.
     */
    cursor?: AboutUsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Aboutuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Aboutuses.
     */
    skip?: number
    distinct?: AboutUsScalarFieldEnum | AboutUsScalarFieldEnum[]
  }

  /**
   * AboutUs create
   */
  export type AboutUsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutUs
     */
    select?: AboutUsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AboutUs
     */
    omit?: AboutUsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AboutUsInclude<ExtArgs> | null
    /**
     * The data needed to create a AboutUs.
     */
    data?: XOR<AboutUsCreateInput, AboutUsUncheckedCreateInput>
  }

  /**
   * AboutUs createMany
   */
  export type AboutUsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Aboutuses.
     */
    data: AboutUsCreateManyInput | AboutUsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AboutUs createManyAndReturn
   */
  export type AboutUsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutUs
     */
    select?: AboutUsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AboutUs
     */
    omit?: AboutUsOmit<ExtArgs> | null
    /**
     * The data used to create many Aboutuses.
     */
    data: AboutUsCreateManyInput | AboutUsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AboutUs update
   */
  export type AboutUsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutUs
     */
    select?: AboutUsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AboutUs
     */
    omit?: AboutUsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AboutUsInclude<ExtArgs> | null
    /**
     * The data needed to update a AboutUs.
     */
    data: XOR<AboutUsUpdateInput, AboutUsUncheckedUpdateInput>
    /**
     * Choose, which AboutUs to update.
     */
    where: AboutUsWhereUniqueInput
  }

  /**
   * AboutUs updateMany
   */
  export type AboutUsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Aboutuses.
     */
    data: XOR<AboutUsUpdateManyMutationInput, AboutUsUncheckedUpdateManyInput>
    /**
     * Filter which Aboutuses to update
     */
    where?: AboutUsWhereInput
    /**
     * Limit how many Aboutuses to update.
     */
    limit?: number
  }

  /**
   * AboutUs updateManyAndReturn
   */
  export type AboutUsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutUs
     */
    select?: AboutUsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AboutUs
     */
    omit?: AboutUsOmit<ExtArgs> | null
    /**
     * The data used to update Aboutuses.
     */
    data: XOR<AboutUsUpdateManyMutationInput, AboutUsUncheckedUpdateManyInput>
    /**
     * Filter which Aboutuses to update
     */
    where?: AboutUsWhereInput
    /**
     * Limit how many Aboutuses to update.
     */
    limit?: number
  }

  /**
   * AboutUs upsert
   */
  export type AboutUsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutUs
     */
    select?: AboutUsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AboutUs
     */
    omit?: AboutUsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AboutUsInclude<ExtArgs> | null
    /**
     * The filter to search for the AboutUs to update in case it exists.
     */
    where: AboutUsWhereUniqueInput
    /**
     * In case the AboutUs found by the `where` argument doesn't exist, create a new AboutUs with this data.
     */
    create: XOR<AboutUsCreateInput, AboutUsUncheckedCreateInput>
    /**
     * In case the AboutUs was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AboutUsUpdateInput, AboutUsUncheckedUpdateInput>
  }

  /**
   * AboutUs delete
   */
  export type AboutUsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutUs
     */
    select?: AboutUsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AboutUs
     */
    omit?: AboutUsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AboutUsInclude<ExtArgs> | null
    /**
     * Filter which AboutUs to delete.
     */
    where: AboutUsWhereUniqueInput
  }

  /**
   * AboutUs deleteMany
   */
  export type AboutUsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Aboutuses to delete
     */
    where?: AboutUsWhereInput
    /**
     * Limit how many Aboutuses to delete.
     */
    limit?: number
  }

  /**
   * AboutUs.translations
   */
  export type AboutUs$translationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutUsTranslation
     */
    select?: AboutUsTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AboutUsTranslation
     */
    omit?: AboutUsTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AboutUsTranslationInclude<ExtArgs> | null
    where?: AboutUsTranslationWhereInput
    orderBy?: AboutUsTranslationOrderByWithRelationInput | AboutUsTranslationOrderByWithRelationInput[]
    cursor?: AboutUsTranslationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AboutUsTranslationScalarFieldEnum | AboutUsTranslationScalarFieldEnum[]
  }

  /**
   * AboutUs without action
   */
  export type AboutUsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutUs
     */
    select?: AboutUsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AboutUs
     */
    omit?: AboutUsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AboutUsInclude<ExtArgs> | null
  }


  /**
   * Model AboutUsTranslation
   */

  export type AggregateAboutUsTranslation = {
    _count: AboutUsTranslationCountAggregateOutputType | null
    _avg: AboutUsTranslationAvgAggregateOutputType | null
    _sum: AboutUsTranslationSumAggregateOutputType | null
    _min: AboutUsTranslationMinAggregateOutputType | null
    _max: AboutUsTranslationMaxAggregateOutputType | null
  }

  export type AboutUsTranslationAvgAggregateOutputType = {
    id: number | null
    about_us_id: number | null
  }

  export type AboutUsTranslationSumAggregateOutputType = {
    id: number | null
    about_us_id: number | null
  }

  export type AboutUsTranslationMinAggregateOutputType = {
    id: number | null
    about_us_id: number | null
    language: $Enums.Language | null
    content: string | null
  }

  export type AboutUsTranslationMaxAggregateOutputType = {
    id: number | null
    about_us_id: number | null
    language: $Enums.Language | null
    content: string | null
  }

  export type AboutUsTranslationCountAggregateOutputType = {
    id: number
    about_us_id: number
    language: number
    content: number
    _all: number
  }


  export type AboutUsTranslationAvgAggregateInputType = {
    id?: true
    about_us_id?: true
  }

  export type AboutUsTranslationSumAggregateInputType = {
    id?: true
    about_us_id?: true
  }

  export type AboutUsTranslationMinAggregateInputType = {
    id?: true
    about_us_id?: true
    language?: true
    content?: true
  }

  export type AboutUsTranslationMaxAggregateInputType = {
    id?: true
    about_us_id?: true
    language?: true
    content?: true
  }

  export type AboutUsTranslationCountAggregateInputType = {
    id?: true
    about_us_id?: true
    language?: true
    content?: true
    _all?: true
  }

  export type AboutUsTranslationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AboutUsTranslation to aggregate.
     */
    where?: AboutUsTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AboutUsTranslations to fetch.
     */
    orderBy?: AboutUsTranslationOrderByWithRelationInput | AboutUsTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AboutUsTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AboutUsTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AboutUsTranslations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AboutUsTranslations
    **/
    _count?: true | AboutUsTranslationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AboutUsTranslationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AboutUsTranslationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AboutUsTranslationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AboutUsTranslationMaxAggregateInputType
  }

  export type GetAboutUsTranslationAggregateType<T extends AboutUsTranslationAggregateArgs> = {
        [P in keyof T & keyof AggregateAboutUsTranslation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAboutUsTranslation[P]>
      : GetScalarType<T[P], AggregateAboutUsTranslation[P]>
  }




  export type AboutUsTranslationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AboutUsTranslationWhereInput
    orderBy?: AboutUsTranslationOrderByWithAggregationInput | AboutUsTranslationOrderByWithAggregationInput[]
    by: AboutUsTranslationScalarFieldEnum[] | AboutUsTranslationScalarFieldEnum
    having?: AboutUsTranslationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AboutUsTranslationCountAggregateInputType | true
    _avg?: AboutUsTranslationAvgAggregateInputType
    _sum?: AboutUsTranslationSumAggregateInputType
    _min?: AboutUsTranslationMinAggregateInputType
    _max?: AboutUsTranslationMaxAggregateInputType
  }

  export type AboutUsTranslationGroupByOutputType = {
    id: number
    about_us_id: number
    language: $Enums.Language
    content: string
    _count: AboutUsTranslationCountAggregateOutputType | null
    _avg: AboutUsTranslationAvgAggregateOutputType | null
    _sum: AboutUsTranslationSumAggregateOutputType | null
    _min: AboutUsTranslationMinAggregateOutputType | null
    _max: AboutUsTranslationMaxAggregateOutputType | null
  }

  type GetAboutUsTranslationGroupByPayload<T extends AboutUsTranslationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AboutUsTranslationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AboutUsTranslationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AboutUsTranslationGroupByOutputType[P]>
            : GetScalarType<T[P], AboutUsTranslationGroupByOutputType[P]>
        }
      >
    >


  export type AboutUsTranslationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    about_us_id?: boolean
    language?: boolean
    content?: boolean
    about_us?: boolean | AboutUsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aboutUsTranslation"]>

  export type AboutUsTranslationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    about_us_id?: boolean
    language?: boolean
    content?: boolean
    about_us?: boolean | AboutUsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aboutUsTranslation"]>

  export type AboutUsTranslationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    about_us_id?: boolean
    language?: boolean
    content?: boolean
    about_us?: boolean | AboutUsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aboutUsTranslation"]>

  export type AboutUsTranslationSelectScalar = {
    id?: boolean
    about_us_id?: boolean
    language?: boolean
    content?: boolean
  }

  export type AboutUsTranslationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "about_us_id" | "language" | "content", ExtArgs["result"]["aboutUsTranslation"]>
  export type AboutUsTranslationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    about_us?: boolean | AboutUsDefaultArgs<ExtArgs>
  }
  export type AboutUsTranslationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    about_us?: boolean | AboutUsDefaultArgs<ExtArgs>
  }
  export type AboutUsTranslationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    about_us?: boolean | AboutUsDefaultArgs<ExtArgs>
  }

  export type $AboutUsTranslationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AboutUsTranslation"
    objects: {
      about_us: Prisma.$AboutUsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      about_us_id: number
      language: $Enums.Language
      content: string
    }, ExtArgs["result"]["aboutUsTranslation"]>
    composites: {}
  }

  type AboutUsTranslationGetPayload<S extends boolean | null | undefined | AboutUsTranslationDefaultArgs> = $Result.GetResult<Prisma.$AboutUsTranslationPayload, S>

  type AboutUsTranslationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AboutUsTranslationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AboutUsTranslationCountAggregateInputType | true
    }

  export interface AboutUsTranslationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AboutUsTranslation'], meta: { name: 'AboutUsTranslation' } }
    /**
     * Find zero or one AboutUsTranslation that matches the filter.
     * @param {AboutUsTranslationFindUniqueArgs} args - Arguments to find a AboutUsTranslation
     * @example
     * // Get one AboutUsTranslation
     * const aboutUsTranslation = await prisma.aboutUsTranslation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AboutUsTranslationFindUniqueArgs>(args: SelectSubset<T, AboutUsTranslationFindUniqueArgs<ExtArgs>>): Prisma__AboutUsTranslationClient<$Result.GetResult<Prisma.$AboutUsTranslationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AboutUsTranslation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AboutUsTranslationFindUniqueOrThrowArgs} args - Arguments to find a AboutUsTranslation
     * @example
     * // Get one AboutUsTranslation
     * const aboutUsTranslation = await prisma.aboutUsTranslation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AboutUsTranslationFindUniqueOrThrowArgs>(args: SelectSubset<T, AboutUsTranslationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AboutUsTranslationClient<$Result.GetResult<Prisma.$AboutUsTranslationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AboutUsTranslation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutUsTranslationFindFirstArgs} args - Arguments to find a AboutUsTranslation
     * @example
     * // Get one AboutUsTranslation
     * const aboutUsTranslation = await prisma.aboutUsTranslation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AboutUsTranslationFindFirstArgs>(args?: SelectSubset<T, AboutUsTranslationFindFirstArgs<ExtArgs>>): Prisma__AboutUsTranslationClient<$Result.GetResult<Prisma.$AboutUsTranslationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AboutUsTranslation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutUsTranslationFindFirstOrThrowArgs} args - Arguments to find a AboutUsTranslation
     * @example
     * // Get one AboutUsTranslation
     * const aboutUsTranslation = await prisma.aboutUsTranslation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AboutUsTranslationFindFirstOrThrowArgs>(args?: SelectSubset<T, AboutUsTranslationFindFirstOrThrowArgs<ExtArgs>>): Prisma__AboutUsTranslationClient<$Result.GetResult<Prisma.$AboutUsTranslationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AboutUsTranslations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutUsTranslationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AboutUsTranslations
     * const aboutUsTranslations = await prisma.aboutUsTranslation.findMany()
     * 
     * // Get first 10 AboutUsTranslations
     * const aboutUsTranslations = await prisma.aboutUsTranslation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aboutUsTranslationWithIdOnly = await prisma.aboutUsTranslation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AboutUsTranslationFindManyArgs>(args?: SelectSubset<T, AboutUsTranslationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AboutUsTranslationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AboutUsTranslation.
     * @param {AboutUsTranslationCreateArgs} args - Arguments to create a AboutUsTranslation.
     * @example
     * // Create one AboutUsTranslation
     * const AboutUsTranslation = await prisma.aboutUsTranslation.create({
     *   data: {
     *     // ... data to create a AboutUsTranslation
     *   }
     * })
     * 
     */
    create<T extends AboutUsTranslationCreateArgs>(args: SelectSubset<T, AboutUsTranslationCreateArgs<ExtArgs>>): Prisma__AboutUsTranslationClient<$Result.GetResult<Prisma.$AboutUsTranslationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AboutUsTranslations.
     * @param {AboutUsTranslationCreateManyArgs} args - Arguments to create many AboutUsTranslations.
     * @example
     * // Create many AboutUsTranslations
     * const aboutUsTranslation = await prisma.aboutUsTranslation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AboutUsTranslationCreateManyArgs>(args?: SelectSubset<T, AboutUsTranslationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AboutUsTranslations and returns the data saved in the database.
     * @param {AboutUsTranslationCreateManyAndReturnArgs} args - Arguments to create many AboutUsTranslations.
     * @example
     * // Create many AboutUsTranslations
     * const aboutUsTranslation = await prisma.aboutUsTranslation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AboutUsTranslations and only return the `id`
     * const aboutUsTranslationWithIdOnly = await prisma.aboutUsTranslation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AboutUsTranslationCreateManyAndReturnArgs>(args?: SelectSubset<T, AboutUsTranslationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AboutUsTranslationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AboutUsTranslation.
     * @param {AboutUsTranslationDeleteArgs} args - Arguments to delete one AboutUsTranslation.
     * @example
     * // Delete one AboutUsTranslation
     * const AboutUsTranslation = await prisma.aboutUsTranslation.delete({
     *   where: {
     *     // ... filter to delete one AboutUsTranslation
     *   }
     * })
     * 
     */
    delete<T extends AboutUsTranslationDeleteArgs>(args: SelectSubset<T, AboutUsTranslationDeleteArgs<ExtArgs>>): Prisma__AboutUsTranslationClient<$Result.GetResult<Prisma.$AboutUsTranslationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AboutUsTranslation.
     * @param {AboutUsTranslationUpdateArgs} args - Arguments to update one AboutUsTranslation.
     * @example
     * // Update one AboutUsTranslation
     * const aboutUsTranslation = await prisma.aboutUsTranslation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AboutUsTranslationUpdateArgs>(args: SelectSubset<T, AboutUsTranslationUpdateArgs<ExtArgs>>): Prisma__AboutUsTranslationClient<$Result.GetResult<Prisma.$AboutUsTranslationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AboutUsTranslations.
     * @param {AboutUsTranslationDeleteManyArgs} args - Arguments to filter AboutUsTranslations to delete.
     * @example
     * // Delete a few AboutUsTranslations
     * const { count } = await prisma.aboutUsTranslation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AboutUsTranslationDeleteManyArgs>(args?: SelectSubset<T, AboutUsTranslationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AboutUsTranslations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutUsTranslationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AboutUsTranslations
     * const aboutUsTranslation = await prisma.aboutUsTranslation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AboutUsTranslationUpdateManyArgs>(args: SelectSubset<T, AboutUsTranslationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AboutUsTranslations and returns the data updated in the database.
     * @param {AboutUsTranslationUpdateManyAndReturnArgs} args - Arguments to update many AboutUsTranslations.
     * @example
     * // Update many AboutUsTranslations
     * const aboutUsTranslation = await prisma.aboutUsTranslation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AboutUsTranslations and only return the `id`
     * const aboutUsTranslationWithIdOnly = await prisma.aboutUsTranslation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AboutUsTranslationUpdateManyAndReturnArgs>(args: SelectSubset<T, AboutUsTranslationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AboutUsTranslationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AboutUsTranslation.
     * @param {AboutUsTranslationUpsertArgs} args - Arguments to update or create a AboutUsTranslation.
     * @example
     * // Update or create a AboutUsTranslation
     * const aboutUsTranslation = await prisma.aboutUsTranslation.upsert({
     *   create: {
     *     // ... data to create a AboutUsTranslation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AboutUsTranslation we want to update
     *   }
     * })
     */
    upsert<T extends AboutUsTranslationUpsertArgs>(args: SelectSubset<T, AboutUsTranslationUpsertArgs<ExtArgs>>): Prisma__AboutUsTranslationClient<$Result.GetResult<Prisma.$AboutUsTranslationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AboutUsTranslations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutUsTranslationCountArgs} args - Arguments to filter AboutUsTranslations to count.
     * @example
     * // Count the number of AboutUsTranslations
     * const count = await prisma.aboutUsTranslation.count({
     *   where: {
     *     // ... the filter for the AboutUsTranslations we want to count
     *   }
     * })
    **/
    count<T extends AboutUsTranslationCountArgs>(
      args?: Subset<T, AboutUsTranslationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AboutUsTranslationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AboutUsTranslation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutUsTranslationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AboutUsTranslationAggregateArgs>(args: Subset<T, AboutUsTranslationAggregateArgs>): Prisma.PrismaPromise<GetAboutUsTranslationAggregateType<T>>

    /**
     * Group by AboutUsTranslation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AboutUsTranslationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AboutUsTranslationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AboutUsTranslationGroupByArgs['orderBy'] }
        : { orderBy?: AboutUsTranslationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AboutUsTranslationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAboutUsTranslationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AboutUsTranslation model
   */
  readonly fields: AboutUsTranslationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AboutUsTranslation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AboutUsTranslationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    about_us<T extends AboutUsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AboutUsDefaultArgs<ExtArgs>>): Prisma__AboutUsClient<$Result.GetResult<Prisma.$AboutUsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AboutUsTranslation model
   */
  interface AboutUsTranslationFieldRefs {
    readonly id: FieldRef<"AboutUsTranslation", 'Int'>
    readonly about_us_id: FieldRef<"AboutUsTranslation", 'Int'>
    readonly language: FieldRef<"AboutUsTranslation", 'Language'>
    readonly content: FieldRef<"AboutUsTranslation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AboutUsTranslation findUnique
   */
  export type AboutUsTranslationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutUsTranslation
     */
    select?: AboutUsTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AboutUsTranslation
     */
    omit?: AboutUsTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AboutUsTranslationInclude<ExtArgs> | null
    /**
     * Filter, which AboutUsTranslation to fetch.
     */
    where: AboutUsTranslationWhereUniqueInput
  }

  /**
   * AboutUsTranslation findUniqueOrThrow
   */
  export type AboutUsTranslationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutUsTranslation
     */
    select?: AboutUsTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AboutUsTranslation
     */
    omit?: AboutUsTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AboutUsTranslationInclude<ExtArgs> | null
    /**
     * Filter, which AboutUsTranslation to fetch.
     */
    where: AboutUsTranslationWhereUniqueInput
  }

  /**
   * AboutUsTranslation findFirst
   */
  export type AboutUsTranslationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutUsTranslation
     */
    select?: AboutUsTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AboutUsTranslation
     */
    omit?: AboutUsTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AboutUsTranslationInclude<ExtArgs> | null
    /**
     * Filter, which AboutUsTranslation to fetch.
     */
    where?: AboutUsTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AboutUsTranslations to fetch.
     */
    orderBy?: AboutUsTranslationOrderByWithRelationInput | AboutUsTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AboutUsTranslations.
     */
    cursor?: AboutUsTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AboutUsTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AboutUsTranslations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AboutUsTranslations.
     */
    distinct?: AboutUsTranslationScalarFieldEnum | AboutUsTranslationScalarFieldEnum[]
  }

  /**
   * AboutUsTranslation findFirstOrThrow
   */
  export type AboutUsTranslationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutUsTranslation
     */
    select?: AboutUsTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AboutUsTranslation
     */
    omit?: AboutUsTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AboutUsTranslationInclude<ExtArgs> | null
    /**
     * Filter, which AboutUsTranslation to fetch.
     */
    where?: AboutUsTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AboutUsTranslations to fetch.
     */
    orderBy?: AboutUsTranslationOrderByWithRelationInput | AboutUsTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AboutUsTranslations.
     */
    cursor?: AboutUsTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AboutUsTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AboutUsTranslations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AboutUsTranslations.
     */
    distinct?: AboutUsTranslationScalarFieldEnum | AboutUsTranslationScalarFieldEnum[]
  }

  /**
   * AboutUsTranslation findMany
   */
  export type AboutUsTranslationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutUsTranslation
     */
    select?: AboutUsTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AboutUsTranslation
     */
    omit?: AboutUsTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AboutUsTranslationInclude<ExtArgs> | null
    /**
     * Filter, which AboutUsTranslations to fetch.
     */
    where?: AboutUsTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AboutUsTranslations to fetch.
     */
    orderBy?: AboutUsTranslationOrderByWithRelationInput | AboutUsTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AboutUsTranslations.
     */
    cursor?: AboutUsTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AboutUsTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AboutUsTranslations.
     */
    skip?: number
    distinct?: AboutUsTranslationScalarFieldEnum | AboutUsTranslationScalarFieldEnum[]
  }

  /**
   * AboutUsTranslation create
   */
  export type AboutUsTranslationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutUsTranslation
     */
    select?: AboutUsTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AboutUsTranslation
     */
    omit?: AboutUsTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AboutUsTranslationInclude<ExtArgs> | null
    /**
     * The data needed to create a AboutUsTranslation.
     */
    data: XOR<AboutUsTranslationCreateInput, AboutUsTranslationUncheckedCreateInput>
  }

  /**
   * AboutUsTranslation createMany
   */
  export type AboutUsTranslationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AboutUsTranslations.
     */
    data: AboutUsTranslationCreateManyInput | AboutUsTranslationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AboutUsTranslation createManyAndReturn
   */
  export type AboutUsTranslationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutUsTranslation
     */
    select?: AboutUsTranslationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AboutUsTranslation
     */
    omit?: AboutUsTranslationOmit<ExtArgs> | null
    /**
     * The data used to create many AboutUsTranslations.
     */
    data: AboutUsTranslationCreateManyInput | AboutUsTranslationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AboutUsTranslationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AboutUsTranslation update
   */
  export type AboutUsTranslationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutUsTranslation
     */
    select?: AboutUsTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AboutUsTranslation
     */
    omit?: AboutUsTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AboutUsTranslationInclude<ExtArgs> | null
    /**
     * The data needed to update a AboutUsTranslation.
     */
    data: XOR<AboutUsTranslationUpdateInput, AboutUsTranslationUncheckedUpdateInput>
    /**
     * Choose, which AboutUsTranslation to update.
     */
    where: AboutUsTranslationWhereUniqueInput
  }

  /**
   * AboutUsTranslation updateMany
   */
  export type AboutUsTranslationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AboutUsTranslations.
     */
    data: XOR<AboutUsTranslationUpdateManyMutationInput, AboutUsTranslationUncheckedUpdateManyInput>
    /**
     * Filter which AboutUsTranslations to update
     */
    where?: AboutUsTranslationWhereInput
    /**
     * Limit how many AboutUsTranslations to update.
     */
    limit?: number
  }

  /**
   * AboutUsTranslation updateManyAndReturn
   */
  export type AboutUsTranslationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutUsTranslation
     */
    select?: AboutUsTranslationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AboutUsTranslation
     */
    omit?: AboutUsTranslationOmit<ExtArgs> | null
    /**
     * The data used to update AboutUsTranslations.
     */
    data: XOR<AboutUsTranslationUpdateManyMutationInput, AboutUsTranslationUncheckedUpdateManyInput>
    /**
     * Filter which AboutUsTranslations to update
     */
    where?: AboutUsTranslationWhereInput
    /**
     * Limit how many AboutUsTranslations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AboutUsTranslationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AboutUsTranslation upsert
   */
  export type AboutUsTranslationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutUsTranslation
     */
    select?: AboutUsTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AboutUsTranslation
     */
    omit?: AboutUsTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AboutUsTranslationInclude<ExtArgs> | null
    /**
     * The filter to search for the AboutUsTranslation to update in case it exists.
     */
    where: AboutUsTranslationWhereUniqueInput
    /**
     * In case the AboutUsTranslation found by the `where` argument doesn't exist, create a new AboutUsTranslation with this data.
     */
    create: XOR<AboutUsTranslationCreateInput, AboutUsTranslationUncheckedCreateInput>
    /**
     * In case the AboutUsTranslation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AboutUsTranslationUpdateInput, AboutUsTranslationUncheckedUpdateInput>
  }

  /**
   * AboutUsTranslation delete
   */
  export type AboutUsTranslationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutUsTranslation
     */
    select?: AboutUsTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AboutUsTranslation
     */
    omit?: AboutUsTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AboutUsTranslationInclude<ExtArgs> | null
    /**
     * Filter which AboutUsTranslation to delete.
     */
    where: AboutUsTranslationWhereUniqueInput
  }

  /**
   * AboutUsTranslation deleteMany
   */
  export type AboutUsTranslationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AboutUsTranslations to delete
     */
    where?: AboutUsTranslationWhereInput
    /**
     * Limit how many AboutUsTranslations to delete.
     */
    limit?: number
  }

  /**
   * AboutUsTranslation without action
   */
  export type AboutUsTranslationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AboutUsTranslation
     */
    select?: AboutUsTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AboutUsTranslation
     */
    omit?: AboutUsTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AboutUsTranslationInclude<ExtArgs> | null
  }


  /**
   * Model Faq
   */

  export type AggregateFaq = {
    _count: FaqCountAggregateOutputType | null
    _avg: FaqAvgAggregateOutputType | null
    _sum: FaqSumAggregateOutputType | null
    _min: FaqMinAggregateOutputType | null
    _max: FaqMaxAggregateOutputType | null
  }

  export type FaqAvgAggregateOutputType = {
    id: number | null
    created_at: number | null
    updated_at: number | null
  }

  export type FaqSumAggregateOutputType = {
    id: number | null
    created_at: bigint | null
    updated_at: bigint | null
  }

  export type FaqMinAggregateOutputType = {
    id: number | null
    created_at: bigint | null
    updated_at: bigint | null
  }

  export type FaqMaxAggregateOutputType = {
    id: number | null
    created_at: bigint | null
    updated_at: bigint | null
  }

  export type FaqCountAggregateOutputType = {
    id: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type FaqAvgAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
  }

  export type FaqSumAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
  }

  export type FaqMinAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
  }

  export type FaqMaxAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
  }

  export type FaqCountAggregateInputType = {
    id?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type FaqAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Faq to aggregate.
     */
    where?: FaqWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Faqs to fetch.
     */
    orderBy?: FaqOrderByWithRelationInput | FaqOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FaqWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Faqs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Faqs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Faqs
    **/
    _count?: true | FaqCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FaqAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FaqSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FaqMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FaqMaxAggregateInputType
  }

  export type GetFaqAggregateType<T extends FaqAggregateArgs> = {
        [P in keyof T & keyof AggregateFaq]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFaq[P]>
      : GetScalarType<T[P], AggregateFaq[P]>
  }




  export type FaqGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FaqWhereInput
    orderBy?: FaqOrderByWithAggregationInput | FaqOrderByWithAggregationInput[]
    by: FaqScalarFieldEnum[] | FaqScalarFieldEnum
    having?: FaqScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FaqCountAggregateInputType | true
    _avg?: FaqAvgAggregateInputType
    _sum?: FaqSumAggregateInputType
    _min?: FaqMinAggregateInputType
    _max?: FaqMaxAggregateInputType
  }

  export type FaqGroupByOutputType = {
    id: number
    created_at: bigint
    updated_at: bigint
    _count: FaqCountAggregateOutputType | null
    _avg: FaqAvgAggregateOutputType | null
    _sum: FaqSumAggregateOutputType | null
    _min: FaqMinAggregateOutputType | null
    _max: FaqMaxAggregateOutputType | null
  }

  type GetFaqGroupByPayload<T extends FaqGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FaqGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FaqGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FaqGroupByOutputType[P]>
            : GetScalarType<T[P], FaqGroupByOutputType[P]>
        }
      >
    >


  export type FaqSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
    translations?: boolean | Faq$translationsArgs<ExtArgs>
    _count?: boolean | FaqCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["faq"]>

  export type FaqSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["faq"]>

  export type FaqSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["faq"]>

  export type FaqSelectScalar = {
    id?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type FaqOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "created_at" | "updated_at", ExtArgs["result"]["faq"]>
  export type FaqInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    translations?: boolean | Faq$translationsArgs<ExtArgs>
    _count?: boolean | FaqCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FaqIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type FaqIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $FaqPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Faq"
    objects: {
      translations: Prisma.$FaqTranslationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      created_at: bigint
      updated_at: bigint
    }, ExtArgs["result"]["faq"]>
    composites: {}
  }

  type FaqGetPayload<S extends boolean | null | undefined | FaqDefaultArgs> = $Result.GetResult<Prisma.$FaqPayload, S>

  type FaqCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FaqFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FaqCountAggregateInputType | true
    }

  export interface FaqDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Faq'], meta: { name: 'Faq' } }
    /**
     * Find zero or one Faq that matches the filter.
     * @param {FaqFindUniqueArgs} args - Arguments to find a Faq
     * @example
     * // Get one Faq
     * const faq = await prisma.faq.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FaqFindUniqueArgs>(args: SelectSubset<T, FaqFindUniqueArgs<ExtArgs>>): Prisma__FaqClient<$Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Faq that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FaqFindUniqueOrThrowArgs} args - Arguments to find a Faq
     * @example
     * // Get one Faq
     * const faq = await prisma.faq.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FaqFindUniqueOrThrowArgs>(args: SelectSubset<T, FaqFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FaqClient<$Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Faq that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqFindFirstArgs} args - Arguments to find a Faq
     * @example
     * // Get one Faq
     * const faq = await prisma.faq.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FaqFindFirstArgs>(args?: SelectSubset<T, FaqFindFirstArgs<ExtArgs>>): Prisma__FaqClient<$Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Faq that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqFindFirstOrThrowArgs} args - Arguments to find a Faq
     * @example
     * // Get one Faq
     * const faq = await prisma.faq.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FaqFindFirstOrThrowArgs>(args?: SelectSubset<T, FaqFindFirstOrThrowArgs<ExtArgs>>): Prisma__FaqClient<$Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Faqs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Faqs
     * const faqs = await prisma.faq.findMany()
     * 
     * // Get first 10 Faqs
     * const faqs = await prisma.faq.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const faqWithIdOnly = await prisma.faq.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FaqFindManyArgs>(args?: SelectSubset<T, FaqFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Faq.
     * @param {FaqCreateArgs} args - Arguments to create a Faq.
     * @example
     * // Create one Faq
     * const Faq = await prisma.faq.create({
     *   data: {
     *     // ... data to create a Faq
     *   }
     * })
     * 
     */
    create<T extends FaqCreateArgs>(args: SelectSubset<T, FaqCreateArgs<ExtArgs>>): Prisma__FaqClient<$Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Faqs.
     * @param {FaqCreateManyArgs} args - Arguments to create many Faqs.
     * @example
     * // Create many Faqs
     * const faq = await prisma.faq.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FaqCreateManyArgs>(args?: SelectSubset<T, FaqCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Faqs and returns the data saved in the database.
     * @param {FaqCreateManyAndReturnArgs} args - Arguments to create many Faqs.
     * @example
     * // Create many Faqs
     * const faq = await prisma.faq.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Faqs and only return the `id`
     * const faqWithIdOnly = await prisma.faq.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FaqCreateManyAndReturnArgs>(args?: SelectSubset<T, FaqCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Faq.
     * @param {FaqDeleteArgs} args - Arguments to delete one Faq.
     * @example
     * // Delete one Faq
     * const Faq = await prisma.faq.delete({
     *   where: {
     *     // ... filter to delete one Faq
     *   }
     * })
     * 
     */
    delete<T extends FaqDeleteArgs>(args: SelectSubset<T, FaqDeleteArgs<ExtArgs>>): Prisma__FaqClient<$Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Faq.
     * @param {FaqUpdateArgs} args - Arguments to update one Faq.
     * @example
     * // Update one Faq
     * const faq = await prisma.faq.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FaqUpdateArgs>(args: SelectSubset<T, FaqUpdateArgs<ExtArgs>>): Prisma__FaqClient<$Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Faqs.
     * @param {FaqDeleteManyArgs} args - Arguments to filter Faqs to delete.
     * @example
     * // Delete a few Faqs
     * const { count } = await prisma.faq.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FaqDeleteManyArgs>(args?: SelectSubset<T, FaqDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Faqs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Faqs
     * const faq = await prisma.faq.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FaqUpdateManyArgs>(args: SelectSubset<T, FaqUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Faqs and returns the data updated in the database.
     * @param {FaqUpdateManyAndReturnArgs} args - Arguments to update many Faqs.
     * @example
     * // Update many Faqs
     * const faq = await prisma.faq.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Faqs and only return the `id`
     * const faqWithIdOnly = await prisma.faq.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FaqUpdateManyAndReturnArgs>(args: SelectSubset<T, FaqUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Faq.
     * @param {FaqUpsertArgs} args - Arguments to update or create a Faq.
     * @example
     * // Update or create a Faq
     * const faq = await prisma.faq.upsert({
     *   create: {
     *     // ... data to create a Faq
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Faq we want to update
     *   }
     * })
     */
    upsert<T extends FaqUpsertArgs>(args: SelectSubset<T, FaqUpsertArgs<ExtArgs>>): Prisma__FaqClient<$Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Faqs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqCountArgs} args - Arguments to filter Faqs to count.
     * @example
     * // Count the number of Faqs
     * const count = await prisma.faq.count({
     *   where: {
     *     // ... the filter for the Faqs we want to count
     *   }
     * })
    **/
    count<T extends FaqCountArgs>(
      args?: Subset<T, FaqCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FaqCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Faq.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FaqAggregateArgs>(args: Subset<T, FaqAggregateArgs>): Prisma.PrismaPromise<GetFaqAggregateType<T>>

    /**
     * Group by Faq.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FaqGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FaqGroupByArgs['orderBy'] }
        : { orderBy?: FaqGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FaqGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFaqGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Faq model
   */
  readonly fields: FaqFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Faq.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FaqClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    translations<T extends Faq$translationsArgs<ExtArgs> = {}>(args?: Subset<T, Faq$translationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FaqTranslationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Faq model
   */
  interface FaqFieldRefs {
    readonly id: FieldRef<"Faq", 'Int'>
    readonly created_at: FieldRef<"Faq", 'BigInt'>
    readonly updated_at: FieldRef<"Faq", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * Faq findUnique
   */
  export type FaqFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faq
     */
    select?: FaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Faq
     */
    omit?: FaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqInclude<ExtArgs> | null
    /**
     * Filter, which Faq to fetch.
     */
    where: FaqWhereUniqueInput
  }

  /**
   * Faq findUniqueOrThrow
   */
  export type FaqFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faq
     */
    select?: FaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Faq
     */
    omit?: FaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqInclude<ExtArgs> | null
    /**
     * Filter, which Faq to fetch.
     */
    where: FaqWhereUniqueInput
  }

  /**
   * Faq findFirst
   */
  export type FaqFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faq
     */
    select?: FaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Faq
     */
    omit?: FaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqInclude<ExtArgs> | null
    /**
     * Filter, which Faq to fetch.
     */
    where?: FaqWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Faqs to fetch.
     */
    orderBy?: FaqOrderByWithRelationInput | FaqOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Faqs.
     */
    cursor?: FaqWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Faqs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Faqs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Faqs.
     */
    distinct?: FaqScalarFieldEnum | FaqScalarFieldEnum[]
  }

  /**
   * Faq findFirstOrThrow
   */
  export type FaqFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faq
     */
    select?: FaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Faq
     */
    omit?: FaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqInclude<ExtArgs> | null
    /**
     * Filter, which Faq to fetch.
     */
    where?: FaqWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Faqs to fetch.
     */
    orderBy?: FaqOrderByWithRelationInput | FaqOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Faqs.
     */
    cursor?: FaqWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Faqs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Faqs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Faqs.
     */
    distinct?: FaqScalarFieldEnum | FaqScalarFieldEnum[]
  }

  /**
   * Faq findMany
   */
  export type FaqFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faq
     */
    select?: FaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Faq
     */
    omit?: FaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqInclude<ExtArgs> | null
    /**
     * Filter, which Faqs to fetch.
     */
    where?: FaqWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Faqs to fetch.
     */
    orderBy?: FaqOrderByWithRelationInput | FaqOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Faqs.
     */
    cursor?: FaqWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Faqs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Faqs.
     */
    skip?: number
    distinct?: FaqScalarFieldEnum | FaqScalarFieldEnum[]
  }

  /**
   * Faq create
   */
  export type FaqCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faq
     */
    select?: FaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Faq
     */
    omit?: FaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqInclude<ExtArgs> | null
    /**
     * The data needed to create a Faq.
     */
    data: XOR<FaqCreateInput, FaqUncheckedCreateInput>
  }

  /**
   * Faq createMany
   */
  export type FaqCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Faqs.
     */
    data: FaqCreateManyInput | FaqCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Faq createManyAndReturn
   */
  export type FaqCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faq
     */
    select?: FaqSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Faq
     */
    omit?: FaqOmit<ExtArgs> | null
    /**
     * The data used to create many Faqs.
     */
    data: FaqCreateManyInput | FaqCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Faq update
   */
  export type FaqUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faq
     */
    select?: FaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Faq
     */
    omit?: FaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqInclude<ExtArgs> | null
    /**
     * The data needed to update a Faq.
     */
    data: XOR<FaqUpdateInput, FaqUncheckedUpdateInput>
    /**
     * Choose, which Faq to update.
     */
    where: FaqWhereUniqueInput
  }

  /**
   * Faq updateMany
   */
  export type FaqUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Faqs.
     */
    data: XOR<FaqUpdateManyMutationInput, FaqUncheckedUpdateManyInput>
    /**
     * Filter which Faqs to update
     */
    where?: FaqWhereInput
    /**
     * Limit how many Faqs to update.
     */
    limit?: number
  }

  /**
   * Faq updateManyAndReturn
   */
  export type FaqUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faq
     */
    select?: FaqSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Faq
     */
    omit?: FaqOmit<ExtArgs> | null
    /**
     * The data used to update Faqs.
     */
    data: XOR<FaqUpdateManyMutationInput, FaqUncheckedUpdateManyInput>
    /**
     * Filter which Faqs to update
     */
    where?: FaqWhereInput
    /**
     * Limit how many Faqs to update.
     */
    limit?: number
  }

  /**
   * Faq upsert
   */
  export type FaqUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faq
     */
    select?: FaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Faq
     */
    omit?: FaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqInclude<ExtArgs> | null
    /**
     * The filter to search for the Faq to update in case it exists.
     */
    where: FaqWhereUniqueInput
    /**
     * In case the Faq found by the `where` argument doesn't exist, create a new Faq with this data.
     */
    create: XOR<FaqCreateInput, FaqUncheckedCreateInput>
    /**
     * In case the Faq was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FaqUpdateInput, FaqUncheckedUpdateInput>
  }

  /**
   * Faq delete
   */
  export type FaqDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faq
     */
    select?: FaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Faq
     */
    omit?: FaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqInclude<ExtArgs> | null
    /**
     * Filter which Faq to delete.
     */
    where: FaqWhereUniqueInput
  }

  /**
   * Faq deleteMany
   */
  export type FaqDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Faqs to delete
     */
    where?: FaqWhereInput
    /**
     * Limit how many Faqs to delete.
     */
    limit?: number
  }

  /**
   * Faq.translations
   */
  export type Faq$translationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaqTranslation
     */
    select?: FaqTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FaqTranslation
     */
    omit?: FaqTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqTranslationInclude<ExtArgs> | null
    where?: FaqTranslationWhereInput
    orderBy?: FaqTranslationOrderByWithRelationInput | FaqTranslationOrderByWithRelationInput[]
    cursor?: FaqTranslationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FaqTranslationScalarFieldEnum | FaqTranslationScalarFieldEnum[]
  }

  /**
   * Faq without action
   */
  export type FaqDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faq
     */
    select?: FaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Faq
     */
    omit?: FaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqInclude<ExtArgs> | null
  }


  /**
   * Model FaqTranslation
   */

  export type AggregateFaqTranslation = {
    _count: FaqTranslationCountAggregateOutputType | null
    _avg: FaqTranslationAvgAggregateOutputType | null
    _sum: FaqTranslationSumAggregateOutputType | null
    _min: FaqTranslationMinAggregateOutputType | null
    _max: FaqTranslationMaxAggregateOutputType | null
  }

  export type FaqTranslationAvgAggregateOutputType = {
    id: number | null
    faq_id: number | null
  }

  export type FaqTranslationSumAggregateOutputType = {
    id: number | null
    faq_id: number | null
  }

  export type FaqTranslationMinAggregateOutputType = {
    id: number | null
    faq_id: number | null
    language: $Enums.Language | null
    title: string | null
    content: string | null
  }

  export type FaqTranslationMaxAggregateOutputType = {
    id: number | null
    faq_id: number | null
    language: $Enums.Language | null
    title: string | null
    content: string | null
  }

  export type FaqTranslationCountAggregateOutputType = {
    id: number
    faq_id: number
    language: number
    title: number
    content: number
    _all: number
  }


  export type FaqTranslationAvgAggregateInputType = {
    id?: true
    faq_id?: true
  }

  export type FaqTranslationSumAggregateInputType = {
    id?: true
    faq_id?: true
  }

  export type FaqTranslationMinAggregateInputType = {
    id?: true
    faq_id?: true
    language?: true
    title?: true
    content?: true
  }

  export type FaqTranslationMaxAggregateInputType = {
    id?: true
    faq_id?: true
    language?: true
    title?: true
    content?: true
  }

  export type FaqTranslationCountAggregateInputType = {
    id?: true
    faq_id?: true
    language?: true
    title?: true
    content?: true
    _all?: true
  }

  export type FaqTranslationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FaqTranslation to aggregate.
     */
    where?: FaqTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FaqTranslations to fetch.
     */
    orderBy?: FaqTranslationOrderByWithRelationInput | FaqTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FaqTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FaqTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FaqTranslations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FaqTranslations
    **/
    _count?: true | FaqTranslationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FaqTranslationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FaqTranslationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FaqTranslationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FaqTranslationMaxAggregateInputType
  }

  export type GetFaqTranslationAggregateType<T extends FaqTranslationAggregateArgs> = {
        [P in keyof T & keyof AggregateFaqTranslation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFaqTranslation[P]>
      : GetScalarType<T[P], AggregateFaqTranslation[P]>
  }




  export type FaqTranslationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FaqTranslationWhereInput
    orderBy?: FaqTranslationOrderByWithAggregationInput | FaqTranslationOrderByWithAggregationInput[]
    by: FaqTranslationScalarFieldEnum[] | FaqTranslationScalarFieldEnum
    having?: FaqTranslationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FaqTranslationCountAggregateInputType | true
    _avg?: FaqTranslationAvgAggregateInputType
    _sum?: FaqTranslationSumAggregateInputType
    _min?: FaqTranslationMinAggregateInputType
    _max?: FaqTranslationMaxAggregateInputType
  }

  export type FaqTranslationGroupByOutputType = {
    id: number
    faq_id: number
    language: $Enums.Language
    title: string
    content: string
    _count: FaqTranslationCountAggregateOutputType | null
    _avg: FaqTranslationAvgAggregateOutputType | null
    _sum: FaqTranslationSumAggregateOutputType | null
    _min: FaqTranslationMinAggregateOutputType | null
    _max: FaqTranslationMaxAggregateOutputType | null
  }

  type GetFaqTranslationGroupByPayload<T extends FaqTranslationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FaqTranslationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FaqTranslationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FaqTranslationGroupByOutputType[P]>
            : GetScalarType<T[P], FaqTranslationGroupByOutputType[P]>
        }
      >
    >


  export type FaqTranslationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    faq_id?: boolean
    language?: boolean
    title?: boolean
    content?: boolean
    faq?: boolean | FaqDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["faqTranslation"]>

  export type FaqTranslationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    faq_id?: boolean
    language?: boolean
    title?: boolean
    content?: boolean
    faq?: boolean | FaqDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["faqTranslation"]>

  export type FaqTranslationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    faq_id?: boolean
    language?: boolean
    title?: boolean
    content?: boolean
    faq?: boolean | FaqDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["faqTranslation"]>

  export type FaqTranslationSelectScalar = {
    id?: boolean
    faq_id?: boolean
    language?: boolean
    title?: boolean
    content?: boolean
  }

  export type FaqTranslationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "faq_id" | "language" | "title" | "content", ExtArgs["result"]["faqTranslation"]>
  export type FaqTranslationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    faq?: boolean | FaqDefaultArgs<ExtArgs>
  }
  export type FaqTranslationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    faq?: boolean | FaqDefaultArgs<ExtArgs>
  }
  export type FaqTranslationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    faq?: boolean | FaqDefaultArgs<ExtArgs>
  }

  export type $FaqTranslationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FaqTranslation"
    objects: {
      faq: Prisma.$FaqPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      faq_id: number
      language: $Enums.Language
      title: string
      content: string
    }, ExtArgs["result"]["faqTranslation"]>
    composites: {}
  }

  type FaqTranslationGetPayload<S extends boolean | null | undefined | FaqTranslationDefaultArgs> = $Result.GetResult<Prisma.$FaqTranslationPayload, S>

  type FaqTranslationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FaqTranslationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FaqTranslationCountAggregateInputType | true
    }

  export interface FaqTranslationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FaqTranslation'], meta: { name: 'FaqTranslation' } }
    /**
     * Find zero or one FaqTranslation that matches the filter.
     * @param {FaqTranslationFindUniqueArgs} args - Arguments to find a FaqTranslation
     * @example
     * // Get one FaqTranslation
     * const faqTranslation = await prisma.faqTranslation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FaqTranslationFindUniqueArgs>(args: SelectSubset<T, FaqTranslationFindUniqueArgs<ExtArgs>>): Prisma__FaqTranslationClient<$Result.GetResult<Prisma.$FaqTranslationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FaqTranslation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FaqTranslationFindUniqueOrThrowArgs} args - Arguments to find a FaqTranslation
     * @example
     * // Get one FaqTranslation
     * const faqTranslation = await prisma.faqTranslation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FaqTranslationFindUniqueOrThrowArgs>(args: SelectSubset<T, FaqTranslationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FaqTranslationClient<$Result.GetResult<Prisma.$FaqTranslationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FaqTranslation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqTranslationFindFirstArgs} args - Arguments to find a FaqTranslation
     * @example
     * // Get one FaqTranslation
     * const faqTranslation = await prisma.faqTranslation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FaqTranslationFindFirstArgs>(args?: SelectSubset<T, FaqTranslationFindFirstArgs<ExtArgs>>): Prisma__FaqTranslationClient<$Result.GetResult<Prisma.$FaqTranslationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FaqTranslation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqTranslationFindFirstOrThrowArgs} args - Arguments to find a FaqTranslation
     * @example
     * // Get one FaqTranslation
     * const faqTranslation = await prisma.faqTranslation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FaqTranslationFindFirstOrThrowArgs>(args?: SelectSubset<T, FaqTranslationFindFirstOrThrowArgs<ExtArgs>>): Prisma__FaqTranslationClient<$Result.GetResult<Prisma.$FaqTranslationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FaqTranslations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqTranslationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FaqTranslations
     * const faqTranslations = await prisma.faqTranslation.findMany()
     * 
     * // Get first 10 FaqTranslations
     * const faqTranslations = await prisma.faqTranslation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const faqTranslationWithIdOnly = await prisma.faqTranslation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FaqTranslationFindManyArgs>(args?: SelectSubset<T, FaqTranslationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FaqTranslationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FaqTranslation.
     * @param {FaqTranslationCreateArgs} args - Arguments to create a FaqTranslation.
     * @example
     * // Create one FaqTranslation
     * const FaqTranslation = await prisma.faqTranslation.create({
     *   data: {
     *     // ... data to create a FaqTranslation
     *   }
     * })
     * 
     */
    create<T extends FaqTranslationCreateArgs>(args: SelectSubset<T, FaqTranslationCreateArgs<ExtArgs>>): Prisma__FaqTranslationClient<$Result.GetResult<Prisma.$FaqTranslationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FaqTranslations.
     * @param {FaqTranslationCreateManyArgs} args - Arguments to create many FaqTranslations.
     * @example
     * // Create many FaqTranslations
     * const faqTranslation = await prisma.faqTranslation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FaqTranslationCreateManyArgs>(args?: SelectSubset<T, FaqTranslationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FaqTranslations and returns the data saved in the database.
     * @param {FaqTranslationCreateManyAndReturnArgs} args - Arguments to create many FaqTranslations.
     * @example
     * // Create many FaqTranslations
     * const faqTranslation = await prisma.faqTranslation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FaqTranslations and only return the `id`
     * const faqTranslationWithIdOnly = await prisma.faqTranslation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FaqTranslationCreateManyAndReturnArgs>(args?: SelectSubset<T, FaqTranslationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FaqTranslationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FaqTranslation.
     * @param {FaqTranslationDeleteArgs} args - Arguments to delete one FaqTranslation.
     * @example
     * // Delete one FaqTranslation
     * const FaqTranslation = await prisma.faqTranslation.delete({
     *   where: {
     *     // ... filter to delete one FaqTranslation
     *   }
     * })
     * 
     */
    delete<T extends FaqTranslationDeleteArgs>(args: SelectSubset<T, FaqTranslationDeleteArgs<ExtArgs>>): Prisma__FaqTranslationClient<$Result.GetResult<Prisma.$FaqTranslationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FaqTranslation.
     * @param {FaqTranslationUpdateArgs} args - Arguments to update one FaqTranslation.
     * @example
     * // Update one FaqTranslation
     * const faqTranslation = await prisma.faqTranslation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FaqTranslationUpdateArgs>(args: SelectSubset<T, FaqTranslationUpdateArgs<ExtArgs>>): Prisma__FaqTranslationClient<$Result.GetResult<Prisma.$FaqTranslationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FaqTranslations.
     * @param {FaqTranslationDeleteManyArgs} args - Arguments to filter FaqTranslations to delete.
     * @example
     * // Delete a few FaqTranslations
     * const { count } = await prisma.faqTranslation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FaqTranslationDeleteManyArgs>(args?: SelectSubset<T, FaqTranslationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FaqTranslations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqTranslationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FaqTranslations
     * const faqTranslation = await prisma.faqTranslation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FaqTranslationUpdateManyArgs>(args: SelectSubset<T, FaqTranslationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FaqTranslations and returns the data updated in the database.
     * @param {FaqTranslationUpdateManyAndReturnArgs} args - Arguments to update many FaqTranslations.
     * @example
     * // Update many FaqTranslations
     * const faqTranslation = await prisma.faqTranslation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FaqTranslations and only return the `id`
     * const faqTranslationWithIdOnly = await prisma.faqTranslation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FaqTranslationUpdateManyAndReturnArgs>(args: SelectSubset<T, FaqTranslationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FaqTranslationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FaqTranslation.
     * @param {FaqTranslationUpsertArgs} args - Arguments to update or create a FaqTranslation.
     * @example
     * // Update or create a FaqTranslation
     * const faqTranslation = await prisma.faqTranslation.upsert({
     *   create: {
     *     // ... data to create a FaqTranslation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FaqTranslation we want to update
     *   }
     * })
     */
    upsert<T extends FaqTranslationUpsertArgs>(args: SelectSubset<T, FaqTranslationUpsertArgs<ExtArgs>>): Prisma__FaqTranslationClient<$Result.GetResult<Prisma.$FaqTranslationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FaqTranslations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqTranslationCountArgs} args - Arguments to filter FaqTranslations to count.
     * @example
     * // Count the number of FaqTranslations
     * const count = await prisma.faqTranslation.count({
     *   where: {
     *     // ... the filter for the FaqTranslations we want to count
     *   }
     * })
    **/
    count<T extends FaqTranslationCountArgs>(
      args?: Subset<T, FaqTranslationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FaqTranslationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FaqTranslation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqTranslationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FaqTranslationAggregateArgs>(args: Subset<T, FaqTranslationAggregateArgs>): Prisma.PrismaPromise<GetFaqTranslationAggregateType<T>>

    /**
     * Group by FaqTranslation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqTranslationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FaqTranslationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FaqTranslationGroupByArgs['orderBy'] }
        : { orderBy?: FaqTranslationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FaqTranslationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFaqTranslationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FaqTranslation model
   */
  readonly fields: FaqTranslationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FaqTranslation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FaqTranslationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    faq<T extends FaqDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FaqDefaultArgs<ExtArgs>>): Prisma__FaqClient<$Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FaqTranslation model
   */
  interface FaqTranslationFieldRefs {
    readonly id: FieldRef<"FaqTranslation", 'Int'>
    readonly faq_id: FieldRef<"FaqTranslation", 'Int'>
    readonly language: FieldRef<"FaqTranslation", 'Language'>
    readonly title: FieldRef<"FaqTranslation", 'String'>
    readonly content: FieldRef<"FaqTranslation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FaqTranslation findUnique
   */
  export type FaqTranslationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaqTranslation
     */
    select?: FaqTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FaqTranslation
     */
    omit?: FaqTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqTranslationInclude<ExtArgs> | null
    /**
     * Filter, which FaqTranslation to fetch.
     */
    where: FaqTranslationWhereUniqueInput
  }

  /**
   * FaqTranslation findUniqueOrThrow
   */
  export type FaqTranslationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaqTranslation
     */
    select?: FaqTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FaqTranslation
     */
    omit?: FaqTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqTranslationInclude<ExtArgs> | null
    /**
     * Filter, which FaqTranslation to fetch.
     */
    where: FaqTranslationWhereUniqueInput
  }

  /**
   * FaqTranslation findFirst
   */
  export type FaqTranslationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaqTranslation
     */
    select?: FaqTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FaqTranslation
     */
    omit?: FaqTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqTranslationInclude<ExtArgs> | null
    /**
     * Filter, which FaqTranslation to fetch.
     */
    where?: FaqTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FaqTranslations to fetch.
     */
    orderBy?: FaqTranslationOrderByWithRelationInput | FaqTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FaqTranslations.
     */
    cursor?: FaqTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FaqTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FaqTranslations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FaqTranslations.
     */
    distinct?: FaqTranslationScalarFieldEnum | FaqTranslationScalarFieldEnum[]
  }

  /**
   * FaqTranslation findFirstOrThrow
   */
  export type FaqTranslationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaqTranslation
     */
    select?: FaqTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FaqTranslation
     */
    omit?: FaqTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqTranslationInclude<ExtArgs> | null
    /**
     * Filter, which FaqTranslation to fetch.
     */
    where?: FaqTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FaqTranslations to fetch.
     */
    orderBy?: FaqTranslationOrderByWithRelationInput | FaqTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FaqTranslations.
     */
    cursor?: FaqTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FaqTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FaqTranslations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FaqTranslations.
     */
    distinct?: FaqTranslationScalarFieldEnum | FaqTranslationScalarFieldEnum[]
  }

  /**
   * FaqTranslation findMany
   */
  export type FaqTranslationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaqTranslation
     */
    select?: FaqTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FaqTranslation
     */
    omit?: FaqTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqTranslationInclude<ExtArgs> | null
    /**
     * Filter, which FaqTranslations to fetch.
     */
    where?: FaqTranslationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FaqTranslations to fetch.
     */
    orderBy?: FaqTranslationOrderByWithRelationInput | FaqTranslationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FaqTranslations.
     */
    cursor?: FaqTranslationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FaqTranslations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FaqTranslations.
     */
    skip?: number
    distinct?: FaqTranslationScalarFieldEnum | FaqTranslationScalarFieldEnum[]
  }

  /**
   * FaqTranslation create
   */
  export type FaqTranslationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaqTranslation
     */
    select?: FaqTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FaqTranslation
     */
    omit?: FaqTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqTranslationInclude<ExtArgs> | null
    /**
     * The data needed to create a FaqTranslation.
     */
    data: XOR<FaqTranslationCreateInput, FaqTranslationUncheckedCreateInput>
  }

  /**
   * FaqTranslation createMany
   */
  export type FaqTranslationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FaqTranslations.
     */
    data: FaqTranslationCreateManyInput | FaqTranslationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FaqTranslation createManyAndReturn
   */
  export type FaqTranslationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaqTranslation
     */
    select?: FaqTranslationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FaqTranslation
     */
    omit?: FaqTranslationOmit<ExtArgs> | null
    /**
     * The data used to create many FaqTranslations.
     */
    data: FaqTranslationCreateManyInput | FaqTranslationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqTranslationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FaqTranslation update
   */
  export type FaqTranslationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaqTranslation
     */
    select?: FaqTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FaqTranslation
     */
    omit?: FaqTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqTranslationInclude<ExtArgs> | null
    /**
     * The data needed to update a FaqTranslation.
     */
    data: XOR<FaqTranslationUpdateInput, FaqTranslationUncheckedUpdateInput>
    /**
     * Choose, which FaqTranslation to update.
     */
    where: FaqTranslationWhereUniqueInput
  }

  /**
   * FaqTranslation updateMany
   */
  export type FaqTranslationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FaqTranslations.
     */
    data: XOR<FaqTranslationUpdateManyMutationInput, FaqTranslationUncheckedUpdateManyInput>
    /**
     * Filter which FaqTranslations to update
     */
    where?: FaqTranslationWhereInput
    /**
     * Limit how many FaqTranslations to update.
     */
    limit?: number
  }

  /**
   * FaqTranslation updateManyAndReturn
   */
  export type FaqTranslationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaqTranslation
     */
    select?: FaqTranslationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FaqTranslation
     */
    omit?: FaqTranslationOmit<ExtArgs> | null
    /**
     * The data used to update FaqTranslations.
     */
    data: XOR<FaqTranslationUpdateManyMutationInput, FaqTranslationUncheckedUpdateManyInput>
    /**
     * Filter which FaqTranslations to update
     */
    where?: FaqTranslationWhereInput
    /**
     * Limit how many FaqTranslations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqTranslationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FaqTranslation upsert
   */
  export type FaqTranslationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaqTranslation
     */
    select?: FaqTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FaqTranslation
     */
    omit?: FaqTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqTranslationInclude<ExtArgs> | null
    /**
     * The filter to search for the FaqTranslation to update in case it exists.
     */
    where: FaqTranslationWhereUniqueInput
    /**
     * In case the FaqTranslation found by the `where` argument doesn't exist, create a new FaqTranslation with this data.
     */
    create: XOR<FaqTranslationCreateInput, FaqTranslationUncheckedCreateInput>
    /**
     * In case the FaqTranslation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FaqTranslationUpdateInput, FaqTranslationUncheckedUpdateInput>
  }

  /**
   * FaqTranslation delete
   */
  export type FaqTranslationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaqTranslation
     */
    select?: FaqTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FaqTranslation
     */
    omit?: FaqTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqTranslationInclude<ExtArgs> | null
    /**
     * Filter which FaqTranslation to delete.
     */
    where: FaqTranslationWhereUniqueInput
  }

  /**
   * FaqTranslation deleteMany
   */
  export type FaqTranslationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FaqTranslations to delete
     */
    where?: FaqTranslationWhereInput
    /**
     * Limit how many FaqTranslations to delete.
     */
    limit?: number
  }

  /**
   * FaqTranslation without action
   */
  export type FaqTranslationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaqTranslation
     */
    select?: FaqTranslationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FaqTranslation
     */
    omit?: FaqTranslationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqTranslationInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AdminScalarFieldEnum: {
    id: 'id',
    first_name: 'first_name',
    last_name: 'last_name',
    email: 'email',
    whatsapp_phone_number: 'whatsapp_phone_number',
    picture: 'picture'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const DonationLinkScalarFieldEnum: {
    id: 'id',
    admin_id: 'admin_id',
    currency_code: 'currency_code',
    link: 'link'
  };

  export type DonationLinkScalarFieldEnum = (typeof DonationLinkScalarFieldEnum)[keyof typeof DonationLinkScalarFieldEnum]


  export const OwnerScalarFieldEnum: {
    id: 'id',
    first_name: 'first_name',
    last_name: 'last_name',
    sm_username: 'sm_username',
    picture: 'picture',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type OwnerScalarFieldEnum = (typeof OwnerScalarFieldEnum)[keyof typeof OwnerScalarFieldEnum]


  export const CustomerScalarFieldEnum: {
    id: 'id',
    first_name: 'first_name',
    last_name: 'last_name',
    email: 'email',
    password: 'password',
    phone_number: 'phone_number',
    picture: 'picture',
    last_active: 'last_active'
  };

  export type CustomerScalarFieldEnum = (typeof CustomerScalarFieldEnum)[keyof typeof CustomerScalarFieldEnum]


  export const LicenseScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type LicenseScalarFieldEnum = (typeof LicenseScalarFieldEnum)[keyof typeof LicenseScalarFieldEnum]


  export const LicenseTranslationScalarFieldEnum: {
    id: 'id',
    license_id: 'license_id',
    language: 'language',
    name: 'name',
    content: 'content'
  };

  export type LicenseTranslationScalarFieldEnum = (typeof LicenseTranslationScalarFieldEnum)[keyof typeof LicenseTranslationScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    category_id: 'category_id',
    admin_id: 'admin_id',
    owner_id: 'owner_id',
    license_id: 'license_id',
    name: 'name',
    slug: 'slug',
    price_type: 'price_type',
    download_link: 'download_link',
    is_published: 'is_published',
    is_pinned: 'is_pinned',
    created_at: 'created_at',
    released_at: 'released_at',
    updated_at: 'updated_at'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const ProductTranslationScalarFieldEnum: {
    id: 'id',
    product_id: 'product_id',
    language: 'language',
    description: 'description',
    changelog: 'changelog'
  };

  export type ProductTranslationScalarFieldEnum = (typeof ProductTranslationScalarFieldEnum)[keyof typeof ProductTranslationScalarFieldEnum]


  export const ProductDiscountScalarFieldEnum: {
    id: 'id',
    product_id: 'product_id',
    discount: 'discount',
    expired_at: 'expired_at'
  };

  export type ProductDiscountScalarFieldEnum = (typeof ProductDiscountScalarFieldEnum)[keyof typeof ProductDiscountScalarFieldEnum]


  export const ProductCouponScalarFieldEnum: {
    id: 'id',
    product_id: 'product_id',
    code: 'code',
    discount: 'discount',
    expired_at: 'expired_at'
  };

  export type ProductCouponScalarFieldEnum = (typeof ProductCouponScalarFieldEnum)[keyof typeof ProductCouponScalarFieldEnum]


  export const ProductImageScalarFieldEnum: {
    id: 'id',
    product_id: 'product_id',
    url: 'url',
    is_thumbnail: 'is_thumbnail',
    width: 'width',
    height: 'height'
  };

  export type ProductImageScalarFieldEnum = (typeof ProductImageScalarFieldEnum)[keyof typeof ProductImageScalarFieldEnum]


  export const ProductVariantScalarFieldEnum: {
    id: 'id',
    product_id: 'product_id',
    name: 'name',
    download_link: 'download_link'
  };

  export type ProductVariantScalarFieldEnum = (typeof ProductVariantScalarFieldEnum)[keyof typeof ProductVariantScalarFieldEnum]


  export const ProductPriceScalarFieldEnum: {
    id: 'id',
    variant_id: 'variant_id',
    currency_code: 'currency_code',
    price: 'price'
  };

  export type ProductPriceScalarFieldEnum = (typeof ProductPriceScalarFieldEnum)[keyof typeof ProductPriceScalarFieldEnum]


  export const TermsOfServiceScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type TermsOfServiceScalarFieldEnum = (typeof TermsOfServiceScalarFieldEnum)[keyof typeof TermsOfServiceScalarFieldEnum]


  export const TermsOfServiceTranslationScalarFieldEnum: {
    id: 'id',
    terms_of_service_id: 'terms_of_service_id',
    language: 'language',
    content: 'content'
  };

  export type TermsOfServiceTranslationScalarFieldEnum = (typeof TermsOfServiceTranslationScalarFieldEnum)[keyof typeof TermsOfServiceTranslationScalarFieldEnum]


  export const PrivacyPolicyScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type PrivacyPolicyScalarFieldEnum = (typeof PrivacyPolicyScalarFieldEnum)[keyof typeof PrivacyPolicyScalarFieldEnum]


  export const PrivacyPolicyTranslationScalarFieldEnum: {
    id: 'id',
    privacy_policy_id: 'privacy_policy_id',
    language: 'language',
    content: 'content'
  };

  export type PrivacyPolicyTranslationScalarFieldEnum = (typeof PrivacyPolicyTranslationScalarFieldEnum)[keyof typeof PrivacyPolicyTranslationScalarFieldEnum]


  export const AboutUsScalarFieldEnum: {
    id: 'id'
  };

  export type AboutUsScalarFieldEnum = (typeof AboutUsScalarFieldEnum)[keyof typeof AboutUsScalarFieldEnum]


  export const AboutUsTranslationScalarFieldEnum: {
    id: 'id',
    about_us_id: 'about_us_id',
    language: 'language',
    content: 'content'
  };

  export type AboutUsTranslationScalarFieldEnum = (typeof AboutUsTranslationScalarFieldEnum)[keyof typeof AboutUsTranslationScalarFieldEnum]


  export const FaqScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type FaqScalarFieldEnum = (typeof FaqScalarFieldEnum)[keyof typeof FaqScalarFieldEnum]


  export const FaqTranslationScalarFieldEnum: {
    id: 'id',
    faq_id: 'faq_id',
    language: 'language',
    title: 'title',
    content: 'content'
  };

  export type FaqTranslationScalarFieldEnum = (typeof FaqTranslationScalarFieldEnum)[keyof typeof FaqTranslationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'CurrencyCode'
   */
  export type EnumCurrencyCodeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CurrencyCode'>
    


  /**
   * Reference to a field of type 'CurrencyCode[]'
   */
  export type ListEnumCurrencyCodeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CurrencyCode[]'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'Language'
   */
  export type EnumLanguageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Language'>
    


  /**
   * Reference to a field of type 'Language[]'
   */
  export type ListEnumLanguageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Language[]'>
    


  /**
   * Reference to a field of type 'PriceType'
   */
  export type EnumPriceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PriceType'>
    


  /**
   * Reference to a field of type 'PriceType[]'
   */
  export type ListEnumPriceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PriceType[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type AdminWhereInput = {
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    id?: StringFilter<"Admin"> | string
    first_name?: StringFilter<"Admin"> | string
    last_name?: StringFilter<"Admin"> | string
    email?: StringFilter<"Admin"> | string
    whatsapp_phone_number?: StringFilter<"Admin"> | string
    picture?: StringFilter<"Admin"> | string
    donation_links?: DonationLinkListRelationFilter
    products?: ProductListRelationFilter
  }

  export type AdminOrderByWithRelationInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    whatsapp_phone_number?: SortOrder
    picture?: SortOrder
    donation_links?: DonationLinkOrderByRelationAggregateInput
    products?: ProductOrderByRelationAggregateInput
  }

  export type AdminWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    first_name?: StringFilter<"Admin"> | string
    last_name?: StringFilter<"Admin"> | string
    whatsapp_phone_number?: StringFilter<"Admin"> | string
    picture?: StringFilter<"Admin"> | string
    donation_links?: DonationLinkListRelationFilter
    products?: ProductListRelationFilter
  }, "id" | "email">

  export type AdminOrderByWithAggregationInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    whatsapp_phone_number?: SortOrder
    picture?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    OR?: AdminScalarWhereWithAggregatesInput[]
    NOT?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Admin"> | string
    first_name?: StringWithAggregatesFilter<"Admin"> | string
    last_name?: StringWithAggregatesFilter<"Admin"> | string
    email?: StringWithAggregatesFilter<"Admin"> | string
    whatsapp_phone_number?: StringWithAggregatesFilter<"Admin"> | string
    picture?: StringWithAggregatesFilter<"Admin"> | string
  }

  export type DonationLinkWhereInput = {
    AND?: DonationLinkWhereInput | DonationLinkWhereInput[]
    OR?: DonationLinkWhereInput[]
    NOT?: DonationLinkWhereInput | DonationLinkWhereInput[]
    id?: IntFilter<"DonationLink"> | number
    admin_id?: StringFilter<"DonationLink"> | string
    currency_code?: EnumCurrencyCodeFilter<"DonationLink"> | $Enums.CurrencyCode
    link?: StringFilter<"DonationLink"> | string
    admin?: XOR<AdminScalarRelationFilter, AdminWhereInput>
  }

  export type DonationLinkOrderByWithRelationInput = {
    id?: SortOrder
    admin_id?: SortOrder
    currency_code?: SortOrder
    link?: SortOrder
    admin?: AdminOrderByWithRelationInput
  }

  export type DonationLinkWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DonationLinkWhereInput | DonationLinkWhereInput[]
    OR?: DonationLinkWhereInput[]
    NOT?: DonationLinkWhereInput | DonationLinkWhereInput[]
    admin_id?: StringFilter<"DonationLink"> | string
    currency_code?: EnumCurrencyCodeFilter<"DonationLink"> | $Enums.CurrencyCode
    link?: StringFilter<"DonationLink"> | string
    admin?: XOR<AdminScalarRelationFilter, AdminWhereInput>
  }, "id">

  export type DonationLinkOrderByWithAggregationInput = {
    id?: SortOrder
    admin_id?: SortOrder
    currency_code?: SortOrder
    link?: SortOrder
    _count?: DonationLinkCountOrderByAggregateInput
    _avg?: DonationLinkAvgOrderByAggregateInput
    _max?: DonationLinkMaxOrderByAggregateInput
    _min?: DonationLinkMinOrderByAggregateInput
    _sum?: DonationLinkSumOrderByAggregateInput
  }

  export type DonationLinkScalarWhereWithAggregatesInput = {
    AND?: DonationLinkScalarWhereWithAggregatesInput | DonationLinkScalarWhereWithAggregatesInput[]
    OR?: DonationLinkScalarWhereWithAggregatesInput[]
    NOT?: DonationLinkScalarWhereWithAggregatesInput | DonationLinkScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DonationLink"> | number
    admin_id?: StringWithAggregatesFilter<"DonationLink"> | string
    currency_code?: EnumCurrencyCodeWithAggregatesFilter<"DonationLink"> | $Enums.CurrencyCode
    link?: StringWithAggregatesFilter<"DonationLink"> | string
  }

  export type OwnerWhereInput = {
    AND?: OwnerWhereInput | OwnerWhereInput[]
    OR?: OwnerWhereInput[]
    NOT?: OwnerWhereInput | OwnerWhereInput[]
    id?: IntFilter<"Owner"> | number
    first_name?: StringFilter<"Owner"> | string
    last_name?: StringFilter<"Owner"> | string
    sm_username?: StringFilter<"Owner"> | string
    picture?: StringFilter<"Owner"> | string
    created_at?: BigIntFilter<"Owner"> | bigint | number
    updated_at?: BigIntFilter<"Owner"> | bigint | number
    products?: ProductListRelationFilter
  }

  export type OwnerOrderByWithRelationInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    sm_username?: SortOrder
    picture?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    products?: ProductOrderByRelationAggregateInput
  }

  export type OwnerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OwnerWhereInput | OwnerWhereInput[]
    OR?: OwnerWhereInput[]
    NOT?: OwnerWhereInput | OwnerWhereInput[]
    first_name?: StringFilter<"Owner"> | string
    last_name?: StringFilter<"Owner"> | string
    sm_username?: StringFilter<"Owner"> | string
    picture?: StringFilter<"Owner"> | string
    created_at?: BigIntFilter<"Owner"> | bigint | number
    updated_at?: BigIntFilter<"Owner"> | bigint | number
    products?: ProductListRelationFilter
  }, "id">

  export type OwnerOrderByWithAggregationInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    sm_username?: SortOrder
    picture?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: OwnerCountOrderByAggregateInput
    _avg?: OwnerAvgOrderByAggregateInput
    _max?: OwnerMaxOrderByAggregateInput
    _min?: OwnerMinOrderByAggregateInput
    _sum?: OwnerSumOrderByAggregateInput
  }

  export type OwnerScalarWhereWithAggregatesInput = {
    AND?: OwnerScalarWhereWithAggregatesInput | OwnerScalarWhereWithAggregatesInput[]
    OR?: OwnerScalarWhereWithAggregatesInput[]
    NOT?: OwnerScalarWhereWithAggregatesInput | OwnerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Owner"> | number
    first_name?: StringWithAggregatesFilter<"Owner"> | string
    last_name?: StringWithAggregatesFilter<"Owner"> | string
    sm_username?: StringWithAggregatesFilter<"Owner"> | string
    picture?: StringWithAggregatesFilter<"Owner"> | string
    created_at?: BigIntWithAggregatesFilter<"Owner"> | bigint | number
    updated_at?: BigIntWithAggregatesFilter<"Owner"> | bigint | number
  }

  export type CustomerWhereInput = {
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    id?: StringFilter<"Customer"> | string
    first_name?: StringFilter<"Customer"> | string
    last_name?: StringFilter<"Customer"> | string
    email?: StringFilter<"Customer"> | string
    password?: StringNullableFilter<"Customer"> | string | null
    phone_number?: StringNullableFilter<"Customer"> | string | null
    picture?: StringNullableFilter<"Customer"> | string | null
    last_active?: BigIntFilter<"Customer"> | bigint | number
  }

  export type CustomerOrderByWithRelationInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    phone_number?: SortOrderInput | SortOrder
    picture?: SortOrderInput | SortOrder
    last_active?: SortOrder
  }

  export type CustomerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    first_name?: StringFilter<"Customer"> | string
    last_name?: StringFilter<"Customer"> | string
    password?: StringNullableFilter<"Customer"> | string | null
    phone_number?: StringNullableFilter<"Customer"> | string | null
    picture?: StringNullableFilter<"Customer"> | string | null
    last_active?: BigIntFilter<"Customer"> | bigint | number
  }, "id" | "email">

  export type CustomerOrderByWithAggregationInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    phone_number?: SortOrderInput | SortOrder
    picture?: SortOrderInput | SortOrder
    last_active?: SortOrder
    _count?: CustomerCountOrderByAggregateInput
    _avg?: CustomerAvgOrderByAggregateInput
    _max?: CustomerMaxOrderByAggregateInput
    _min?: CustomerMinOrderByAggregateInput
    _sum?: CustomerSumOrderByAggregateInput
  }

  export type CustomerScalarWhereWithAggregatesInput = {
    AND?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    OR?: CustomerScalarWhereWithAggregatesInput[]
    NOT?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Customer"> | string
    first_name?: StringWithAggregatesFilter<"Customer"> | string
    last_name?: StringWithAggregatesFilter<"Customer"> | string
    email?: StringWithAggregatesFilter<"Customer"> | string
    password?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    phone_number?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    picture?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    last_active?: BigIntWithAggregatesFilter<"Customer"> | bigint | number
  }

  export type LicenseWhereInput = {
    AND?: LicenseWhereInput | LicenseWhereInput[]
    OR?: LicenseWhereInput[]
    NOT?: LicenseWhereInput | LicenseWhereInput[]
    id?: IntFilter<"License"> | number
    created_at?: BigIntFilter<"License"> | bigint | number
    updated_at?: BigIntFilter<"License"> | bigint | number
    products?: ProductListRelationFilter
    translations?: LicenseTranslationListRelationFilter
  }

  export type LicenseOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    products?: ProductOrderByRelationAggregateInput
    translations?: LicenseTranslationOrderByRelationAggregateInput
  }

  export type LicenseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LicenseWhereInput | LicenseWhereInput[]
    OR?: LicenseWhereInput[]
    NOT?: LicenseWhereInput | LicenseWhereInput[]
    created_at?: BigIntFilter<"License"> | bigint | number
    updated_at?: BigIntFilter<"License"> | bigint | number
    products?: ProductListRelationFilter
    translations?: LicenseTranslationListRelationFilter
  }, "id">

  export type LicenseOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: LicenseCountOrderByAggregateInput
    _avg?: LicenseAvgOrderByAggregateInput
    _max?: LicenseMaxOrderByAggregateInput
    _min?: LicenseMinOrderByAggregateInput
    _sum?: LicenseSumOrderByAggregateInput
  }

  export type LicenseScalarWhereWithAggregatesInput = {
    AND?: LicenseScalarWhereWithAggregatesInput | LicenseScalarWhereWithAggregatesInput[]
    OR?: LicenseScalarWhereWithAggregatesInput[]
    NOT?: LicenseScalarWhereWithAggregatesInput | LicenseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"License"> | number
    created_at?: BigIntWithAggregatesFilter<"License"> | bigint | number
    updated_at?: BigIntWithAggregatesFilter<"License"> | bigint | number
  }

  export type LicenseTranslationWhereInput = {
    AND?: LicenseTranslationWhereInput | LicenseTranslationWhereInput[]
    OR?: LicenseTranslationWhereInput[]
    NOT?: LicenseTranslationWhereInput | LicenseTranslationWhereInput[]
    id?: IntFilter<"LicenseTranslation"> | number
    license_id?: IntFilter<"LicenseTranslation"> | number
    language?: EnumLanguageFilter<"LicenseTranslation"> | $Enums.Language
    name?: StringFilter<"LicenseTranslation"> | string
    content?: StringFilter<"LicenseTranslation"> | string
    license?: XOR<LicenseScalarRelationFilter, LicenseWhereInput>
  }

  export type LicenseTranslationOrderByWithRelationInput = {
    id?: SortOrder
    license_id?: SortOrder
    language?: SortOrder
    name?: SortOrder
    content?: SortOrder
    license?: LicenseOrderByWithRelationInput
  }

  export type LicenseTranslationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LicenseTranslationWhereInput | LicenseTranslationWhereInput[]
    OR?: LicenseTranslationWhereInput[]
    NOT?: LicenseTranslationWhereInput | LicenseTranslationWhereInput[]
    license_id?: IntFilter<"LicenseTranslation"> | number
    language?: EnumLanguageFilter<"LicenseTranslation"> | $Enums.Language
    name?: StringFilter<"LicenseTranslation"> | string
    content?: StringFilter<"LicenseTranslation"> | string
    license?: XOR<LicenseScalarRelationFilter, LicenseWhereInput>
  }, "id">

  export type LicenseTranslationOrderByWithAggregationInput = {
    id?: SortOrder
    license_id?: SortOrder
    language?: SortOrder
    name?: SortOrder
    content?: SortOrder
    _count?: LicenseTranslationCountOrderByAggregateInput
    _avg?: LicenseTranslationAvgOrderByAggregateInput
    _max?: LicenseTranslationMaxOrderByAggregateInput
    _min?: LicenseTranslationMinOrderByAggregateInput
    _sum?: LicenseTranslationSumOrderByAggregateInput
  }

  export type LicenseTranslationScalarWhereWithAggregatesInput = {
    AND?: LicenseTranslationScalarWhereWithAggregatesInput | LicenseTranslationScalarWhereWithAggregatesInput[]
    OR?: LicenseTranslationScalarWhereWithAggregatesInput[]
    NOT?: LicenseTranslationScalarWhereWithAggregatesInput | LicenseTranslationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LicenseTranslation"> | number
    license_id?: IntWithAggregatesFilter<"LicenseTranslation"> | number
    language?: EnumLanguageWithAggregatesFilter<"LicenseTranslation"> | $Enums.Language
    name?: StringWithAggregatesFilter<"LicenseTranslation"> | string
    content?: StringWithAggregatesFilter<"LicenseTranslation"> | string
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: IntFilter<"Category"> | number
    name?: StringFilter<"Category"> | string
    slug?: StringFilter<"Category"> | string
    created_at?: BigIntFilter<"Category"> | bigint | number
    updated_at?: BigIntFilter<"Category"> | bigint | number
    products?: ProductListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    products?: ProductOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    slug?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    name?: StringFilter<"Category"> | string
    created_at?: BigIntFilter<"Category"> | bigint | number
    updated_at?: BigIntFilter<"Category"> | bigint | number
    products?: ProductListRelationFilter
  }, "id" | "slug">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Category"> | number
    name?: StringWithAggregatesFilter<"Category"> | string
    slug?: StringWithAggregatesFilter<"Category"> | string
    created_at?: BigIntWithAggregatesFilter<"Category"> | bigint | number
    updated_at?: BigIntWithAggregatesFilter<"Category"> | bigint | number
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    id?: UuidFilter<"Product"> | string
    category_id?: IntFilter<"Product"> | number
    admin_id?: StringFilter<"Product"> | string
    owner_id?: IntFilter<"Product"> | number
    license_id?: IntFilter<"Product"> | number
    name?: StringFilter<"Product"> | string
    slug?: StringFilter<"Product"> | string
    price_type?: EnumPriceTypeFilter<"Product"> | $Enums.PriceType
    download_link?: StringNullableFilter<"Product"> | string | null
    is_published?: BoolFilter<"Product"> | boolean
    is_pinned?: BoolFilter<"Product"> | boolean
    created_at?: BigIntFilter<"Product"> | bigint | number
    released_at?: BigIntFilter<"Product"> | bigint | number
    updated_at?: BigIntFilter<"Product"> | bigint | number
    admin?: XOR<AdminScalarRelationFilter, AdminWhereInput>
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    owner?: XOR<OwnerScalarRelationFilter, OwnerWhereInput>
    license?: XOR<LicenseScalarRelationFilter, LicenseWhereInput>
    translations?: ProductTranslationListRelationFilter
    discounts?: XOR<ProductDiscountNullableScalarRelationFilter, ProductDiscountWhereInput> | null
    coupons?: XOR<ProductCouponNullableScalarRelationFilter, ProductCouponWhereInput> | null
    images?: ProductImageListRelationFilter
    variants?: ProductVariantListRelationFilter
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    category_id?: SortOrder
    admin_id?: SortOrder
    owner_id?: SortOrder
    license_id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    price_type?: SortOrder
    download_link?: SortOrderInput | SortOrder
    is_published?: SortOrder
    is_pinned?: SortOrder
    created_at?: SortOrder
    released_at?: SortOrder
    updated_at?: SortOrder
    admin?: AdminOrderByWithRelationInput
    category?: CategoryOrderByWithRelationInput
    owner?: OwnerOrderByWithRelationInput
    license?: LicenseOrderByWithRelationInput
    translations?: ProductTranslationOrderByRelationAggregateInput
    discounts?: ProductDiscountOrderByWithRelationInput
    coupons?: ProductCouponOrderByWithRelationInput
    images?: ProductImageOrderByRelationAggregateInput
    variants?: ProductVariantOrderByRelationAggregateInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    category_id?: IntFilter<"Product"> | number
    admin_id?: StringFilter<"Product"> | string
    owner_id?: IntFilter<"Product"> | number
    license_id?: IntFilter<"Product"> | number
    name?: StringFilter<"Product"> | string
    price_type?: EnumPriceTypeFilter<"Product"> | $Enums.PriceType
    download_link?: StringNullableFilter<"Product"> | string | null
    is_published?: BoolFilter<"Product"> | boolean
    is_pinned?: BoolFilter<"Product"> | boolean
    created_at?: BigIntFilter<"Product"> | bigint | number
    released_at?: BigIntFilter<"Product"> | bigint | number
    updated_at?: BigIntFilter<"Product"> | bigint | number
    admin?: XOR<AdminScalarRelationFilter, AdminWhereInput>
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    owner?: XOR<OwnerScalarRelationFilter, OwnerWhereInput>
    license?: XOR<LicenseScalarRelationFilter, LicenseWhereInput>
    translations?: ProductTranslationListRelationFilter
    discounts?: XOR<ProductDiscountNullableScalarRelationFilter, ProductDiscountWhereInput> | null
    coupons?: XOR<ProductCouponNullableScalarRelationFilter, ProductCouponWhereInput> | null
    images?: ProductImageListRelationFilter
    variants?: ProductVariantListRelationFilter
  }, "id" | "slug">

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    category_id?: SortOrder
    admin_id?: SortOrder
    owner_id?: SortOrder
    license_id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    price_type?: SortOrder
    download_link?: SortOrderInput | SortOrder
    is_published?: SortOrder
    is_pinned?: SortOrder
    created_at?: SortOrder
    released_at?: SortOrder
    updated_at?: SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"Product"> | string
    category_id?: IntWithAggregatesFilter<"Product"> | number
    admin_id?: StringWithAggregatesFilter<"Product"> | string
    owner_id?: IntWithAggregatesFilter<"Product"> | number
    license_id?: IntWithAggregatesFilter<"Product"> | number
    name?: StringWithAggregatesFilter<"Product"> | string
    slug?: StringWithAggregatesFilter<"Product"> | string
    price_type?: EnumPriceTypeWithAggregatesFilter<"Product"> | $Enums.PriceType
    download_link?: StringNullableWithAggregatesFilter<"Product"> | string | null
    is_published?: BoolWithAggregatesFilter<"Product"> | boolean
    is_pinned?: BoolWithAggregatesFilter<"Product"> | boolean
    created_at?: BigIntWithAggregatesFilter<"Product"> | bigint | number
    released_at?: BigIntWithAggregatesFilter<"Product"> | bigint | number
    updated_at?: BigIntWithAggregatesFilter<"Product"> | bigint | number
  }

  export type ProductTranslationWhereInput = {
    AND?: ProductTranslationWhereInput | ProductTranslationWhereInput[]
    OR?: ProductTranslationWhereInput[]
    NOT?: ProductTranslationWhereInput | ProductTranslationWhereInput[]
    id?: UuidFilter<"ProductTranslation"> | string
    product_id?: UuidFilter<"ProductTranslation"> | string
    language?: EnumLanguageFilter<"ProductTranslation"> | $Enums.Language
    description?: StringFilter<"ProductTranslation"> | string
    changelog?: StringNullableFilter<"ProductTranslation"> | string | null
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }

  export type ProductTranslationOrderByWithRelationInput = {
    id?: SortOrder
    product_id?: SortOrder
    language?: SortOrder
    description?: SortOrder
    changelog?: SortOrderInput | SortOrder
    product?: ProductOrderByWithRelationInput
  }

  export type ProductTranslationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProductTranslationWhereInput | ProductTranslationWhereInput[]
    OR?: ProductTranslationWhereInput[]
    NOT?: ProductTranslationWhereInput | ProductTranslationWhereInput[]
    product_id?: UuidFilter<"ProductTranslation"> | string
    language?: EnumLanguageFilter<"ProductTranslation"> | $Enums.Language
    description?: StringFilter<"ProductTranslation"> | string
    changelog?: StringNullableFilter<"ProductTranslation"> | string | null
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }, "id">

  export type ProductTranslationOrderByWithAggregationInput = {
    id?: SortOrder
    product_id?: SortOrder
    language?: SortOrder
    description?: SortOrder
    changelog?: SortOrderInput | SortOrder
    _count?: ProductTranslationCountOrderByAggregateInput
    _max?: ProductTranslationMaxOrderByAggregateInput
    _min?: ProductTranslationMinOrderByAggregateInput
  }

  export type ProductTranslationScalarWhereWithAggregatesInput = {
    AND?: ProductTranslationScalarWhereWithAggregatesInput | ProductTranslationScalarWhereWithAggregatesInput[]
    OR?: ProductTranslationScalarWhereWithAggregatesInput[]
    NOT?: ProductTranslationScalarWhereWithAggregatesInput | ProductTranslationScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"ProductTranslation"> | string
    product_id?: UuidWithAggregatesFilter<"ProductTranslation"> | string
    language?: EnumLanguageWithAggregatesFilter<"ProductTranslation"> | $Enums.Language
    description?: StringWithAggregatesFilter<"ProductTranslation"> | string
    changelog?: StringNullableWithAggregatesFilter<"ProductTranslation"> | string | null
  }

  export type ProductDiscountWhereInput = {
    AND?: ProductDiscountWhereInput | ProductDiscountWhereInput[]
    OR?: ProductDiscountWhereInput[]
    NOT?: ProductDiscountWhereInput | ProductDiscountWhereInput[]
    id?: IntFilter<"ProductDiscount"> | number
    product_id?: UuidFilter<"ProductDiscount"> | string
    discount?: IntFilter<"ProductDiscount"> | number
    expired_at?: BigIntFilter<"ProductDiscount"> | bigint | number
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }

  export type ProductDiscountOrderByWithRelationInput = {
    id?: SortOrder
    product_id?: SortOrder
    discount?: SortOrder
    expired_at?: SortOrder
    product?: ProductOrderByWithRelationInput
  }

  export type ProductDiscountWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    product_id?: string
    AND?: ProductDiscountWhereInput | ProductDiscountWhereInput[]
    OR?: ProductDiscountWhereInput[]
    NOT?: ProductDiscountWhereInput | ProductDiscountWhereInput[]
    discount?: IntFilter<"ProductDiscount"> | number
    expired_at?: BigIntFilter<"ProductDiscount"> | bigint | number
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }, "id" | "product_id">

  export type ProductDiscountOrderByWithAggregationInput = {
    id?: SortOrder
    product_id?: SortOrder
    discount?: SortOrder
    expired_at?: SortOrder
    _count?: ProductDiscountCountOrderByAggregateInput
    _avg?: ProductDiscountAvgOrderByAggregateInput
    _max?: ProductDiscountMaxOrderByAggregateInput
    _min?: ProductDiscountMinOrderByAggregateInput
    _sum?: ProductDiscountSumOrderByAggregateInput
  }

  export type ProductDiscountScalarWhereWithAggregatesInput = {
    AND?: ProductDiscountScalarWhereWithAggregatesInput | ProductDiscountScalarWhereWithAggregatesInput[]
    OR?: ProductDiscountScalarWhereWithAggregatesInput[]
    NOT?: ProductDiscountScalarWhereWithAggregatesInput | ProductDiscountScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProductDiscount"> | number
    product_id?: UuidWithAggregatesFilter<"ProductDiscount"> | string
    discount?: IntWithAggregatesFilter<"ProductDiscount"> | number
    expired_at?: BigIntWithAggregatesFilter<"ProductDiscount"> | bigint | number
  }

  export type ProductCouponWhereInput = {
    AND?: ProductCouponWhereInput | ProductCouponWhereInput[]
    OR?: ProductCouponWhereInput[]
    NOT?: ProductCouponWhereInput | ProductCouponWhereInput[]
    id?: IntFilter<"ProductCoupon"> | number
    product_id?: UuidFilter<"ProductCoupon"> | string
    code?: StringFilter<"ProductCoupon"> | string
    discount?: IntFilter<"ProductCoupon"> | number
    expired_at?: BigIntFilter<"ProductCoupon"> | bigint | number
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }

  export type ProductCouponOrderByWithRelationInput = {
    id?: SortOrder
    product_id?: SortOrder
    code?: SortOrder
    discount?: SortOrder
    expired_at?: SortOrder
    product?: ProductOrderByWithRelationInput
  }

  export type ProductCouponWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    product_id?: string
    AND?: ProductCouponWhereInput | ProductCouponWhereInput[]
    OR?: ProductCouponWhereInput[]
    NOT?: ProductCouponWhereInput | ProductCouponWhereInput[]
    code?: StringFilter<"ProductCoupon"> | string
    discount?: IntFilter<"ProductCoupon"> | number
    expired_at?: BigIntFilter<"ProductCoupon"> | bigint | number
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }, "id" | "product_id">

  export type ProductCouponOrderByWithAggregationInput = {
    id?: SortOrder
    product_id?: SortOrder
    code?: SortOrder
    discount?: SortOrder
    expired_at?: SortOrder
    _count?: ProductCouponCountOrderByAggregateInput
    _avg?: ProductCouponAvgOrderByAggregateInput
    _max?: ProductCouponMaxOrderByAggregateInput
    _min?: ProductCouponMinOrderByAggregateInput
    _sum?: ProductCouponSumOrderByAggregateInput
  }

  export type ProductCouponScalarWhereWithAggregatesInput = {
    AND?: ProductCouponScalarWhereWithAggregatesInput | ProductCouponScalarWhereWithAggregatesInput[]
    OR?: ProductCouponScalarWhereWithAggregatesInput[]
    NOT?: ProductCouponScalarWhereWithAggregatesInput | ProductCouponScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProductCoupon"> | number
    product_id?: UuidWithAggregatesFilter<"ProductCoupon"> | string
    code?: StringWithAggregatesFilter<"ProductCoupon"> | string
    discount?: IntWithAggregatesFilter<"ProductCoupon"> | number
    expired_at?: BigIntWithAggregatesFilter<"ProductCoupon"> | bigint | number
  }

  export type ProductImageWhereInput = {
    AND?: ProductImageWhereInput | ProductImageWhereInput[]
    OR?: ProductImageWhereInput[]
    NOT?: ProductImageWhereInput | ProductImageWhereInput[]
    id?: UuidFilter<"ProductImage"> | string
    product_id?: UuidFilter<"ProductImage"> | string
    url?: StringFilter<"ProductImage"> | string
    is_thumbnail?: BoolFilter<"ProductImage"> | boolean
    width?: IntFilter<"ProductImage"> | number
    height?: IntFilter<"ProductImage"> | number
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }

  export type ProductImageOrderByWithRelationInput = {
    id?: SortOrder
    product_id?: SortOrder
    url?: SortOrder
    is_thumbnail?: SortOrder
    width?: SortOrder
    height?: SortOrder
    product?: ProductOrderByWithRelationInput
  }

  export type ProductImageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProductImageWhereInput | ProductImageWhereInput[]
    OR?: ProductImageWhereInput[]
    NOT?: ProductImageWhereInput | ProductImageWhereInput[]
    product_id?: UuidFilter<"ProductImage"> | string
    url?: StringFilter<"ProductImage"> | string
    is_thumbnail?: BoolFilter<"ProductImage"> | boolean
    width?: IntFilter<"ProductImage"> | number
    height?: IntFilter<"ProductImage"> | number
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }, "id">

  export type ProductImageOrderByWithAggregationInput = {
    id?: SortOrder
    product_id?: SortOrder
    url?: SortOrder
    is_thumbnail?: SortOrder
    width?: SortOrder
    height?: SortOrder
    _count?: ProductImageCountOrderByAggregateInput
    _avg?: ProductImageAvgOrderByAggregateInput
    _max?: ProductImageMaxOrderByAggregateInput
    _min?: ProductImageMinOrderByAggregateInput
    _sum?: ProductImageSumOrderByAggregateInput
  }

  export type ProductImageScalarWhereWithAggregatesInput = {
    AND?: ProductImageScalarWhereWithAggregatesInput | ProductImageScalarWhereWithAggregatesInput[]
    OR?: ProductImageScalarWhereWithAggregatesInput[]
    NOT?: ProductImageScalarWhereWithAggregatesInput | ProductImageScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"ProductImage"> | string
    product_id?: UuidWithAggregatesFilter<"ProductImage"> | string
    url?: StringWithAggregatesFilter<"ProductImage"> | string
    is_thumbnail?: BoolWithAggregatesFilter<"ProductImage"> | boolean
    width?: IntWithAggregatesFilter<"ProductImage"> | number
    height?: IntWithAggregatesFilter<"ProductImage"> | number
  }

  export type ProductVariantWhereInput = {
    AND?: ProductVariantWhereInput | ProductVariantWhereInput[]
    OR?: ProductVariantWhereInput[]
    NOT?: ProductVariantWhereInput | ProductVariantWhereInput[]
    id?: UuidFilter<"ProductVariant"> | string
    product_id?: UuidFilter<"ProductVariant"> | string
    name?: StringFilter<"ProductVariant"> | string
    download_link?: StringNullableFilter<"ProductVariant"> | string | null
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    prices?: ProductPriceListRelationFilter
  }

  export type ProductVariantOrderByWithRelationInput = {
    id?: SortOrder
    product_id?: SortOrder
    name?: SortOrder
    download_link?: SortOrderInput | SortOrder
    product?: ProductOrderByWithRelationInput
    prices?: ProductPriceOrderByRelationAggregateInput
  }

  export type ProductVariantWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProductVariantWhereInput | ProductVariantWhereInput[]
    OR?: ProductVariantWhereInput[]
    NOT?: ProductVariantWhereInput | ProductVariantWhereInput[]
    product_id?: UuidFilter<"ProductVariant"> | string
    name?: StringFilter<"ProductVariant"> | string
    download_link?: StringNullableFilter<"ProductVariant"> | string | null
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    prices?: ProductPriceListRelationFilter
  }, "id">

  export type ProductVariantOrderByWithAggregationInput = {
    id?: SortOrder
    product_id?: SortOrder
    name?: SortOrder
    download_link?: SortOrderInput | SortOrder
    _count?: ProductVariantCountOrderByAggregateInput
    _max?: ProductVariantMaxOrderByAggregateInput
    _min?: ProductVariantMinOrderByAggregateInput
  }

  export type ProductVariantScalarWhereWithAggregatesInput = {
    AND?: ProductVariantScalarWhereWithAggregatesInput | ProductVariantScalarWhereWithAggregatesInput[]
    OR?: ProductVariantScalarWhereWithAggregatesInput[]
    NOT?: ProductVariantScalarWhereWithAggregatesInput | ProductVariantScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"ProductVariant"> | string
    product_id?: UuidWithAggregatesFilter<"ProductVariant"> | string
    name?: StringWithAggregatesFilter<"ProductVariant"> | string
    download_link?: StringNullableWithAggregatesFilter<"ProductVariant"> | string | null
  }

  export type ProductPriceWhereInput = {
    AND?: ProductPriceWhereInput | ProductPriceWhereInput[]
    OR?: ProductPriceWhereInput[]
    NOT?: ProductPriceWhereInput | ProductPriceWhereInput[]
    id?: UuidFilter<"ProductPrice"> | string
    variant_id?: UuidFilter<"ProductPrice"> | string
    currency_code?: EnumCurrencyCodeFilter<"ProductPrice"> | $Enums.CurrencyCode
    price?: IntFilter<"ProductPrice"> | number
    variant?: XOR<ProductVariantScalarRelationFilter, ProductVariantWhereInput>
  }

  export type ProductPriceOrderByWithRelationInput = {
    id?: SortOrder
    variant_id?: SortOrder
    currency_code?: SortOrder
    price?: SortOrder
    variant?: ProductVariantOrderByWithRelationInput
  }

  export type ProductPriceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProductPriceWhereInput | ProductPriceWhereInput[]
    OR?: ProductPriceWhereInput[]
    NOT?: ProductPriceWhereInput | ProductPriceWhereInput[]
    variant_id?: UuidFilter<"ProductPrice"> | string
    currency_code?: EnumCurrencyCodeFilter<"ProductPrice"> | $Enums.CurrencyCode
    price?: IntFilter<"ProductPrice"> | number
    variant?: XOR<ProductVariantScalarRelationFilter, ProductVariantWhereInput>
  }, "id">

  export type ProductPriceOrderByWithAggregationInput = {
    id?: SortOrder
    variant_id?: SortOrder
    currency_code?: SortOrder
    price?: SortOrder
    _count?: ProductPriceCountOrderByAggregateInput
    _avg?: ProductPriceAvgOrderByAggregateInput
    _max?: ProductPriceMaxOrderByAggregateInput
    _min?: ProductPriceMinOrderByAggregateInput
    _sum?: ProductPriceSumOrderByAggregateInput
  }

  export type ProductPriceScalarWhereWithAggregatesInput = {
    AND?: ProductPriceScalarWhereWithAggregatesInput | ProductPriceScalarWhereWithAggregatesInput[]
    OR?: ProductPriceScalarWhereWithAggregatesInput[]
    NOT?: ProductPriceScalarWhereWithAggregatesInput | ProductPriceScalarWhereWithAggregatesInput[]
    id?: UuidWithAggregatesFilter<"ProductPrice"> | string
    variant_id?: UuidWithAggregatesFilter<"ProductPrice"> | string
    currency_code?: EnumCurrencyCodeWithAggregatesFilter<"ProductPrice"> | $Enums.CurrencyCode
    price?: IntWithAggregatesFilter<"ProductPrice"> | number
  }

  export type TermsOfServiceWhereInput = {
    AND?: TermsOfServiceWhereInput | TermsOfServiceWhereInput[]
    OR?: TermsOfServiceWhereInput[]
    NOT?: TermsOfServiceWhereInput | TermsOfServiceWhereInput[]
    id?: IntFilter<"TermsOfService"> | number
    created_at?: BigIntFilter<"TermsOfService"> | bigint | number
    updated_at?: BigIntFilter<"TermsOfService"> | bigint | number
    translations?: TermsOfServiceTranslationListRelationFilter
  }

  export type TermsOfServiceOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    translations?: TermsOfServiceTranslationOrderByRelationAggregateInput
  }

  export type TermsOfServiceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TermsOfServiceWhereInput | TermsOfServiceWhereInput[]
    OR?: TermsOfServiceWhereInput[]
    NOT?: TermsOfServiceWhereInput | TermsOfServiceWhereInput[]
    created_at?: BigIntFilter<"TermsOfService"> | bigint | number
    updated_at?: BigIntFilter<"TermsOfService"> | bigint | number
    translations?: TermsOfServiceTranslationListRelationFilter
  }, "id">

  export type TermsOfServiceOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: TermsOfServiceCountOrderByAggregateInput
    _avg?: TermsOfServiceAvgOrderByAggregateInput
    _max?: TermsOfServiceMaxOrderByAggregateInput
    _min?: TermsOfServiceMinOrderByAggregateInput
    _sum?: TermsOfServiceSumOrderByAggregateInput
  }

  export type TermsOfServiceScalarWhereWithAggregatesInput = {
    AND?: TermsOfServiceScalarWhereWithAggregatesInput | TermsOfServiceScalarWhereWithAggregatesInput[]
    OR?: TermsOfServiceScalarWhereWithAggregatesInput[]
    NOT?: TermsOfServiceScalarWhereWithAggregatesInput | TermsOfServiceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TermsOfService"> | number
    created_at?: BigIntWithAggregatesFilter<"TermsOfService"> | bigint | number
    updated_at?: BigIntWithAggregatesFilter<"TermsOfService"> | bigint | number
  }

  export type TermsOfServiceTranslationWhereInput = {
    AND?: TermsOfServiceTranslationWhereInput | TermsOfServiceTranslationWhereInput[]
    OR?: TermsOfServiceTranslationWhereInput[]
    NOT?: TermsOfServiceTranslationWhereInput | TermsOfServiceTranslationWhereInput[]
    id?: IntFilter<"TermsOfServiceTranslation"> | number
    terms_of_service_id?: IntFilter<"TermsOfServiceTranslation"> | number
    language?: EnumLanguageFilter<"TermsOfServiceTranslation"> | $Enums.Language
    content?: StringFilter<"TermsOfServiceTranslation"> | string
    terms_of_service?: XOR<TermsOfServiceScalarRelationFilter, TermsOfServiceWhereInput>
  }

  export type TermsOfServiceTranslationOrderByWithRelationInput = {
    id?: SortOrder
    terms_of_service_id?: SortOrder
    language?: SortOrder
    content?: SortOrder
    terms_of_service?: TermsOfServiceOrderByWithRelationInput
  }

  export type TermsOfServiceTranslationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TermsOfServiceTranslationWhereInput | TermsOfServiceTranslationWhereInput[]
    OR?: TermsOfServiceTranslationWhereInput[]
    NOT?: TermsOfServiceTranslationWhereInput | TermsOfServiceTranslationWhereInput[]
    terms_of_service_id?: IntFilter<"TermsOfServiceTranslation"> | number
    language?: EnumLanguageFilter<"TermsOfServiceTranslation"> | $Enums.Language
    content?: StringFilter<"TermsOfServiceTranslation"> | string
    terms_of_service?: XOR<TermsOfServiceScalarRelationFilter, TermsOfServiceWhereInput>
  }, "id">

  export type TermsOfServiceTranslationOrderByWithAggregationInput = {
    id?: SortOrder
    terms_of_service_id?: SortOrder
    language?: SortOrder
    content?: SortOrder
    _count?: TermsOfServiceTranslationCountOrderByAggregateInput
    _avg?: TermsOfServiceTranslationAvgOrderByAggregateInput
    _max?: TermsOfServiceTranslationMaxOrderByAggregateInput
    _min?: TermsOfServiceTranslationMinOrderByAggregateInput
    _sum?: TermsOfServiceTranslationSumOrderByAggregateInput
  }

  export type TermsOfServiceTranslationScalarWhereWithAggregatesInput = {
    AND?: TermsOfServiceTranslationScalarWhereWithAggregatesInput | TermsOfServiceTranslationScalarWhereWithAggregatesInput[]
    OR?: TermsOfServiceTranslationScalarWhereWithAggregatesInput[]
    NOT?: TermsOfServiceTranslationScalarWhereWithAggregatesInput | TermsOfServiceTranslationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TermsOfServiceTranslation"> | number
    terms_of_service_id?: IntWithAggregatesFilter<"TermsOfServiceTranslation"> | number
    language?: EnumLanguageWithAggregatesFilter<"TermsOfServiceTranslation"> | $Enums.Language
    content?: StringWithAggregatesFilter<"TermsOfServiceTranslation"> | string
  }

  export type PrivacyPolicyWhereInput = {
    AND?: PrivacyPolicyWhereInput | PrivacyPolicyWhereInput[]
    OR?: PrivacyPolicyWhereInput[]
    NOT?: PrivacyPolicyWhereInput | PrivacyPolicyWhereInput[]
    id?: IntFilter<"PrivacyPolicy"> | number
    created_at?: BigIntFilter<"PrivacyPolicy"> | bigint | number
    updated_at?: BigIntFilter<"PrivacyPolicy"> | bigint | number
    translations?: PrivacyPolicyTranslationListRelationFilter
  }

  export type PrivacyPolicyOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    translations?: PrivacyPolicyTranslationOrderByRelationAggregateInput
  }

  export type PrivacyPolicyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PrivacyPolicyWhereInput | PrivacyPolicyWhereInput[]
    OR?: PrivacyPolicyWhereInput[]
    NOT?: PrivacyPolicyWhereInput | PrivacyPolicyWhereInput[]
    created_at?: BigIntFilter<"PrivacyPolicy"> | bigint | number
    updated_at?: BigIntFilter<"PrivacyPolicy"> | bigint | number
    translations?: PrivacyPolicyTranslationListRelationFilter
  }, "id">

  export type PrivacyPolicyOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: PrivacyPolicyCountOrderByAggregateInput
    _avg?: PrivacyPolicyAvgOrderByAggregateInput
    _max?: PrivacyPolicyMaxOrderByAggregateInput
    _min?: PrivacyPolicyMinOrderByAggregateInput
    _sum?: PrivacyPolicySumOrderByAggregateInput
  }

  export type PrivacyPolicyScalarWhereWithAggregatesInput = {
    AND?: PrivacyPolicyScalarWhereWithAggregatesInput | PrivacyPolicyScalarWhereWithAggregatesInput[]
    OR?: PrivacyPolicyScalarWhereWithAggregatesInput[]
    NOT?: PrivacyPolicyScalarWhereWithAggregatesInput | PrivacyPolicyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PrivacyPolicy"> | number
    created_at?: BigIntWithAggregatesFilter<"PrivacyPolicy"> | bigint | number
    updated_at?: BigIntWithAggregatesFilter<"PrivacyPolicy"> | bigint | number
  }

  export type PrivacyPolicyTranslationWhereInput = {
    AND?: PrivacyPolicyTranslationWhereInput | PrivacyPolicyTranslationWhereInput[]
    OR?: PrivacyPolicyTranslationWhereInput[]
    NOT?: PrivacyPolicyTranslationWhereInput | PrivacyPolicyTranslationWhereInput[]
    id?: IntFilter<"PrivacyPolicyTranslation"> | number
    privacy_policy_id?: IntFilter<"PrivacyPolicyTranslation"> | number
    language?: EnumLanguageFilter<"PrivacyPolicyTranslation"> | $Enums.Language
    content?: StringFilter<"PrivacyPolicyTranslation"> | string
    privacy_policy?: XOR<PrivacyPolicyScalarRelationFilter, PrivacyPolicyWhereInput>
  }

  export type PrivacyPolicyTranslationOrderByWithRelationInput = {
    id?: SortOrder
    privacy_policy_id?: SortOrder
    language?: SortOrder
    content?: SortOrder
    privacy_policy?: PrivacyPolicyOrderByWithRelationInput
  }

  export type PrivacyPolicyTranslationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PrivacyPolicyTranslationWhereInput | PrivacyPolicyTranslationWhereInput[]
    OR?: PrivacyPolicyTranslationWhereInput[]
    NOT?: PrivacyPolicyTranslationWhereInput | PrivacyPolicyTranslationWhereInput[]
    privacy_policy_id?: IntFilter<"PrivacyPolicyTranslation"> | number
    language?: EnumLanguageFilter<"PrivacyPolicyTranslation"> | $Enums.Language
    content?: StringFilter<"PrivacyPolicyTranslation"> | string
    privacy_policy?: XOR<PrivacyPolicyScalarRelationFilter, PrivacyPolicyWhereInput>
  }, "id">

  export type PrivacyPolicyTranslationOrderByWithAggregationInput = {
    id?: SortOrder
    privacy_policy_id?: SortOrder
    language?: SortOrder
    content?: SortOrder
    _count?: PrivacyPolicyTranslationCountOrderByAggregateInput
    _avg?: PrivacyPolicyTranslationAvgOrderByAggregateInput
    _max?: PrivacyPolicyTranslationMaxOrderByAggregateInput
    _min?: PrivacyPolicyTranslationMinOrderByAggregateInput
    _sum?: PrivacyPolicyTranslationSumOrderByAggregateInput
  }

  export type PrivacyPolicyTranslationScalarWhereWithAggregatesInput = {
    AND?: PrivacyPolicyTranslationScalarWhereWithAggregatesInput | PrivacyPolicyTranslationScalarWhereWithAggregatesInput[]
    OR?: PrivacyPolicyTranslationScalarWhereWithAggregatesInput[]
    NOT?: PrivacyPolicyTranslationScalarWhereWithAggregatesInput | PrivacyPolicyTranslationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PrivacyPolicyTranslation"> | number
    privacy_policy_id?: IntWithAggregatesFilter<"PrivacyPolicyTranslation"> | number
    language?: EnumLanguageWithAggregatesFilter<"PrivacyPolicyTranslation"> | $Enums.Language
    content?: StringWithAggregatesFilter<"PrivacyPolicyTranslation"> | string
  }

  export type AboutUsWhereInput = {
    AND?: AboutUsWhereInput | AboutUsWhereInput[]
    OR?: AboutUsWhereInput[]
    NOT?: AboutUsWhereInput | AboutUsWhereInput[]
    id?: IntFilter<"AboutUs"> | number
    translations?: AboutUsTranslationListRelationFilter
  }

  export type AboutUsOrderByWithRelationInput = {
    id?: SortOrder
    translations?: AboutUsTranslationOrderByRelationAggregateInput
  }

  export type AboutUsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AboutUsWhereInput | AboutUsWhereInput[]
    OR?: AboutUsWhereInput[]
    NOT?: AboutUsWhereInput | AboutUsWhereInput[]
    translations?: AboutUsTranslationListRelationFilter
  }, "id">

  export type AboutUsOrderByWithAggregationInput = {
    id?: SortOrder
    _count?: AboutUsCountOrderByAggregateInput
    _avg?: AboutUsAvgOrderByAggregateInput
    _max?: AboutUsMaxOrderByAggregateInput
    _min?: AboutUsMinOrderByAggregateInput
    _sum?: AboutUsSumOrderByAggregateInput
  }

  export type AboutUsScalarWhereWithAggregatesInput = {
    AND?: AboutUsScalarWhereWithAggregatesInput | AboutUsScalarWhereWithAggregatesInput[]
    OR?: AboutUsScalarWhereWithAggregatesInput[]
    NOT?: AboutUsScalarWhereWithAggregatesInput | AboutUsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AboutUs"> | number
  }

  export type AboutUsTranslationWhereInput = {
    AND?: AboutUsTranslationWhereInput | AboutUsTranslationWhereInput[]
    OR?: AboutUsTranslationWhereInput[]
    NOT?: AboutUsTranslationWhereInput | AboutUsTranslationWhereInput[]
    id?: IntFilter<"AboutUsTranslation"> | number
    about_us_id?: IntFilter<"AboutUsTranslation"> | number
    language?: EnumLanguageFilter<"AboutUsTranslation"> | $Enums.Language
    content?: StringFilter<"AboutUsTranslation"> | string
    about_us?: XOR<AboutUsScalarRelationFilter, AboutUsWhereInput>
  }

  export type AboutUsTranslationOrderByWithRelationInput = {
    id?: SortOrder
    about_us_id?: SortOrder
    language?: SortOrder
    content?: SortOrder
    about_us?: AboutUsOrderByWithRelationInput
  }

  export type AboutUsTranslationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AboutUsTranslationWhereInput | AboutUsTranslationWhereInput[]
    OR?: AboutUsTranslationWhereInput[]
    NOT?: AboutUsTranslationWhereInput | AboutUsTranslationWhereInput[]
    about_us_id?: IntFilter<"AboutUsTranslation"> | number
    language?: EnumLanguageFilter<"AboutUsTranslation"> | $Enums.Language
    content?: StringFilter<"AboutUsTranslation"> | string
    about_us?: XOR<AboutUsScalarRelationFilter, AboutUsWhereInput>
  }, "id">

  export type AboutUsTranslationOrderByWithAggregationInput = {
    id?: SortOrder
    about_us_id?: SortOrder
    language?: SortOrder
    content?: SortOrder
    _count?: AboutUsTranslationCountOrderByAggregateInput
    _avg?: AboutUsTranslationAvgOrderByAggregateInput
    _max?: AboutUsTranslationMaxOrderByAggregateInput
    _min?: AboutUsTranslationMinOrderByAggregateInput
    _sum?: AboutUsTranslationSumOrderByAggregateInput
  }

  export type AboutUsTranslationScalarWhereWithAggregatesInput = {
    AND?: AboutUsTranslationScalarWhereWithAggregatesInput | AboutUsTranslationScalarWhereWithAggregatesInput[]
    OR?: AboutUsTranslationScalarWhereWithAggregatesInput[]
    NOT?: AboutUsTranslationScalarWhereWithAggregatesInput | AboutUsTranslationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AboutUsTranslation"> | number
    about_us_id?: IntWithAggregatesFilter<"AboutUsTranslation"> | number
    language?: EnumLanguageWithAggregatesFilter<"AboutUsTranslation"> | $Enums.Language
    content?: StringWithAggregatesFilter<"AboutUsTranslation"> | string
  }

  export type FaqWhereInput = {
    AND?: FaqWhereInput | FaqWhereInput[]
    OR?: FaqWhereInput[]
    NOT?: FaqWhereInput | FaqWhereInput[]
    id?: IntFilter<"Faq"> | number
    created_at?: BigIntFilter<"Faq"> | bigint | number
    updated_at?: BigIntFilter<"Faq"> | bigint | number
    translations?: FaqTranslationListRelationFilter
  }

  export type FaqOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    translations?: FaqTranslationOrderByRelationAggregateInput
  }

  export type FaqWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FaqWhereInput | FaqWhereInput[]
    OR?: FaqWhereInput[]
    NOT?: FaqWhereInput | FaqWhereInput[]
    created_at?: BigIntFilter<"Faq"> | bigint | number
    updated_at?: BigIntFilter<"Faq"> | bigint | number
    translations?: FaqTranslationListRelationFilter
  }, "id">

  export type FaqOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: FaqCountOrderByAggregateInput
    _avg?: FaqAvgOrderByAggregateInput
    _max?: FaqMaxOrderByAggregateInput
    _min?: FaqMinOrderByAggregateInput
    _sum?: FaqSumOrderByAggregateInput
  }

  export type FaqScalarWhereWithAggregatesInput = {
    AND?: FaqScalarWhereWithAggregatesInput | FaqScalarWhereWithAggregatesInput[]
    OR?: FaqScalarWhereWithAggregatesInput[]
    NOT?: FaqScalarWhereWithAggregatesInput | FaqScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Faq"> | number
    created_at?: BigIntWithAggregatesFilter<"Faq"> | bigint | number
    updated_at?: BigIntWithAggregatesFilter<"Faq"> | bigint | number
  }

  export type FaqTranslationWhereInput = {
    AND?: FaqTranslationWhereInput | FaqTranslationWhereInput[]
    OR?: FaqTranslationWhereInput[]
    NOT?: FaqTranslationWhereInput | FaqTranslationWhereInput[]
    id?: IntFilter<"FaqTranslation"> | number
    faq_id?: IntFilter<"FaqTranslation"> | number
    language?: EnumLanguageFilter<"FaqTranslation"> | $Enums.Language
    title?: StringFilter<"FaqTranslation"> | string
    content?: StringFilter<"FaqTranslation"> | string
    faq?: XOR<FaqScalarRelationFilter, FaqWhereInput>
  }

  export type FaqTranslationOrderByWithRelationInput = {
    id?: SortOrder
    faq_id?: SortOrder
    language?: SortOrder
    title?: SortOrder
    content?: SortOrder
    faq?: FaqOrderByWithRelationInput
  }

  export type FaqTranslationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FaqTranslationWhereInput | FaqTranslationWhereInput[]
    OR?: FaqTranslationWhereInput[]
    NOT?: FaqTranslationWhereInput | FaqTranslationWhereInput[]
    faq_id?: IntFilter<"FaqTranslation"> | number
    language?: EnumLanguageFilter<"FaqTranslation"> | $Enums.Language
    title?: StringFilter<"FaqTranslation"> | string
    content?: StringFilter<"FaqTranslation"> | string
    faq?: XOR<FaqScalarRelationFilter, FaqWhereInput>
  }, "id">

  export type FaqTranslationOrderByWithAggregationInput = {
    id?: SortOrder
    faq_id?: SortOrder
    language?: SortOrder
    title?: SortOrder
    content?: SortOrder
    _count?: FaqTranslationCountOrderByAggregateInput
    _avg?: FaqTranslationAvgOrderByAggregateInput
    _max?: FaqTranslationMaxOrderByAggregateInput
    _min?: FaqTranslationMinOrderByAggregateInput
    _sum?: FaqTranslationSumOrderByAggregateInput
  }

  export type FaqTranslationScalarWhereWithAggregatesInput = {
    AND?: FaqTranslationScalarWhereWithAggregatesInput | FaqTranslationScalarWhereWithAggregatesInput[]
    OR?: FaqTranslationScalarWhereWithAggregatesInput[]
    NOT?: FaqTranslationScalarWhereWithAggregatesInput | FaqTranslationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FaqTranslation"> | number
    faq_id?: IntWithAggregatesFilter<"FaqTranslation"> | number
    language?: EnumLanguageWithAggregatesFilter<"FaqTranslation"> | $Enums.Language
    title?: StringWithAggregatesFilter<"FaqTranslation"> | string
    content?: StringWithAggregatesFilter<"FaqTranslation"> | string
  }

  export type AdminCreateInput = {
    id: string
    first_name: string
    last_name: string
    email: string
    whatsapp_phone_number: string
    picture: string
    donation_links?: DonationLinkCreateNestedManyWithoutAdminInput
    products?: ProductCreateNestedManyWithoutAdminInput
  }

  export type AdminUncheckedCreateInput = {
    id: string
    first_name: string
    last_name: string
    email: string
    whatsapp_phone_number: string
    picture: string
    donation_links?: DonationLinkUncheckedCreateNestedManyWithoutAdminInput
    products?: ProductUncheckedCreateNestedManyWithoutAdminInput
  }

  export type AdminUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    whatsapp_phone_number?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    donation_links?: DonationLinkUpdateManyWithoutAdminNestedInput
    products?: ProductUpdateManyWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    whatsapp_phone_number?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    donation_links?: DonationLinkUncheckedUpdateManyWithoutAdminNestedInput
    products?: ProductUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type AdminCreateManyInput = {
    id: string
    first_name: string
    last_name: string
    email: string
    whatsapp_phone_number: string
    picture: string
  }

  export type AdminUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    whatsapp_phone_number?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
  }

  export type AdminUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    whatsapp_phone_number?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
  }

  export type DonationLinkCreateInput = {
    currency_code: $Enums.CurrencyCode
    link: string
    admin: AdminCreateNestedOneWithoutDonation_linksInput
  }

  export type DonationLinkUncheckedCreateInput = {
    id?: number
    admin_id: string
    currency_code: $Enums.CurrencyCode
    link: string
  }

  export type DonationLinkUpdateInput = {
    currency_code?: EnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode
    link?: StringFieldUpdateOperationsInput | string
    admin?: AdminUpdateOneRequiredWithoutDonation_linksNestedInput
  }

  export type DonationLinkUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    admin_id?: StringFieldUpdateOperationsInput | string
    currency_code?: EnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode
    link?: StringFieldUpdateOperationsInput | string
  }

  export type DonationLinkCreateManyInput = {
    id?: number
    admin_id: string
    currency_code: $Enums.CurrencyCode
    link: string
  }

  export type DonationLinkUpdateManyMutationInput = {
    currency_code?: EnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode
    link?: StringFieldUpdateOperationsInput | string
  }

  export type DonationLinkUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    admin_id?: StringFieldUpdateOperationsInput | string
    currency_code?: EnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode
    link?: StringFieldUpdateOperationsInput | string
  }

  export type OwnerCreateInput = {
    first_name: string
    last_name: string
    sm_username: string
    picture: string
    created_at: bigint | number
    updated_at: bigint | number
    products?: ProductCreateNestedManyWithoutOwnerInput
  }

  export type OwnerUncheckedCreateInput = {
    id?: number
    first_name: string
    last_name: string
    sm_username: string
    picture: string
    created_at: bigint | number
    updated_at: bigint | number
    products?: ProductUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type OwnerUpdateInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    sm_username?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
    products?: ProductUpdateManyWithoutOwnerNestedInput
  }

  export type OwnerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    sm_username?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
    products?: ProductUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type OwnerCreateManyInput = {
    id?: number
    first_name: string
    last_name: string
    sm_username: string
    picture: string
    created_at: bigint | number
    updated_at: bigint | number
  }

  export type OwnerUpdateManyMutationInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    sm_username?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type OwnerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    sm_username?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type CustomerCreateInput = {
    id: string
    first_name: string
    last_name: string
    email: string
    password?: string | null
    phone_number?: string | null
    picture?: string | null
    last_active: bigint | number
  }

  export type CustomerUncheckedCreateInput = {
    id: string
    first_name: string
    last_name: string
    email: string
    password?: string | null
    phone_number?: string | null
    picture?: string | null
    last_active: bigint | number
  }

  export type CustomerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    last_active?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type CustomerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    last_active?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type CustomerCreateManyInput = {
    id: string
    first_name: string
    last_name: string
    email: string
    password?: string | null
    phone_number?: string | null
    picture?: string | null
    last_active: bigint | number
  }

  export type CustomerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    last_active?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type CustomerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    phone_number?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    last_active?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type LicenseCreateInput = {
    created_at: bigint | number
    updated_at: bigint | number
    products?: ProductCreateNestedManyWithoutLicenseInput
    translations?: LicenseTranslationCreateNestedManyWithoutLicenseInput
  }

  export type LicenseUncheckedCreateInput = {
    id?: number
    created_at: bigint | number
    updated_at: bigint | number
    products?: ProductUncheckedCreateNestedManyWithoutLicenseInput
    translations?: LicenseTranslationUncheckedCreateNestedManyWithoutLicenseInput
  }

  export type LicenseUpdateInput = {
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
    products?: ProductUpdateManyWithoutLicenseNestedInput
    translations?: LicenseTranslationUpdateManyWithoutLicenseNestedInput
  }

  export type LicenseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
    products?: ProductUncheckedUpdateManyWithoutLicenseNestedInput
    translations?: LicenseTranslationUncheckedUpdateManyWithoutLicenseNestedInput
  }

  export type LicenseCreateManyInput = {
    id?: number
    created_at: bigint | number
    updated_at: bigint | number
  }

  export type LicenseUpdateManyMutationInput = {
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type LicenseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type LicenseTranslationCreateInput = {
    language: $Enums.Language
    name: string
    content: string
    license: LicenseCreateNestedOneWithoutTranslationsInput
  }

  export type LicenseTranslationUncheckedCreateInput = {
    id?: number
    license_id: number
    language: $Enums.Language
    name: string
    content: string
  }

  export type LicenseTranslationUpdateInput = {
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    name?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    license?: LicenseUpdateOneRequiredWithoutTranslationsNestedInput
  }

  export type LicenseTranslationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    license_id?: IntFieldUpdateOperationsInput | number
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    name?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type LicenseTranslationCreateManyInput = {
    id?: number
    license_id: number
    language: $Enums.Language
    name: string
    content: string
  }

  export type LicenseTranslationUpdateManyMutationInput = {
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    name?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type LicenseTranslationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    license_id?: IntFieldUpdateOperationsInput | number
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    name?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryCreateInput = {
    name: string
    slug: string
    created_at: bigint | number
    updated_at: bigint | number
    products?: ProductCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: number
    name: string
    slug: string
    created_at: bigint | number
    updated_at: bigint | number
    products?: ProductUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
    products?: ProductUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
    products?: ProductUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: number
    name: string
    slug: string
    created_at: bigint | number
    updated_at: bigint | number
  }

  export type CategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ProductCreateInput = {
    id?: string
    name: string
    slug: string
    price_type: $Enums.PriceType
    download_link?: string | null
    is_published?: boolean
    is_pinned?: boolean
    created_at: bigint | number
    released_at: bigint | number
    updated_at: bigint | number
    admin: AdminCreateNestedOneWithoutProductsInput
    category: CategoryCreateNestedOneWithoutProductsInput
    owner: OwnerCreateNestedOneWithoutProductsInput
    license: LicenseCreateNestedOneWithoutProductsInput
    translations?: ProductTranslationCreateNestedManyWithoutProductInput
    discounts?: ProductDiscountCreateNestedOneWithoutProductInput
    coupons?: ProductCouponCreateNestedOneWithoutProductInput
    images?: ProductImageCreateNestedManyWithoutProductInput
    variants?: ProductVariantCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    id?: string
    category_id: number
    admin_id: string
    owner_id: number
    license_id: number
    name: string
    slug: string
    price_type: $Enums.PriceType
    download_link?: string | null
    is_published?: boolean
    is_pinned?: boolean
    created_at: bigint | number
    released_at: bigint | number
    updated_at: bigint | number
    translations?: ProductTranslationUncheckedCreateNestedManyWithoutProductInput
    discounts?: ProductDiscountUncheckedCreateNestedOneWithoutProductInput
    coupons?: ProductCouponUncheckedCreateNestedOneWithoutProductInput
    images?: ProductImageUncheckedCreateNestedManyWithoutProductInput
    variants?: ProductVariantUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price_type?: EnumPriceTypeFieldUpdateOperationsInput | $Enums.PriceType
    download_link?: NullableStringFieldUpdateOperationsInput | string | null
    is_published?: BoolFieldUpdateOperationsInput | boolean
    is_pinned?: BoolFieldUpdateOperationsInput | boolean
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    released_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
    admin?: AdminUpdateOneRequiredWithoutProductsNestedInput
    category?: CategoryUpdateOneRequiredWithoutProductsNestedInput
    owner?: OwnerUpdateOneRequiredWithoutProductsNestedInput
    license?: LicenseUpdateOneRequiredWithoutProductsNestedInput
    translations?: ProductTranslationUpdateManyWithoutProductNestedInput
    discounts?: ProductDiscountUpdateOneWithoutProductNestedInput
    coupons?: ProductCouponUpdateOneWithoutProductNestedInput
    images?: ProductImageUpdateManyWithoutProductNestedInput
    variants?: ProductVariantUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    category_id?: IntFieldUpdateOperationsInput | number
    admin_id?: StringFieldUpdateOperationsInput | string
    owner_id?: IntFieldUpdateOperationsInput | number
    license_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price_type?: EnumPriceTypeFieldUpdateOperationsInput | $Enums.PriceType
    download_link?: NullableStringFieldUpdateOperationsInput | string | null
    is_published?: BoolFieldUpdateOperationsInput | boolean
    is_pinned?: BoolFieldUpdateOperationsInput | boolean
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    released_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
    translations?: ProductTranslationUncheckedUpdateManyWithoutProductNestedInput
    discounts?: ProductDiscountUncheckedUpdateOneWithoutProductNestedInput
    coupons?: ProductCouponUncheckedUpdateOneWithoutProductNestedInput
    images?: ProductImageUncheckedUpdateManyWithoutProductNestedInput
    variants?: ProductVariantUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    id?: string
    category_id: number
    admin_id: string
    owner_id: number
    license_id: number
    name: string
    slug: string
    price_type: $Enums.PriceType
    download_link?: string | null
    is_published?: boolean
    is_pinned?: boolean
    created_at: bigint | number
    released_at: bigint | number
    updated_at: bigint | number
  }

  export type ProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price_type?: EnumPriceTypeFieldUpdateOperationsInput | $Enums.PriceType
    download_link?: NullableStringFieldUpdateOperationsInput | string | null
    is_published?: BoolFieldUpdateOperationsInput | boolean
    is_pinned?: BoolFieldUpdateOperationsInput | boolean
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    released_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    category_id?: IntFieldUpdateOperationsInput | number
    admin_id?: StringFieldUpdateOperationsInput | string
    owner_id?: IntFieldUpdateOperationsInput | number
    license_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price_type?: EnumPriceTypeFieldUpdateOperationsInput | $Enums.PriceType
    download_link?: NullableStringFieldUpdateOperationsInput | string | null
    is_published?: BoolFieldUpdateOperationsInput | boolean
    is_pinned?: BoolFieldUpdateOperationsInput | boolean
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    released_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ProductTranslationCreateInput = {
    id?: string
    language: $Enums.Language
    description: string
    changelog?: string | null
    product: ProductCreateNestedOneWithoutTranslationsInput
  }

  export type ProductTranslationUncheckedCreateInput = {
    id?: string
    product_id: string
    language: $Enums.Language
    description: string
    changelog?: string | null
  }

  export type ProductTranslationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    description?: StringFieldUpdateOperationsInput | string
    changelog?: NullableStringFieldUpdateOperationsInput | string | null
    product?: ProductUpdateOneRequiredWithoutTranslationsNestedInput
  }

  export type ProductTranslationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_id?: StringFieldUpdateOperationsInput | string
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    description?: StringFieldUpdateOperationsInput | string
    changelog?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductTranslationCreateManyInput = {
    id?: string
    product_id: string
    language: $Enums.Language
    description: string
    changelog?: string | null
  }

  export type ProductTranslationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    description?: StringFieldUpdateOperationsInput | string
    changelog?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductTranslationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_id?: StringFieldUpdateOperationsInput | string
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    description?: StringFieldUpdateOperationsInput | string
    changelog?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductDiscountCreateInput = {
    discount: number
    expired_at: bigint | number
    product: ProductCreateNestedOneWithoutDiscountsInput
  }

  export type ProductDiscountUncheckedCreateInput = {
    id?: number
    product_id: string
    discount: number
    expired_at: bigint | number
  }

  export type ProductDiscountUpdateInput = {
    discount?: IntFieldUpdateOperationsInput | number
    expired_at?: BigIntFieldUpdateOperationsInput | bigint | number
    product?: ProductUpdateOneRequiredWithoutDiscountsNestedInput
  }

  export type ProductDiscountUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: StringFieldUpdateOperationsInput | string
    discount?: IntFieldUpdateOperationsInput | number
    expired_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ProductDiscountCreateManyInput = {
    id?: number
    product_id: string
    discount: number
    expired_at: bigint | number
  }

  export type ProductDiscountUpdateManyMutationInput = {
    discount?: IntFieldUpdateOperationsInput | number
    expired_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ProductDiscountUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: StringFieldUpdateOperationsInput | string
    discount?: IntFieldUpdateOperationsInput | number
    expired_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ProductCouponCreateInput = {
    code: string
    discount: number
    expired_at: bigint | number
    product: ProductCreateNestedOneWithoutCouponsInput
  }

  export type ProductCouponUncheckedCreateInput = {
    id?: number
    product_id: string
    code: string
    discount: number
    expired_at: bigint | number
  }

  export type ProductCouponUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    discount?: IntFieldUpdateOperationsInput | number
    expired_at?: BigIntFieldUpdateOperationsInput | bigint | number
    product?: ProductUpdateOneRequiredWithoutCouponsNestedInput
  }

  export type ProductCouponUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    discount?: IntFieldUpdateOperationsInput | number
    expired_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ProductCouponCreateManyInput = {
    id?: number
    product_id: string
    code: string
    discount: number
    expired_at: bigint | number
  }

  export type ProductCouponUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    discount?: IntFieldUpdateOperationsInput | number
    expired_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ProductCouponUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    discount?: IntFieldUpdateOperationsInput | number
    expired_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ProductImageCreateInput = {
    id?: string
    url: string
    is_thumbnail: boolean
    width: number
    height: number
    product: ProductCreateNestedOneWithoutImagesInput
  }

  export type ProductImageUncheckedCreateInput = {
    id?: string
    product_id: string
    url: string
    is_thumbnail: boolean
    width: number
    height: number
  }

  export type ProductImageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    is_thumbnail?: BoolFieldUpdateOperationsInput | boolean
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    product?: ProductUpdateOneRequiredWithoutImagesNestedInput
  }

  export type ProductImageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    is_thumbnail?: BoolFieldUpdateOperationsInput | boolean
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
  }

  export type ProductImageCreateManyInput = {
    id?: string
    product_id: string
    url: string
    is_thumbnail: boolean
    width: number
    height: number
  }

  export type ProductImageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    is_thumbnail?: BoolFieldUpdateOperationsInput | boolean
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
  }

  export type ProductImageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    is_thumbnail?: BoolFieldUpdateOperationsInput | boolean
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
  }

  export type ProductVariantCreateInput = {
    id?: string
    name: string
    download_link?: string | null
    product: ProductCreateNestedOneWithoutVariantsInput
    prices?: ProductPriceCreateNestedManyWithoutVariantInput
  }

  export type ProductVariantUncheckedCreateInput = {
    id?: string
    product_id: string
    name: string
    download_link?: string | null
    prices?: ProductPriceUncheckedCreateNestedManyWithoutVariantInput
  }

  export type ProductVariantUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    download_link?: NullableStringFieldUpdateOperationsInput | string | null
    product?: ProductUpdateOneRequiredWithoutVariantsNestedInput
    prices?: ProductPriceUpdateManyWithoutVariantNestedInput
  }

  export type ProductVariantUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    download_link?: NullableStringFieldUpdateOperationsInput | string | null
    prices?: ProductPriceUncheckedUpdateManyWithoutVariantNestedInput
  }

  export type ProductVariantCreateManyInput = {
    id?: string
    product_id: string
    name: string
    download_link?: string | null
  }

  export type ProductVariantUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    download_link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductVariantUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    download_link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductPriceCreateInput = {
    id?: string
    currency_code: $Enums.CurrencyCode
    price: number
    variant: ProductVariantCreateNestedOneWithoutPricesInput
  }

  export type ProductPriceUncheckedCreateInput = {
    id?: string
    variant_id: string
    currency_code: $Enums.CurrencyCode
    price: number
  }

  export type ProductPriceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    currency_code?: EnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode
    price?: IntFieldUpdateOperationsInput | number
    variant?: ProductVariantUpdateOneRequiredWithoutPricesNestedInput
  }

  export type ProductPriceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    variant_id?: StringFieldUpdateOperationsInput | string
    currency_code?: EnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode
    price?: IntFieldUpdateOperationsInput | number
  }

  export type ProductPriceCreateManyInput = {
    id?: string
    variant_id: string
    currency_code: $Enums.CurrencyCode
    price: number
  }

  export type ProductPriceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    currency_code?: EnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode
    price?: IntFieldUpdateOperationsInput | number
  }

  export type ProductPriceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    variant_id?: StringFieldUpdateOperationsInput | string
    currency_code?: EnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode
    price?: IntFieldUpdateOperationsInput | number
  }

  export type TermsOfServiceCreateInput = {
    created_at: bigint | number
    updated_at: bigint | number
    translations?: TermsOfServiceTranslationCreateNestedManyWithoutTerms_of_serviceInput
  }

  export type TermsOfServiceUncheckedCreateInput = {
    id?: number
    created_at: bigint | number
    updated_at: bigint | number
    translations?: TermsOfServiceTranslationUncheckedCreateNestedManyWithoutTerms_of_serviceInput
  }

  export type TermsOfServiceUpdateInput = {
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
    translations?: TermsOfServiceTranslationUpdateManyWithoutTerms_of_serviceNestedInput
  }

  export type TermsOfServiceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
    translations?: TermsOfServiceTranslationUncheckedUpdateManyWithoutTerms_of_serviceNestedInput
  }

  export type TermsOfServiceCreateManyInput = {
    id?: number
    created_at: bigint | number
    updated_at: bigint | number
  }

  export type TermsOfServiceUpdateManyMutationInput = {
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type TermsOfServiceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type TermsOfServiceTranslationCreateInput = {
    language: $Enums.Language
    content: string
    terms_of_service: TermsOfServiceCreateNestedOneWithoutTranslationsInput
  }

  export type TermsOfServiceTranslationUncheckedCreateInput = {
    id?: number
    terms_of_service_id: number
    language: $Enums.Language
    content: string
  }

  export type TermsOfServiceTranslationUpdateInput = {
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    content?: StringFieldUpdateOperationsInput | string
    terms_of_service?: TermsOfServiceUpdateOneRequiredWithoutTranslationsNestedInput
  }

  export type TermsOfServiceTranslationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    terms_of_service_id?: IntFieldUpdateOperationsInput | number
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    content?: StringFieldUpdateOperationsInput | string
  }

  export type TermsOfServiceTranslationCreateManyInput = {
    id?: number
    terms_of_service_id: number
    language: $Enums.Language
    content: string
  }

  export type TermsOfServiceTranslationUpdateManyMutationInput = {
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    content?: StringFieldUpdateOperationsInput | string
  }

  export type TermsOfServiceTranslationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    terms_of_service_id?: IntFieldUpdateOperationsInput | number
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    content?: StringFieldUpdateOperationsInput | string
  }

  export type PrivacyPolicyCreateInput = {
    created_at: bigint | number
    updated_at: bigint | number
    translations?: PrivacyPolicyTranslationCreateNestedManyWithoutPrivacy_policyInput
  }

  export type PrivacyPolicyUncheckedCreateInput = {
    id?: number
    created_at: bigint | number
    updated_at: bigint | number
    translations?: PrivacyPolicyTranslationUncheckedCreateNestedManyWithoutPrivacy_policyInput
  }

  export type PrivacyPolicyUpdateInput = {
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
    translations?: PrivacyPolicyTranslationUpdateManyWithoutPrivacy_policyNestedInput
  }

  export type PrivacyPolicyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
    translations?: PrivacyPolicyTranslationUncheckedUpdateManyWithoutPrivacy_policyNestedInput
  }

  export type PrivacyPolicyCreateManyInput = {
    id?: number
    created_at: bigint | number
    updated_at: bigint | number
  }

  export type PrivacyPolicyUpdateManyMutationInput = {
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type PrivacyPolicyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type PrivacyPolicyTranslationCreateInput = {
    language: $Enums.Language
    content: string
    privacy_policy: PrivacyPolicyCreateNestedOneWithoutTranslationsInput
  }

  export type PrivacyPolicyTranslationUncheckedCreateInput = {
    id?: number
    privacy_policy_id: number
    language: $Enums.Language
    content: string
  }

  export type PrivacyPolicyTranslationUpdateInput = {
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    content?: StringFieldUpdateOperationsInput | string
    privacy_policy?: PrivacyPolicyUpdateOneRequiredWithoutTranslationsNestedInput
  }

  export type PrivacyPolicyTranslationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    privacy_policy_id?: IntFieldUpdateOperationsInput | number
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    content?: StringFieldUpdateOperationsInput | string
  }

  export type PrivacyPolicyTranslationCreateManyInput = {
    id?: number
    privacy_policy_id: number
    language: $Enums.Language
    content: string
  }

  export type PrivacyPolicyTranslationUpdateManyMutationInput = {
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    content?: StringFieldUpdateOperationsInput | string
  }

  export type PrivacyPolicyTranslationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    privacy_policy_id?: IntFieldUpdateOperationsInput | number
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    content?: StringFieldUpdateOperationsInput | string
  }

  export type AboutUsCreateInput = {
    translations?: AboutUsTranslationCreateNestedManyWithoutAbout_usInput
  }

  export type AboutUsUncheckedCreateInput = {
    id?: number
    translations?: AboutUsTranslationUncheckedCreateNestedManyWithoutAbout_usInput
  }

  export type AboutUsUpdateInput = {
    translations?: AboutUsTranslationUpdateManyWithoutAbout_usNestedInput
  }

  export type AboutUsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    translations?: AboutUsTranslationUncheckedUpdateManyWithoutAbout_usNestedInput
  }

  export type AboutUsCreateManyInput = {
    id?: number
  }

  export type AboutUsUpdateManyMutationInput = {

  }

  export type AboutUsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type AboutUsTranslationCreateInput = {
    language: $Enums.Language
    content: string
    about_us: AboutUsCreateNestedOneWithoutTranslationsInput
  }

  export type AboutUsTranslationUncheckedCreateInput = {
    id?: number
    about_us_id: number
    language: $Enums.Language
    content: string
  }

  export type AboutUsTranslationUpdateInput = {
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    content?: StringFieldUpdateOperationsInput | string
    about_us?: AboutUsUpdateOneRequiredWithoutTranslationsNestedInput
  }

  export type AboutUsTranslationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    about_us_id?: IntFieldUpdateOperationsInput | number
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    content?: StringFieldUpdateOperationsInput | string
  }

  export type AboutUsTranslationCreateManyInput = {
    id?: number
    about_us_id: number
    language: $Enums.Language
    content: string
  }

  export type AboutUsTranslationUpdateManyMutationInput = {
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    content?: StringFieldUpdateOperationsInput | string
  }

  export type AboutUsTranslationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    about_us_id?: IntFieldUpdateOperationsInput | number
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    content?: StringFieldUpdateOperationsInput | string
  }

  export type FaqCreateInput = {
    created_at: bigint | number
    updated_at: bigint | number
    translations?: FaqTranslationCreateNestedManyWithoutFaqInput
  }

  export type FaqUncheckedCreateInput = {
    id?: number
    created_at: bigint | number
    updated_at: bigint | number
    translations?: FaqTranslationUncheckedCreateNestedManyWithoutFaqInput
  }

  export type FaqUpdateInput = {
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
    translations?: FaqTranslationUpdateManyWithoutFaqNestedInput
  }

  export type FaqUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
    translations?: FaqTranslationUncheckedUpdateManyWithoutFaqNestedInput
  }

  export type FaqCreateManyInput = {
    id?: number
    created_at: bigint | number
    updated_at: bigint | number
  }

  export type FaqUpdateManyMutationInput = {
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type FaqUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type FaqTranslationCreateInput = {
    language: $Enums.Language
    title: string
    content: string
    faq: FaqCreateNestedOneWithoutTranslationsInput
  }

  export type FaqTranslationUncheckedCreateInput = {
    id?: number
    faq_id: number
    language: $Enums.Language
    title: string
    content: string
  }

  export type FaqTranslationUpdateInput = {
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    faq?: FaqUpdateOneRequiredWithoutTranslationsNestedInput
  }

  export type FaqTranslationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    faq_id?: IntFieldUpdateOperationsInput | number
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type FaqTranslationCreateManyInput = {
    id?: number
    faq_id: number
    language: $Enums.Language
    title: string
    content: string
  }

  export type FaqTranslationUpdateManyMutationInput = {
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type FaqTranslationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    faq_id?: IntFieldUpdateOperationsInput | number
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DonationLinkListRelationFilter = {
    every?: DonationLinkWhereInput
    some?: DonationLinkWhereInput
    none?: DonationLinkWhereInput
  }

  export type ProductListRelationFilter = {
    every?: ProductWhereInput
    some?: ProductWhereInput
    none?: ProductWhereInput
  }

  export type DonationLinkOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AdminCountOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    whatsapp_phone_number?: SortOrder
    picture?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    whatsapp_phone_number?: SortOrder
    picture?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    whatsapp_phone_number?: SortOrder
    picture?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnumCurrencyCodeFilter<$PrismaModel = never> = {
    equals?: $Enums.CurrencyCode | EnumCurrencyCodeFieldRefInput<$PrismaModel>
    in?: $Enums.CurrencyCode[] | ListEnumCurrencyCodeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CurrencyCode[] | ListEnumCurrencyCodeFieldRefInput<$PrismaModel>
    not?: NestedEnumCurrencyCodeFilter<$PrismaModel> | $Enums.CurrencyCode
  }

  export type AdminScalarRelationFilter = {
    is?: AdminWhereInput
    isNot?: AdminWhereInput
  }

  export type DonationLinkCountOrderByAggregateInput = {
    id?: SortOrder
    admin_id?: SortOrder
    currency_code?: SortOrder
    link?: SortOrder
  }

  export type DonationLinkAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DonationLinkMaxOrderByAggregateInput = {
    id?: SortOrder
    admin_id?: SortOrder
    currency_code?: SortOrder
    link?: SortOrder
  }

  export type DonationLinkMinOrderByAggregateInput = {
    id?: SortOrder
    admin_id?: SortOrder
    currency_code?: SortOrder
    link?: SortOrder
  }

  export type DonationLinkSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumCurrencyCodeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CurrencyCode | EnumCurrencyCodeFieldRefInput<$PrismaModel>
    in?: $Enums.CurrencyCode[] | ListEnumCurrencyCodeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CurrencyCode[] | ListEnumCurrencyCodeFieldRefInput<$PrismaModel>
    not?: NestedEnumCurrencyCodeWithAggregatesFilter<$PrismaModel> | $Enums.CurrencyCode
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCurrencyCodeFilter<$PrismaModel>
    _max?: NestedEnumCurrencyCodeFilter<$PrismaModel>
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type OwnerCountOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    sm_username?: SortOrder
    picture?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type OwnerAvgOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type OwnerMaxOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    sm_username?: SortOrder
    picture?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type OwnerMinOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    sm_username?: SortOrder
    picture?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type OwnerSumOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CustomerCountOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone_number?: SortOrder
    picture?: SortOrder
    last_active?: SortOrder
  }

  export type CustomerAvgOrderByAggregateInput = {
    last_active?: SortOrder
  }

  export type CustomerMaxOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone_number?: SortOrder
    picture?: SortOrder
    last_active?: SortOrder
  }

  export type CustomerMinOrderByAggregateInput = {
    id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phone_number?: SortOrder
    picture?: SortOrder
    last_active?: SortOrder
  }

  export type CustomerSumOrderByAggregateInput = {
    last_active?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type LicenseTranslationListRelationFilter = {
    every?: LicenseTranslationWhereInput
    some?: LicenseTranslationWhereInput
    none?: LicenseTranslationWhereInput
  }

  export type LicenseTranslationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LicenseCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LicenseAvgOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LicenseMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LicenseMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LicenseSumOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type EnumLanguageFilter<$PrismaModel = never> = {
    equals?: $Enums.Language | EnumLanguageFieldRefInput<$PrismaModel>
    in?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    notIn?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    not?: NestedEnumLanguageFilter<$PrismaModel> | $Enums.Language
  }

  export type LicenseScalarRelationFilter = {
    is?: LicenseWhereInput
    isNot?: LicenseWhereInput
  }

  export type LicenseTranslationCountOrderByAggregateInput = {
    id?: SortOrder
    license_id?: SortOrder
    language?: SortOrder
    name?: SortOrder
    content?: SortOrder
  }

  export type LicenseTranslationAvgOrderByAggregateInput = {
    id?: SortOrder
    license_id?: SortOrder
  }

  export type LicenseTranslationMaxOrderByAggregateInput = {
    id?: SortOrder
    license_id?: SortOrder
    language?: SortOrder
    name?: SortOrder
    content?: SortOrder
  }

  export type LicenseTranslationMinOrderByAggregateInput = {
    id?: SortOrder
    license_id?: SortOrder
    language?: SortOrder
    name?: SortOrder
    content?: SortOrder
  }

  export type LicenseTranslationSumOrderByAggregateInput = {
    id?: SortOrder
    license_id?: SortOrder
  }

  export type EnumLanguageWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Language | EnumLanguageFieldRefInput<$PrismaModel>
    in?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    notIn?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    not?: NestedEnumLanguageWithAggregatesFilter<$PrismaModel> | $Enums.Language
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLanguageFilter<$PrismaModel>
    _max?: NestedEnumLanguageFilter<$PrismaModel>
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type EnumPriceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PriceType | EnumPriceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PriceType[] | ListEnumPriceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PriceType[] | ListEnumPriceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPriceTypeFilter<$PrismaModel> | $Enums.PriceType
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type CategoryScalarRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type OwnerScalarRelationFilter = {
    is?: OwnerWhereInput
    isNot?: OwnerWhereInput
  }

  export type ProductTranslationListRelationFilter = {
    every?: ProductTranslationWhereInput
    some?: ProductTranslationWhereInput
    none?: ProductTranslationWhereInput
  }

  export type ProductDiscountNullableScalarRelationFilter = {
    is?: ProductDiscountWhereInput | null
    isNot?: ProductDiscountWhereInput | null
  }

  export type ProductCouponNullableScalarRelationFilter = {
    is?: ProductCouponWhereInput | null
    isNot?: ProductCouponWhereInput | null
  }

  export type ProductImageListRelationFilter = {
    every?: ProductImageWhereInput
    some?: ProductImageWhereInput
    none?: ProductImageWhereInput
  }

  export type ProductVariantListRelationFilter = {
    every?: ProductVariantWhereInput
    some?: ProductVariantWhereInput
    none?: ProductVariantWhereInput
  }

  export type ProductTranslationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductVariantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    category_id?: SortOrder
    admin_id?: SortOrder
    owner_id?: SortOrder
    license_id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    price_type?: SortOrder
    download_link?: SortOrder
    is_published?: SortOrder
    is_pinned?: SortOrder
    created_at?: SortOrder
    released_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    category_id?: SortOrder
    owner_id?: SortOrder
    license_id?: SortOrder
    created_at?: SortOrder
    released_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    category_id?: SortOrder
    admin_id?: SortOrder
    owner_id?: SortOrder
    license_id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    price_type?: SortOrder
    download_link?: SortOrder
    is_published?: SortOrder
    is_pinned?: SortOrder
    created_at?: SortOrder
    released_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    category_id?: SortOrder
    admin_id?: SortOrder
    owner_id?: SortOrder
    license_id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    price_type?: SortOrder
    download_link?: SortOrder
    is_published?: SortOrder
    is_pinned?: SortOrder
    created_at?: SortOrder
    released_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    category_id?: SortOrder
    owner_id?: SortOrder
    license_id?: SortOrder
    created_at?: SortOrder
    released_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumPriceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PriceType | EnumPriceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PriceType[] | ListEnumPriceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PriceType[] | ListEnumPriceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPriceTypeWithAggregatesFilter<$PrismaModel> | $Enums.PriceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPriceTypeFilter<$PrismaModel>
    _max?: NestedEnumPriceTypeFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type ProductScalarRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type ProductTranslationCountOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    language?: SortOrder
    description?: SortOrder
    changelog?: SortOrder
  }

  export type ProductTranslationMaxOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    language?: SortOrder
    description?: SortOrder
    changelog?: SortOrder
  }

  export type ProductTranslationMinOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    language?: SortOrder
    description?: SortOrder
    changelog?: SortOrder
  }

  export type ProductDiscountCountOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    discount?: SortOrder
    expired_at?: SortOrder
  }

  export type ProductDiscountAvgOrderByAggregateInput = {
    id?: SortOrder
    discount?: SortOrder
    expired_at?: SortOrder
  }

  export type ProductDiscountMaxOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    discount?: SortOrder
    expired_at?: SortOrder
  }

  export type ProductDiscountMinOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    discount?: SortOrder
    expired_at?: SortOrder
  }

  export type ProductDiscountSumOrderByAggregateInput = {
    id?: SortOrder
    discount?: SortOrder
    expired_at?: SortOrder
  }

  export type ProductCouponCountOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    code?: SortOrder
    discount?: SortOrder
    expired_at?: SortOrder
  }

  export type ProductCouponAvgOrderByAggregateInput = {
    id?: SortOrder
    discount?: SortOrder
    expired_at?: SortOrder
  }

  export type ProductCouponMaxOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    code?: SortOrder
    discount?: SortOrder
    expired_at?: SortOrder
  }

  export type ProductCouponMinOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    code?: SortOrder
    discount?: SortOrder
    expired_at?: SortOrder
  }

  export type ProductCouponSumOrderByAggregateInput = {
    id?: SortOrder
    discount?: SortOrder
    expired_at?: SortOrder
  }

  export type ProductImageCountOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    url?: SortOrder
    is_thumbnail?: SortOrder
    width?: SortOrder
    height?: SortOrder
  }

  export type ProductImageAvgOrderByAggregateInput = {
    width?: SortOrder
    height?: SortOrder
  }

  export type ProductImageMaxOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    url?: SortOrder
    is_thumbnail?: SortOrder
    width?: SortOrder
    height?: SortOrder
  }

  export type ProductImageMinOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    url?: SortOrder
    is_thumbnail?: SortOrder
    width?: SortOrder
    height?: SortOrder
  }

  export type ProductImageSumOrderByAggregateInput = {
    width?: SortOrder
    height?: SortOrder
  }

  export type ProductPriceListRelationFilter = {
    every?: ProductPriceWhereInput
    some?: ProductPriceWhereInput
    none?: ProductPriceWhereInput
  }

  export type ProductPriceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductVariantCountOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    name?: SortOrder
    download_link?: SortOrder
  }

  export type ProductVariantMaxOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    name?: SortOrder
    download_link?: SortOrder
  }

  export type ProductVariantMinOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    name?: SortOrder
    download_link?: SortOrder
  }

  export type ProductVariantScalarRelationFilter = {
    is?: ProductVariantWhereInput
    isNot?: ProductVariantWhereInput
  }

  export type ProductPriceCountOrderByAggregateInput = {
    id?: SortOrder
    variant_id?: SortOrder
    currency_code?: SortOrder
    price?: SortOrder
  }

  export type ProductPriceAvgOrderByAggregateInput = {
    price?: SortOrder
  }

  export type ProductPriceMaxOrderByAggregateInput = {
    id?: SortOrder
    variant_id?: SortOrder
    currency_code?: SortOrder
    price?: SortOrder
  }

  export type ProductPriceMinOrderByAggregateInput = {
    id?: SortOrder
    variant_id?: SortOrder
    currency_code?: SortOrder
    price?: SortOrder
  }

  export type ProductPriceSumOrderByAggregateInput = {
    price?: SortOrder
  }

  export type TermsOfServiceTranslationListRelationFilter = {
    every?: TermsOfServiceTranslationWhereInput
    some?: TermsOfServiceTranslationWhereInput
    none?: TermsOfServiceTranslationWhereInput
  }

  export type TermsOfServiceTranslationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TermsOfServiceCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TermsOfServiceAvgOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TermsOfServiceMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TermsOfServiceMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TermsOfServiceSumOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type TermsOfServiceScalarRelationFilter = {
    is?: TermsOfServiceWhereInput
    isNot?: TermsOfServiceWhereInput
  }

  export type TermsOfServiceTranslationCountOrderByAggregateInput = {
    id?: SortOrder
    terms_of_service_id?: SortOrder
    language?: SortOrder
    content?: SortOrder
  }

  export type TermsOfServiceTranslationAvgOrderByAggregateInput = {
    id?: SortOrder
    terms_of_service_id?: SortOrder
  }

  export type TermsOfServiceTranslationMaxOrderByAggregateInput = {
    id?: SortOrder
    terms_of_service_id?: SortOrder
    language?: SortOrder
    content?: SortOrder
  }

  export type TermsOfServiceTranslationMinOrderByAggregateInput = {
    id?: SortOrder
    terms_of_service_id?: SortOrder
    language?: SortOrder
    content?: SortOrder
  }

  export type TermsOfServiceTranslationSumOrderByAggregateInput = {
    id?: SortOrder
    terms_of_service_id?: SortOrder
  }

  export type PrivacyPolicyTranslationListRelationFilter = {
    every?: PrivacyPolicyTranslationWhereInput
    some?: PrivacyPolicyTranslationWhereInput
    none?: PrivacyPolicyTranslationWhereInput
  }

  export type PrivacyPolicyTranslationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PrivacyPolicyCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PrivacyPolicyAvgOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PrivacyPolicyMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PrivacyPolicyMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PrivacyPolicySumOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PrivacyPolicyScalarRelationFilter = {
    is?: PrivacyPolicyWhereInput
    isNot?: PrivacyPolicyWhereInput
  }

  export type PrivacyPolicyTranslationCountOrderByAggregateInput = {
    id?: SortOrder
    privacy_policy_id?: SortOrder
    language?: SortOrder
    content?: SortOrder
  }

  export type PrivacyPolicyTranslationAvgOrderByAggregateInput = {
    id?: SortOrder
    privacy_policy_id?: SortOrder
  }

  export type PrivacyPolicyTranslationMaxOrderByAggregateInput = {
    id?: SortOrder
    privacy_policy_id?: SortOrder
    language?: SortOrder
    content?: SortOrder
  }

  export type PrivacyPolicyTranslationMinOrderByAggregateInput = {
    id?: SortOrder
    privacy_policy_id?: SortOrder
    language?: SortOrder
    content?: SortOrder
  }

  export type PrivacyPolicyTranslationSumOrderByAggregateInput = {
    id?: SortOrder
    privacy_policy_id?: SortOrder
  }

  export type AboutUsTranslationListRelationFilter = {
    every?: AboutUsTranslationWhereInput
    some?: AboutUsTranslationWhereInput
    none?: AboutUsTranslationWhereInput
  }

  export type AboutUsTranslationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AboutUsCountOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AboutUsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AboutUsMaxOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AboutUsMinOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AboutUsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AboutUsScalarRelationFilter = {
    is?: AboutUsWhereInput
    isNot?: AboutUsWhereInput
  }

  export type AboutUsTranslationCountOrderByAggregateInput = {
    id?: SortOrder
    about_us_id?: SortOrder
    language?: SortOrder
    content?: SortOrder
  }

  export type AboutUsTranslationAvgOrderByAggregateInput = {
    id?: SortOrder
    about_us_id?: SortOrder
  }

  export type AboutUsTranslationMaxOrderByAggregateInput = {
    id?: SortOrder
    about_us_id?: SortOrder
    language?: SortOrder
    content?: SortOrder
  }

  export type AboutUsTranslationMinOrderByAggregateInput = {
    id?: SortOrder
    about_us_id?: SortOrder
    language?: SortOrder
    content?: SortOrder
  }

  export type AboutUsTranslationSumOrderByAggregateInput = {
    id?: SortOrder
    about_us_id?: SortOrder
  }

  export type FaqTranslationListRelationFilter = {
    every?: FaqTranslationWhereInput
    some?: FaqTranslationWhereInput
    none?: FaqTranslationWhereInput
  }

  export type FaqTranslationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FaqCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type FaqAvgOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type FaqMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type FaqMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type FaqSumOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type FaqScalarRelationFilter = {
    is?: FaqWhereInput
    isNot?: FaqWhereInput
  }

  export type FaqTranslationCountOrderByAggregateInput = {
    id?: SortOrder
    faq_id?: SortOrder
    language?: SortOrder
    title?: SortOrder
    content?: SortOrder
  }

  export type FaqTranslationAvgOrderByAggregateInput = {
    id?: SortOrder
    faq_id?: SortOrder
  }

  export type FaqTranslationMaxOrderByAggregateInput = {
    id?: SortOrder
    faq_id?: SortOrder
    language?: SortOrder
    title?: SortOrder
    content?: SortOrder
  }

  export type FaqTranslationMinOrderByAggregateInput = {
    id?: SortOrder
    faq_id?: SortOrder
    language?: SortOrder
    title?: SortOrder
    content?: SortOrder
  }

  export type FaqTranslationSumOrderByAggregateInput = {
    id?: SortOrder
    faq_id?: SortOrder
  }

  export type DonationLinkCreateNestedManyWithoutAdminInput = {
    create?: XOR<DonationLinkCreateWithoutAdminInput, DonationLinkUncheckedCreateWithoutAdminInput> | DonationLinkCreateWithoutAdminInput[] | DonationLinkUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: DonationLinkCreateOrConnectWithoutAdminInput | DonationLinkCreateOrConnectWithoutAdminInput[]
    createMany?: DonationLinkCreateManyAdminInputEnvelope
    connect?: DonationLinkWhereUniqueInput | DonationLinkWhereUniqueInput[]
  }

  export type ProductCreateNestedManyWithoutAdminInput = {
    create?: XOR<ProductCreateWithoutAdminInput, ProductUncheckedCreateWithoutAdminInput> | ProductCreateWithoutAdminInput[] | ProductUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutAdminInput | ProductCreateOrConnectWithoutAdminInput[]
    createMany?: ProductCreateManyAdminInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type DonationLinkUncheckedCreateNestedManyWithoutAdminInput = {
    create?: XOR<DonationLinkCreateWithoutAdminInput, DonationLinkUncheckedCreateWithoutAdminInput> | DonationLinkCreateWithoutAdminInput[] | DonationLinkUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: DonationLinkCreateOrConnectWithoutAdminInput | DonationLinkCreateOrConnectWithoutAdminInput[]
    createMany?: DonationLinkCreateManyAdminInputEnvelope
    connect?: DonationLinkWhereUniqueInput | DonationLinkWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutAdminInput = {
    create?: XOR<ProductCreateWithoutAdminInput, ProductUncheckedCreateWithoutAdminInput> | ProductCreateWithoutAdminInput[] | ProductUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutAdminInput | ProductCreateOrConnectWithoutAdminInput[]
    createMany?: ProductCreateManyAdminInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DonationLinkUpdateManyWithoutAdminNestedInput = {
    create?: XOR<DonationLinkCreateWithoutAdminInput, DonationLinkUncheckedCreateWithoutAdminInput> | DonationLinkCreateWithoutAdminInput[] | DonationLinkUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: DonationLinkCreateOrConnectWithoutAdminInput | DonationLinkCreateOrConnectWithoutAdminInput[]
    upsert?: DonationLinkUpsertWithWhereUniqueWithoutAdminInput | DonationLinkUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: DonationLinkCreateManyAdminInputEnvelope
    set?: DonationLinkWhereUniqueInput | DonationLinkWhereUniqueInput[]
    disconnect?: DonationLinkWhereUniqueInput | DonationLinkWhereUniqueInput[]
    delete?: DonationLinkWhereUniqueInput | DonationLinkWhereUniqueInput[]
    connect?: DonationLinkWhereUniqueInput | DonationLinkWhereUniqueInput[]
    update?: DonationLinkUpdateWithWhereUniqueWithoutAdminInput | DonationLinkUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: DonationLinkUpdateManyWithWhereWithoutAdminInput | DonationLinkUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: DonationLinkScalarWhereInput | DonationLinkScalarWhereInput[]
  }

  export type ProductUpdateManyWithoutAdminNestedInput = {
    create?: XOR<ProductCreateWithoutAdminInput, ProductUncheckedCreateWithoutAdminInput> | ProductCreateWithoutAdminInput[] | ProductUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutAdminInput | ProductCreateOrConnectWithoutAdminInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutAdminInput | ProductUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: ProductCreateManyAdminInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutAdminInput | ProductUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutAdminInput | ProductUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type DonationLinkUncheckedUpdateManyWithoutAdminNestedInput = {
    create?: XOR<DonationLinkCreateWithoutAdminInput, DonationLinkUncheckedCreateWithoutAdminInput> | DonationLinkCreateWithoutAdminInput[] | DonationLinkUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: DonationLinkCreateOrConnectWithoutAdminInput | DonationLinkCreateOrConnectWithoutAdminInput[]
    upsert?: DonationLinkUpsertWithWhereUniqueWithoutAdminInput | DonationLinkUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: DonationLinkCreateManyAdminInputEnvelope
    set?: DonationLinkWhereUniqueInput | DonationLinkWhereUniqueInput[]
    disconnect?: DonationLinkWhereUniqueInput | DonationLinkWhereUniqueInput[]
    delete?: DonationLinkWhereUniqueInput | DonationLinkWhereUniqueInput[]
    connect?: DonationLinkWhereUniqueInput | DonationLinkWhereUniqueInput[]
    update?: DonationLinkUpdateWithWhereUniqueWithoutAdminInput | DonationLinkUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: DonationLinkUpdateManyWithWhereWithoutAdminInput | DonationLinkUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: DonationLinkScalarWhereInput | DonationLinkScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutAdminNestedInput = {
    create?: XOR<ProductCreateWithoutAdminInput, ProductUncheckedCreateWithoutAdminInput> | ProductCreateWithoutAdminInput[] | ProductUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutAdminInput | ProductCreateOrConnectWithoutAdminInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutAdminInput | ProductUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: ProductCreateManyAdminInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutAdminInput | ProductUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutAdminInput | ProductUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type AdminCreateNestedOneWithoutDonation_linksInput = {
    create?: XOR<AdminCreateWithoutDonation_linksInput, AdminUncheckedCreateWithoutDonation_linksInput>
    connectOrCreate?: AdminCreateOrConnectWithoutDonation_linksInput
    connect?: AdminWhereUniqueInput
  }

  export type EnumCurrencyCodeFieldUpdateOperationsInput = {
    set?: $Enums.CurrencyCode
  }

  export type AdminUpdateOneRequiredWithoutDonation_linksNestedInput = {
    create?: XOR<AdminCreateWithoutDonation_linksInput, AdminUncheckedCreateWithoutDonation_linksInput>
    connectOrCreate?: AdminCreateOrConnectWithoutDonation_linksInput
    upsert?: AdminUpsertWithoutDonation_linksInput
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutDonation_linksInput, AdminUpdateWithoutDonation_linksInput>, AdminUncheckedUpdateWithoutDonation_linksInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProductCreateNestedManyWithoutOwnerInput = {
    create?: XOR<ProductCreateWithoutOwnerInput, ProductUncheckedCreateWithoutOwnerInput> | ProductCreateWithoutOwnerInput[] | ProductUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutOwnerInput | ProductCreateOrConnectWithoutOwnerInput[]
    createMany?: ProductCreateManyOwnerInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<ProductCreateWithoutOwnerInput, ProductUncheckedCreateWithoutOwnerInput> | ProductCreateWithoutOwnerInput[] | ProductUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutOwnerInput | ProductCreateOrConnectWithoutOwnerInput[]
    createMany?: ProductCreateManyOwnerInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type ProductUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<ProductCreateWithoutOwnerInput, ProductUncheckedCreateWithoutOwnerInput> | ProductCreateWithoutOwnerInput[] | ProductUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutOwnerInput | ProductCreateOrConnectWithoutOwnerInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutOwnerInput | ProductUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: ProductCreateManyOwnerInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutOwnerInput | ProductUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutOwnerInput | ProductUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<ProductCreateWithoutOwnerInput, ProductUncheckedCreateWithoutOwnerInput> | ProductCreateWithoutOwnerInput[] | ProductUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutOwnerInput | ProductCreateOrConnectWithoutOwnerInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutOwnerInput | ProductUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: ProductCreateManyOwnerInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutOwnerInput | ProductUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutOwnerInput | ProductUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ProductCreateNestedManyWithoutLicenseInput = {
    create?: XOR<ProductCreateWithoutLicenseInput, ProductUncheckedCreateWithoutLicenseInput> | ProductCreateWithoutLicenseInput[] | ProductUncheckedCreateWithoutLicenseInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutLicenseInput | ProductCreateOrConnectWithoutLicenseInput[]
    createMany?: ProductCreateManyLicenseInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type LicenseTranslationCreateNestedManyWithoutLicenseInput = {
    create?: XOR<LicenseTranslationCreateWithoutLicenseInput, LicenseTranslationUncheckedCreateWithoutLicenseInput> | LicenseTranslationCreateWithoutLicenseInput[] | LicenseTranslationUncheckedCreateWithoutLicenseInput[]
    connectOrCreate?: LicenseTranslationCreateOrConnectWithoutLicenseInput | LicenseTranslationCreateOrConnectWithoutLicenseInput[]
    createMany?: LicenseTranslationCreateManyLicenseInputEnvelope
    connect?: LicenseTranslationWhereUniqueInput | LicenseTranslationWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutLicenseInput = {
    create?: XOR<ProductCreateWithoutLicenseInput, ProductUncheckedCreateWithoutLicenseInput> | ProductCreateWithoutLicenseInput[] | ProductUncheckedCreateWithoutLicenseInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutLicenseInput | ProductCreateOrConnectWithoutLicenseInput[]
    createMany?: ProductCreateManyLicenseInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type LicenseTranslationUncheckedCreateNestedManyWithoutLicenseInput = {
    create?: XOR<LicenseTranslationCreateWithoutLicenseInput, LicenseTranslationUncheckedCreateWithoutLicenseInput> | LicenseTranslationCreateWithoutLicenseInput[] | LicenseTranslationUncheckedCreateWithoutLicenseInput[]
    connectOrCreate?: LicenseTranslationCreateOrConnectWithoutLicenseInput | LicenseTranslationCreateOrConnectWithoutLicenseInput[]
    createMany?: LicenseTranslationCreateManyLicenseInputEnvelope
    connect?: LicenseTranslationWhereUniqueInput | LicenseTranslationWhereUniqueInput[]
  }

  export type ProductUpdateManyWithoutLicenseNestedInput = {
    create?: XOR<ProductCreateWithoutLicenseInput, ProductUncheckedCreateWithoutLicenseInput> | ProductCreateWithoutLicenseInput[] | ProductUncheckedCreateWithoutLicenseInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutLicenseInput | ProductCreateOrConnectWithoutLicenseInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutLicenseInput | ProductUpsertWithWhereUniqueWithoutLicenseInput[]
    createMany?: ProductCreateManyLicenseInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutLicenseInput | ProductUpdateWithWhereUniqueWithoutLicenseInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutLicenseInput | ProductUpdateManyWithWhereWithoutLicenseInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type LicenseTranslationUpdateManyWithoutLicenseNestedInput = {
    create?: XOR<LicenseTranslationCreateWithoutLicenseInput, LicenseTranslationUncheckedCreateWithoutLicenseInput> | LicenseTranslationCreateWithoutLicenseInput[] | LicenseTranslationUncheckedCreateWithoutLicenseInput[]
    connectOrCreate?: LicenseTranslationCreateOrConnectWithoutLicenseInput | LicenseTranslationCreateOrConnectWithoutLicenseInput[]
    upsert?: LicenseTranslationUpsertWithWhereUniqueWithoutLicenseInput | LicenseTranslationUpsertWithWhereUniqueWithoutLicenseInput[]
    createMany?: LicenseTranslationCreateManyLicenseInputEnvelope
    set?: LicenseTranslationWhereUniqueInput | LicenseTranslationWhereUniqueInput[]
    disconnect?: LicenseTranslationWhereUniqueInput | LicenseTranslationWhereUniqueInput[]
    delete?: LicenseTranslationWhereUniqueInput | LicenseTranslationWhereUniqueInput[]
    connect?: LicenseTranslationWhereUniqueInput | LicenseTranslationWhereUniqueInput[]
    update?: LicenseTranslationUpdateWithWhereUniqueWithoutLicenseInput | LicenseTranslationUpdateWithWhereUniqueWithoutLicenseInput[]
    updateMany?: LicenseTranslationUpdateManyWithWhereWithoutLicenseInput | LicenseTranslationUpdateManyWithWhereWithoutLicenseInput[]
    deleteMany?: LicenseTranslationScalarWhereInput | LicenseTranslationScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutLicenseNestedInput = {
    create?: XOR<ProductCreateWithoutLicenseInput, ProductUncheckedCreateWithoutLicenseInput> | ProductCreateWithoutLicenseInput[] | ProductUncheckedCreateWithoutLicenseInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutLicenseInput | ProductCreateOrConnectWithoutLicenseInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutLicenseInput | ProductUpsertWithWhereUniqueWithoutLicenseInput[]
    createMany?: ProductCreateManyLicenseInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutLicenseInput | ProductUpdateWithWhereUniqueWithoutLicenseInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutLicenseInput | ProductUpdateManyWithWhereWithoutLicenseInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type LicenseTranslationUncheckedUpdateManyWithoutLicenseNestedInput = {
    create?: XOR<LicenseTranslationCreateWithoutLicenseInput, LicenseTranslationUncheckedCreateWithoutLicenseInput> | LicenseTranslationCreateWithoutLicenseInput[] | LicenseTranslationUncheckedCreateWithoutLicenseInput[]
    connectOrCreate?: LicenseTranslationCreateOrConnectWithoutLicenseInput | LicenseTranslationCreateOrConnectWithoutLicenseInput[]
    upsert?: LicenseTranslationUpsertWithWhereUniqueWithoutLicenseInput | LicenseTranslationUpsertWithWhereUniqueWithoutLicenseInput[]
    createMany?: LicenseTranslationCreateManyLicenseInputEnvelope
    set?: LicenseTranslationWhereUniqueInput | LicenseTranslationWhereUniqueInput[]
    disconnect?: LicenseTranslationWhereUniqueInput | LicenseTranslationWhereUniqueInput[]
    delete?: LicenseTranslationWhereUniqueInput | LicenseTranslationWhereUniqueInput[]
    connect?: LicenseTranslationWhereUniqueInput | LicenseTranslationWhereUniqueInput[]
    update?: LicenseTranslationUpdateWithWhereUniqueWithoutLicenseInput | LicenseTranslationUpdateWithWhereUniqueWithoutLicenseInput[]
    updateMany?: LicenseTranslationUpdateManyWithWhereWithoutLicenseInput | LicenseTranslationUpdateManyWithWhereWithoutLicenseInput[]
    deleteMany?: LicenseTranslationScalarWhereInput | LicenseTranslationScalarWhereInput[]
  }

  export type LicenseCreateNestedOneWithoutTranslationsInput = {
    create?: XOR<LicenseCreateWithoutTranslationsInput, LicenseUncheckedCreateWithoutTranslationsInput>
    connectOrCreate?: LicenseCreateOrConnectWithoutTranslationsInput
    connect?: LicenseWhereUniqueInput
  }

  export type EnumLanguageFieldUpdateOperationsInput = {
    set?: $Enums.Language
  }

  export type LicenseUpdateOneRequiredWithoutTranslationsNestedInput = {
    create?: XOR<LicenseCreateWithoutTranslationsInput, LicenseUncheckedCreateWithoutTranslationsInput>
    connectOrCreate?: LicenseCreateOrConnectWithoutTranslationsInput
    upsert?: LicenseUpsertWithoutTranslationsInput
    connect?: LicenseWhereUniqueInput
    update?: XOR<XOR<LicenseUpdateToOneWithWhereWithoutTranslationsInput, LicenseUpdateWithoutTranslationsInput>, LicenseUncheckedUpdateWithoutTranslationsInput>
  }

  export type ProductCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput> | ProductCreateWithoutCategoryInput[] | ProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoryInput | ProductCreateOrConnectWithoutCategoryInput[]
    createMany?: ProductCreateManyCategoryInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput> | ProductCreateWithoutCategoryInput[] | ProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoryInput | ProductCreateOrConnectWithoutCategoryInput[]
    createMany?: ProductCreateManyCategoryInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ProductUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput> | ProductCreateWithoutCategoryInput[] | ProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoryInput | ProductCreateOrConnectWithoutCategoryInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutCategoryInput | ProductUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ProductCreateManyCategoryInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutCategoryInput | ProductUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutCategoryInput | ProductUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput> | ProductCreateWithoutCategoryInput[] | ProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoryInput | ProductCreateOrConnectWithoutCategoryInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutCategoryInput | ProductUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ProductCreateManyCategoryInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutCategoryInput | ProductUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutCategoryInput | ProductUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type AdminCreateNestedOneWithoutProductsInput = {
    create?: XOR<AdminCreateWithoutProductsInput, AdminUncheckedCreateWithoutProductsInput>
    connectOrCreate?: AdminCreateOrConnectWithoutProductsInput
    connect?: AdminWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutProductsInput = {
    create?: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutProductsInput
    connect?: CategoryWhereUniqueInput
  }

  export type OwnerCreateNestedOneWithoutProductsInput = {
    create?: XOR<OwnerCreateWithoutProductsInput, OwnerUncheckedCreateWithoutProductsInput>
    connectOrCreate?: OwnerCreateOrConnectWithoutProductsInput
    connect?: OwnerWhereUniqueInput
  }

  export type LicenseCreateNestedOneWithoutProductsInput = {
    create?: XOR<LicenseCreateWithoutProductsInput, LicenseUncheckedCreateWithoutProductsInput>
    connectOrCreate?: LicenseCreateOrConnectWithoutProductsInput
    connect?: LicenseWhereUniqueInput
  }

  export type ProductTranslationCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductTranslationCreateWithoutProductInput, ProductTranslationUncheckedCreateWithoutProductInput> | ProductTranslationCreateWithoutProductInput[] | ProductTranslationUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductTranslationCreateOrConnectWithoutProductInput | ProductTranslationCreateOrConnectWithoutProductInput[]
    createMany?: ProductTranslationCreateManyProductInputEnvelope
    connect?: ProductTranslationWhereUniqueInput | ProductTranslationWhereUniqueInput[]
  }

  export type ProductDiscountCreateNestedOneWithoutProductInput = {
    create?: XOR<ProductDiscountCreateWithoutProductInput, ProductDiscountUncheckedCreateWithoutProductInput>
    connectOrCreate?: ProductDiscountCreateOrConnectWithoutProductInput
    connect?: ProductDiscountWhereUniqueInput
  }

  export type ProductCouponCreateNestedOneWithoutProductInput = {
    create?: XOR<ProductCouponCreateWithoutProductInput, ProductCouponUncheckedCreateWithoutProductInput>
    connectOrCreate?: ProductCouponCreateOrConnectWithoutProductInput
    connect?: ProductCouponWhereUniqueInput
  }

  export type ProductImageCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductImageCreateWithoutProductInput, ProductImageUncheckedCreateWithoutProductInput> | ProductImageCreateWithoutProductInput[] | ProductImageUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductImageCreateOrConnectWithoutProductInput | ProductImageCreateOrConnectWithoutProductInput[]
    createMany?: ProductImageCreateManyProductInputEnvelope
    connect?: ProductImageWhereUniqueInput | ProductImageWhereUniqueInput[]
  }

  export type ProductVariantCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductVariantCreateWithoutProductInput, ProductVariantUncheckedCreateWithoutProductInput> | ProductVariantCreateWithoutProductInput[] | ProductVariantUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductVariantCreateOrConnectWithoutProductInput | ProductVariantCreateOrConnectWithoutProductInput[]
    createMany?: ProductVariantCreateManyProductInputEnvelope
    connect?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
  }

  export type ProductTranslationUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductTranslationCreateWithoutProductInput, ProductTranslationUncheckedCreateWithoutProductInput> | ProductTranslationCreateWithoutProductInput[] | ProductTranslationUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductTranslationCreateOrConnectWithoutProductInput | ProductTranslationCreateOrConnectWithoutProductInput[]
    createMany?: ProductTranslationCreateManyProductInputEnvelope
    connect?: ProductTranslationWhereUniqueInput | ProductTranslationWhereUniqueInput[]
  }

  export type ProductDiscountUncheckedCreateNestedOneWithoutProductInput = {
    create?: XOR<ProductDiscountCreateWithoutProductInput, ProductDiscountUncheckedCreateWithoutProductInput>
    connectOrCreate?: ProductDiscountCreateOrConnectWithoutProductInput
    connect?: ProductDiscountWhereUniqueInput
  }

  export type ProductCouponUncheckedCreateNestedOneWithoutProductInput = {
    create?: XOR<ProductCouponCreateWithoutProductInput, ProductCouponUncheckedCreateWithoutProductInput>
    connectOrCreate?: ProductCouponCreateOrConnectWithoutProductInput
    connect?: ProductCouponWhereUniqueInput
  }

  export type ProductImageUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductImageCreateWithoutProductInput, ProductImageUncheckedCreateWithoutProductInput> | ProductImageCreateWithoutProductInput[] | ProductImageUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductImageCreateOrConnectWithoutProductInput | ProductImageCreateOrConnectWithoutProductInput[]
    createMany?: ProductImageCreateManyProductInputEnvelope
    connect?: ProductImageWhereUniqueInput | ProductImageWhereUniqueInput[]
  }

  export type ProductVariantUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductVariantCreateWithoutProductInput, ProductVariantUncheckedCreateWithoutProductInput> | ProductVariantCreateWithoutProductInput[] | ProductVariantUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductVariantCreateOrConnectWithoutProductInput | ProductVariantCreateOrConnectWithoutProductInput[]
    createMany?: ProductVariantCreateManyProductInputEnvelope
    connect?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
  }

  export type EnumPriceTypeFieldUpdateOperationsInput = {
    set?: $Enums.PriceType
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type AdminUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<AdminCreateWithoutProductsInput, AdminUncheckedCreateWithoutProductsInput>
    connectOrCreate?: AdminCreateOrConnectWithoutProductsInput
    upsert?: AdminUpsertWithoutProductsInput
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutProductsInput, AdminUpdateWithoutProductsInput>, AdminUncheckedUpdateWithoutProductsInput>
  }

  export type CategoryUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutProductsInput
    upsert?: CategoryUpsertWithoutProductsInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutProductsInput, CategoryUpdateWithoutProductsInput>, CategoryUncheckedUpdateWithoutProductsInput>
  }

  export type OwnerUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<OwnerCreateWithoutProductsInput, OwnerUncheckedCreateWithoutProductsInput>
    connectOrCreate?: OwnerCreateOrConnectWithoutProductsInput
    upsert?: OwnerUpsertWithoutProductsInput
    connect?: OwnerWhereUniqueInput
    update?: XOR<XOR<OwnerUpdateToOneWithWhereWithoutProductsInput, OwnerUpdateWithoutProductsInput>, OwnerUncheckedUpdateWithoutProductsInput>
  }

  export type LicenseUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<LicenseCreateWithoutProductsInput, LicenseUncheckedCreateWithoutProductsInput>
    connectOrCreate?: LicenseCreateOrConnectWithoutProductsInput
    upsert?: LicenseUpsertWithoutProductsInput
    connect?: LicenseWhereUniqueInput
    update?: XOR<XOR<LicenseUpdateToOneWithWhereWithoutProductsInput, LicenseUpdateWithoutProductsInput>, LicenseUncheckedUpdateWithoutProductsInput>
  }

  export type ProductTranslationUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductTranslationCreateWithoutProductInput, ProductTranslationUncheckedCreateWithoutProductInput> | ProductTranslationCreateWithoutProductInput[] | ProductTranslationUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductTranslationCreateOrConnectWithoutProductInput | ProductTranslationCreateOrConnectWithoutProductInput[]
    upsert?: ProductTranslationUpsertWithWhereUniqueWithoutProductInput | ProductTranslationUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductTranslationCreateManyProductInputEnvelope
    set?: ProductTranslationWhereUniqueInput | ProductTranslationWhereUniqueInput[]
    disconnect?: ProductTranslationWhereUniqueInput | ProductTranslationWhereUniqueInput[]
    delete?: ProductTranslationWhereUniqueInput | ProductTranslationWhereUniqueInput[]
    connect?: ProductTranslationWhereUniqueInput | ProductTranslationWhereUniqueInput[]
    update?: ProductTranslationUpdateWithWhereUniqueWithoutProductInput | ProductTranslationUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductTranslationUpdateManyWithWhereWithoutProductInput | ProductTranslationUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductTranslationScalarWhereInput | ProductTranslationScalarWhereInput[]
  }

  export type ProductDiscountUpdateOneWithoutProductNestedInput = {
    create?: XOR<ProductDiscountCreateWithoutProductInput, ProductDiscountUncheckedCreateWithoutProductInput>
    connectOrCreate?: ProductDiscountCreateOrConnectWithoutProductInput
    upsert?: ProductDiscountUpsertWithoutProductInput
    disconnect?: ProductDiscountWhereInput | boolean
    delete?: ProductDiscountWhereInput | boolean
    connect?: ProductDiscountWhereUniqueInput
    update?: XOR<XOR<ProductDiscountUpdateToOneWithWhereWithoutProductInput, ProductDiscountUpdateWithoutProductInput>, ProductDiscountUncheckedUpdateWithoutProductInput>
  }

  export type ProductCouponUpdateOneWithoutProductNestedInput = {
    create?: XOR<ProductCouponCreateWithoutProductInput, ProductCouponUncheckedCreateWithoutProductInput>
    connectOrCreate?: ProductCouponCreateOrConnectWithoutProductInput
    upsert?: ProductCouponUpsertWithoutProductInput
    disconnect?: ProductCouponWhereInput | boolean
    delete?: ProductCouponWhereInput | boolean
    connect?: ProductCouponWhereUniqueInput
    update?: XOR<XOR<ProductCouponUpdateToOneWithWhereWithoutProductInput, ProductCouponUpdateWithoutProductInput>, ProductCouponUncheckedUpdateWithoutProductInput>
  }

  export type ProductImageUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductImageCreateWithoutProductInput, ProductImageUncheckedCreateWithoutProductInput> | ProductImageCreateWithoutProductInput[] | ProductImageUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductImageCreateOrConnectWithoutProductInput | ProductImageCreateOrConnectWithoutProductInput[]
    upsert?: ProductImageUpsertWithWhereUniqueWithoutProductInput | ProductImageUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductImageCreateManyProductInputEnvelope
    set?: ProductImageWhereUniqueInput | ProductImageWhereUniqueInput[]
    disconnect?: ProductImageWhereUniqueInput | ProductImageWhereUniqueInput[]
    delete?: ProductImageWhereUniqueInput | ProductImageWhereUniqueInput[]
    connect?: ProductImageWhereUniqueInput | ProductImageWhereUniqueInput[]
    update?: ProductImageUpdateWithWhereUniqueWithoutProductInput | ProductImageUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductImageUpdateManyWithWhereWithoutProductInput | ProductImageUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductImageScalarWhereInput | ProductImageScalarWhereInput[]
  }

  export type ProductVariantUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductVariantCreateWithoutProductInput, ProductVariantUncheckedCreateWithoutProductInput> | ProductVariantCreateWithoutProductInput[] | ProductVariantUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductVariantCreateOrConnectWithoutProductInput | ProductVariantCreateOrConnectWithoutProductInput[]
    upsert?: ProductVariantUpsertWithWhereUniqueWithoutProductInput | ProductVariantUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductVariantCreateManyProductInputEnvelope
    set?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    disconnect?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    delete?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    connect?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    update?: ProductVariantUpdateWithWhereUniqueWithoutProductInput | ProductVariantUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductVariantUpdateManyWithWhereWithoutProductInput | ProductVariantUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductVariantScalarWhereInput | ProductVariantScalarWhereInput[]
  }

  export type ProductTranslationUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductTranslationCreateWithoutProductInput, ProductTranslationUncheckedCreateWithoutProductInput> | ProductTranslationCreateWithoutProductInput[] | ProductTranslationUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductTranslationCreateOrConnectWithoutProductInput | ProductTranslationCreateOrConnectWithoutProductInput[]
    upsert?: ProductTranslationUpsertWithWhereUniqueWithoutProductInput | ProductTranslationUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductTranslationCreateManyProductInputEnvelope
    set?: ProductTranslationWhereUniqueInput | ProductTranslationWhereUniqueInput[]
    disconnect?: ProductTranslationWhereUniqueInput | ProductTranslationWhereUniqueInput[]
    delete?: ProductTranslationWhereUniqueInput | ProductTranslationWhereUniqueInput[]
    connect?: ProductTranslationWhereUniqueInput | ProductTranslationWhereUniqueInput[]
    update?: ProductTranslationUpdateWithWhereUniqueWithoutProductInput | ProductTranslationUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductTranslationUpdateManyWithWhereWithoutProductInput | ProductTranslationUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductTranslationScalarWhereInput | ProductTranslationScalarWhereInput[]
  }

  export type ProductDiscountUncheckedUpdateOneWithoutProductNestedInput = {
    create?: XOR<ProductDiscountCreateWithoutProductInput, ProductDiscountUncheckedCreateWithoutProductInput>
    connectOrCreate?: ProductDiscountCreateOrConnectWithoutProductInput
    upsert?: ProductDiscountUpsertWithoutProductInput
    disconnect?: ProductDiscountWhereInput | boolean
    delete?: ProductDiscountWhereInput | boolean
    connect?: ProductDiscountWhereUniqueInput
    update?: XOR<XOR<ProductDiscountUpdateToOneWithWhereWithoutProductInput, ProductDiscountUpdateWithoutProductInput>, ProductDiscountUncheckedUpdateWithoutProductInput>
  }

  export type ProductCouponUncheckedUpdateOneWithoutProductNestedInput = {
    create?: XOR<ProductCouponCreateWithoutProductInput, ProductCouponUncheckedCreateWithoutProductInput>
    connectOrCreate?: ProductCouponCreateOrConnectWithoutProductInput
    upsert?: ProductCouponUpsertWithoutProductInput
    disconnect?: ProductCouponWhereInput | boolean
    delete?: ProductCouponWhereInput | boolean
    connect?: ProductCouponWhereUniqueInput
    update?: XOR<XOR<ProductCouponUpdateToOneWithWhereWithoutProductInput, ProductCouponUpdateWithoutProductInput>, ProductCouponUncheckedUpdateWithoutProductInput>
  }

  export type ProductImageUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductImageCreateWithoutProductInput, ProductImageUncheckedCreateWithoutProductInput> | ProductImageCreateWithoutProductInput[] | ProductImageUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductImageCreateOrConnectWithoutProductInput | ProductImageCreateOrConnectWithoutProductInput[]
    upsert?: ProductImageUpsertWithWhereUniqueWithoutProductInput | ProductImageUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductImageCreateManyProductInputEnvelope
    set?: ProductImageWhereUniqueInput | ProductImageWhereUniqueInput[]
    disconnect?: ProductImageWhereUniqueInput | ProductImageWhereUniqueInput[]
    delete?: ProductImageWhereUniqueInput | ProductImageWhereUniqueInput[]
    connect?: ProductImageWhereUniqueInput | ProductImageWhereUniqueInput[]
    update?: ProductImageUpdateWithWhereUniqueWithoutProductInput | ProductImageUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductImageUpdateManyWithWhereWithoutProductInput | ProductImageUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductImageScalarWhereInput | ProductImageScalarWhereInput[]
  }

  export type ProductVariantUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductVariantCreateWithoutProductInput, ProductVariantUncheckedCreateWithoutProductInput> | ProductVariantCreateWithoutProductInput[] | ProductVariantUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductVariantCreateOrConnectWithoutProductInput | ProductVariantCreateOrConnectWithoutProductInput[]
    upsert?: ProductVariantUpsertWithWhereUniqueWithoutProductInput | ProductVariantUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductVariantCreateManyProductInputEnvelope
    set?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    disconnect?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    delete?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    connect?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    update?: ProductVariantUpdateWithWhereUniqueWithoutProductInput | ProductVariantUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductVariantUpdateManyWithWhereWithoutProductInput | ProductVariantUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductVariantScalarWhereInput | ProductVariantScalarWhereInput[]
  }

  export type ProductCreateNestedOneWithoutTranslationsInput = {
    create?: XOR<ProductCreateWithoutTranslationsInput, ProductUncheckedCreateWithoutTranslationsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutTranslationsInput
    connect?: ProductWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutTranslationsNestedInput = {
    create?: XOR<ProductCreateWithoutTranslationsInput, ProductUncheckedCreateWithoutTranslationsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutTranslationsInput
    upsert?: ProductUpsertWithoutTranslationsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutTranslationsInput, ProductUpdateWithoutTranslationsInput>, ProductUncheckedUpdateWithoutTranslationsInput>
  }

  export type ProductCreateNestedOneWithoutDiscountsInput = {
    create?: XOR<ProductCreateWithoutDiscountsInput, ProductUncheckedCreateWithoutDiscountsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutDiscountsInput
    connect?: ProductWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutDiscountsNestedInput = {
    create?: XOR<ProductCreateWithoutDiscountsInput, ProductUncheckedCreateWithoutDiscountsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutDiscountsInput
    upsert?: ProductUpsertWithoutDiscountsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutDiscountsInput, ProductUpdateWithoutDiscountsInput>, ProductUncheckedUpdateWithoutDiscountsInput>
  }

  export type ProductCreateNestedOneWithoutCouponsInput = {
    create?: XOR<ProductCreateWithoutCouponsInput, ProductUncheckedCreateWithoutCouponsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutCouponsInput
    connect?: ProductWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutCouponsNestedInput = {
    create?: XOR<ProductCreateWithoutCouponsInput, ProductUncheckedCreateWithoutCouponsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutCouponsInput
    upsert?: ProductUpsertWithoutCouponsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutCouponsInput, ProductUpdateWithoutCouponsInput>, ProductUncheckedUpdateWithoutCouponsInput>
  }

  export type ProductCreateNestedOneWithoutImagesInput = {
    create?: XOR<ProductCreateWithoutImagesInput, ProductUncheckedCreateWithoutImagesInput>
    connectOrCreate?: ProductCreateOrConnectWithoutImagesInput
    connect?: ProductWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutImagesNestedInput = {
    create?: XOR<ProductCreateWithoutImagesInput, ProductUncheckedCreateWithoutImagesInput>
    connectOrCreate?: ProductCreateOrConnectWithoutImagesInput
    upsert?: ProductUpsertWithoutImagesInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutImagesInput, ProductUpdateWithoutImagesInput>, ProductUncheckedUpdateWithoutImagesInput>
  }

  export type ProductCreateNestedOneWithoutVariantsInput = {
    create?: XOR<ProductCreateWithoutVariantsInput, ProductUncheckedCreateWithoutVariantsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutVariantsInput
    connect?: ProductWhereUniqueInput
  }

  export type ProductPriceCreateNestedManyWithoutVariantInput = {
    create?: XOR<ProductPriceCreateWithoutVariantInput, ProductPriceUncheckedCreateWithoutVariantInput> | ProductPriceCreateWithoutVariantInput[] | ProductPriceUncheckedCreateWithoutVariantInput[]
    connectOrCreate?: ProductPriceCreateOrConnectWithoutVariantInput | ProductPriceCreateOrConnectWithoutVariantInput[]
    createMany?: ProductPriceCreateManyVariantInputEnvelope
    connect?: ProductPriceWhereUniqueInput | ProductPriceWhereUniqueInput[]
  }

  export type ProductPriceUncheckedCreateNestedManyWithoutVariantInput = {
    create?: XOR<ProductPriceCreateWithoutVariantInput, ProductPriceUncheckedCreateWithoutVariantInput> | ProductPriceCreateWithoutVariantInput[] | ProductPriceUncheckedCreateWithoutVariantInput[]
    connectOrCreate?: ProductPriceCreateOrConnectWithoutVariantInput | ProductPriceCreateOrConnectWithoutVariantInput[]
    createMany?: ProductPriceCreateManyVariantInputEnvelope
    connect?: ProductPriceWhereUniqueInput | ProductPriceWhereUniqueInput[]
  }

  export type ProductUpdateOneRequiredWithoutVariantsNestedInput = {
    create?: XOR<ProductCreateWithoutVariantsInput, ProductUncheckedCreateWithoutVariantsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutVariantsInput
    upsert?: ProductUpsertWithoutVariantsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutVariantsInput, ProductUpdateWithoutVariantsInput>, ProductUncheckedUpdateWithoutVariantsInput>
  }

  export type ProductPriceUpdateManyWithoutVariantNestedInput = {
    create?: XOR<ProductPriceCreateWithoutVariantInput, ProductPriceUncheckedCreateWithoutVariantInput> | ProductPriceCreateWithoutVariantInput[] | ProductPriceUncheckedCreateWithoutVariantInput[]
    connectOrCreate?: ProductPriceCreateOrConnectWithoutVariantInput | ProductPriceCreateOrConnectWithoutVariantInput[]
    upsert?: ProductPriceUpsertWithWhereUniqueWithoutVariantInput | ProductPriceUpsertWithWhereUniqueWithoutVariantInput[]
    createMany?: ProductPriceCreateManyVariantInputEnvelope
    set?: ProductPriceWhereUniqueInput | ProductPriceWhereUniqueInput[]
    disconnect?: ProductPriceWhereUniqueInput | ProductPriceWhereUniqueInput[]
    delete?: ProductPriceWhereUniqueInput | ProductPriceWhereUniqueInput[]
    connect?: ProductPriceWhereUniqueInput | ProductPriceWhereUniqueInput[]
    update?: ProductPriceUpdateWithWhereUniqueWithoutVariantInput | ProductPriceUpdateWithWhereUniqueWithoutVariantInput[]
    updateMany?: ProductPriceUpdateManyWithWhereWithoutVariantInput | ProductPriceUpdateManyWithWhereWithoutVariantInput[]
    deleteMany?: ProductPriceScalarWhereInput | ProductPriceScalarWhereInput[]
  }

  export type ProductPriceUncheckedUpdateManyWithoutVariantNestedInput = {
    create?: XOR<ProductPriceCreateWithoutVariantInput, ProductPriceUncheckedCreateWithoutVariantInput> | ProductPriceCreateWithoutVariantInput[] | ProductPriceUncheckedCreateWithoutVariantInput[]
    connectOrCreate?: ProductPriceCreateOrConnectWithoutVariantInput | ProductPriceCreateOrConnectWithoutVariantInput[]
    upsert?: ProductPriceUpsertWithWhereUniqueWithoutVariantInput | ProductPriceUpsertWithWhereUniqueWithoutVariantInput[]
    createMany?: ProductPriceCreateManyVariantInputEnvelope
    set?: ProductPriceWhereUniqueInput | ProductPriceWhereUniqueInput[]
    disconnect?: ProductPriceWhereUniqueInput | ProductPriceWhereUniqueInput[]
    delete?: ProductPriceWhereUniqueInput | ProductPriceWhereUniqueInput[]
    connect?: ProductPriceWhereUniqueInput | ProductPriceWhereUniqueInput[]
    update?: ProductPriceUpdateWithWhereUniqueWithoutVariantInput | ProductPriceUpdateWithWhereUniqueWithoutVariantInput[]
    updateMany?: ProductPriceUpdateManyWithWhereWithoutVariantInput | ProductPriceUpdateManyWithWhereWithoutVariantInput[]
    deleteMany?: ProductPriceScalarWhereInput | ProductPriceScalarWhereInput[]
  }

  export type ProductVariantCreateNestedOneWithoutPricesInput = {
    create?: XOR<ProductVariantCreateWithoutPricesInput, ProductVariantUncheckedCreateWithoutPricesInput>
    connectOrCreate?: ProductVariantCreateOrConnectWithoutPricesInput
    connect?: ProductVariantWhereUniqueInput
  }

  export type ProductVariantUpdateOneRequiredWithoutPricesNestedInput = {
    create?: XOR<ProductVariantCreateWithoutPricesInput, ProductVariantUncheckedCreateWithoutPricesInput>
    connectOrCreate?: ProductVariantCreateOrConnectWithoutPricesInput
    upsert?: ProductVariantUpsertWithoutPricesInput
    connect?: ProductVariantWhereUniqueInput
    update?: XOR<XOR<ProductVariantUpdateToOneWithWhereWithoutPricesInput, ProductVariantUpdateWithoutPricesInput>, ProductVariantUncheckedUpdateWithoutPricesInput>
  }

  export type TermsOfServiceTranslationCreateNestedManyWithoutTerms_of_serviceInput = {
    create?: XOR<TermsOfServiceTranslationCreateWithoutTerms_of_serviceInput, TermsOfServiceTranslationUncheckedCreateWithoutTerms_of_serviceInput> | TermsOfServiceTranslationCreateWithoutTerms_of_serviceInput[] | TermsOfServiceTranslationUncheckedCreateWithoutTerms_of_serviceInput[]
    connectOrCreate?: TermsOfServiceTranslationCreateOrConnectWithoutTerms_of_serviceInput | TermsOfServiceTranslationCreateOrConnectWithoutTerms_of_serviceInput[]
    createMany?: TermsOfServiceTranslationCreateManyTerms_of_serviceInputEnvelope
    connect?: TermsOfServiceTranslationWhereUniqueInput | TermsOfServiceTranslationWhereUniqueInput[]
  }

  export type TermsOfServiceTranslationUncheckedCreateNestedManyWithoutTerms_of_serviceInput = {
    create?: XOR<TermsOfServiceTranslationCreateWithoutTerms_of_serviceInput, TermsOfServiceTranslationUncheckedCreateWithoutTerms_of_serviceInput> | TermsOfServiceTranslationCreateWithoutTerms_of_serviceInput[] | TermsOfServiceTranslationUncheckedCreateWithoutTerms_of_serviceInput[]
    connectOrCreate?: TermsOfServiceTranslationCreateOrConnectWithoutTerms_of_serviceInput | TermsOfServiceTranslationCreateOrConnectWithoutTerms_of_serviceInput[]
    createMany?: TermsOfServiceTranslationCreateManyTerms_of_serviceInputEnvelope
    connect?: TermsOfServiceTranslationWhereUniqueInput | TermsOfServiceTranslationWhereUniqueInput[]
  }

  export type TermsOfServiceTranslationUpdateManyWithoutTerms_of_serviceNestedInput = {
    create?: XOR<TermsOfServiceTranslationCreateWithoutTerms_of_serviceInput, TermsOfServiceTranslationUncheckedCreateWithoutTerms_of_serviceInput> | TermsOfServiceTranslationCreateWithoutTerms_of_serviceInput[] | TermsOfServiceTranslationUncheckedCreateWithoutTerms_of_serviceInput[]
    connectOrCreate?: TermsOfServiceTranslationCreateOrConnectWithoutTerms_of_serviceInput | TermsOfServiceTranslationCreateOrConnectWithoutTerms_of_serviceInput[]
    upsert?: TermsOfServiceTranslationUpsertWithWhereUniqueWithoutTerms_of_serviceInput | TermsOfServiceTranslationUpsertWithWhereUniqueWithoutTerms_of_serviceInput[]
    createMany?: TermsOfServiceTranslationCreateManyTerms_of_serviceInputEnvelope
    set?: TermsOfServiceTranslationWhereUniqueInput | TermsOfServiceTranslationWhereUniqueInput[]
    disconnect?: TermsOfServiceTranslationWhereUniqueInput | TermsOfServiceTranslationWhereUniqueInput[]
    delete?: TermsOfServiceTranslationWhereUniqueInput | TermsOfServiceTranslationWhereUniqueInput[]
    connect?: TermsOfServiceTranslationWhereUniqueInput | TermsOfServiceTranslationWhereUniqueInput[]
    update?: TermsOfServiceTranslationUpdateWithWhereUniqueWithoutTerms_of_serviceInput | TermsOfServiceTranslationUpdateWithWhereUniqueWithoutTerms_of_serviceInput[]
    updateMany?: TermsOfServiceTranslationUpdateManyWithWhereWithoutTerms_of_serviceInput | TermsOfServiceTranslationUpdateManyWithWhereWithoutTerms_of_serviceInput[]
    deleteMany?: TermsOfServiceTranslationScalarWhereInput | TermsOfServiceTranslationScalarWhereInput[]
  }

  export type TermsOfServiceTranslationUncheckedUpdateManyWithoutTerms_of_serviceNestedInput = {
    create?: XOR<TermsOfServiceTranslationCreateWithoutTerms_of_serviceInput, TermsOfServiceTranslationUncheckedCreateWithoutTerms_of_serviceInput> | TermsOfServiceTranslationCreateWithoutTerms_of_serviceInput[] | TermsOfServiceTranslationUncheckedCreateWithoutTerms_of_serviceInput[]
    connectOrCreate?: TermsOfServiceTranslationCreateOrConnectWithoutTerms_of_serviceInput | TermsOfServiceTranslationCreateOrConnectWithoutTerms_of_serviceInput[]
    upsert?: TermsOfServiceTranslationUpsertWithWhereUniqueWithoutTerms_of_serviceInput | TermsOfServiceTranslationUpsertWithWhereUniqueWithoutTerms_of_serviceInput[]
    createMany?: TermsOfServiceTranslationCreateManyTerms_of_serviceInputEnvelope
    set?: TermsOfServiceTranslationWhereUniqueInput | TermsOfServiceTranslationWhereUniqueInput[]
    disconnect?: TermsOfServiceTranslationWhereUniqueInput | TermsOfServiceTranslationWhereUniqueInput[]
    delete?: TermsOfServiceTranslationWhereUniqueInput | TermsOfServiceTranslationWhereUniqueInput[]
    connect?: TermsOfServiceTranslationWhereUniqueInput | TermsOfServiceTranslationWhereUniqueInput[]
    update?: TermsOfServiceTranslationUpdateWithWhereUniqueWithoutTerms_of_serviceInput | TermsOfServiceTranslationUpdateWithWhereUniqueWithoutTerms_of_serviceInput[]
    updateMany?: TermsOfServiceTranslationUpdateManyWithWhereWithoutTerms_of_serviceInput | TermsOfServiceTranslationUpdateManyWithWhereWithoutTerms_of_serviceInput[]
    deleteMany?: TermsOfServiceTranslationScalarWhereInput | TermsOfServiceTranslationScalarWhereInput[]
  }

  export type TermsOfServiceCreateNestedOneWithoutTranslationsInput = {
    create?: XOR<TermsOfServiceCreateWithoutTranslationsInput, TermsOfServiceUncheckedCreateWithoutTranslationsInput>
    connectOrCreate?: TermsOfServiceCreateOrConnectWithoutTranslationsInput
    connect?: TermsOfServiceWhereUniqueInput
  }

  export type TermsOfServiceUpdateOneRequiredWithoutTranslationsNestedInput = {
    create?: XOR<TermsOfServiceCreateWithoutTranslationsInput, TermsOfServiceUncheckedCreateWithoutTranslationsInput>
    connectOrCreate?: TermsOfServiceCreateOrConnectWithoutTranslationsInput
    upsert?: TermsOfServiceUpsertWithoutTranslationsInput
    connect?: TermsOfServiceWhereUniqueInput
    update?: XOR<XOR<TermsOfServiceUpdateToOneWithWhereWithoutTranslationsInput, TermsOfServiceUpdateWithoutTranslationsInput>, TermsOfServiceUncheckedUpdateWithoutTranslationsInput>
  }

  export type PrivacyPolicyTranslationCreateNestedManyWithoutPrivacy_policyInput = {
    create?: XOR<PrivacyPolicyTranslationCreateWithoutPrivacy_policyInput, PrivacyPolicyTranslationUncheckedCreateWithoutPrivacy_policyInput> | PrivacyPolicyTranslationCreateWithoutPrivacy_policyInput[] | PrivacyPolicyTranslationUncheckedCreateWithoutPrivacy_policyInput[]
    connectOrCreate?: PrivacyPolicyTranslationCreateOrConnectWithoutPrivacy_policyInput | PrivacyPolicyTranslationCreateOrConnectWithoutPrivacy_policyInput[]
    createMany?: PrivacyPolicyTranslationCreateManyPrivacy_policyInputEnvelope
    connect?: PrivacyPolicyTranslationWhereUniqueInput | PrivacyPolicyTranslationWhereUniqueInput[]
  }

  export type PrivacyPolicyTranslationUncheckedCreateNestedManyWithoutPrivacy_policyInput = {
    create?: XOR<PrivacyPolicyTranslationCreateWithoutPrivacy_policyInput, PrivacyPolicyTranslationUncheckedCreateWithoutPrivacy_policyInput> | PrivacyPolicyTranslationCreateWithoutPrivacy_policyInput[] | PrivacyPolicyTranslationUncheckedCreateWithoutPrivacy_policyInput[]
    connectOrCreate?: PrivacyPolicyTranslationCreateOrConnectWithoutPrivacy_policyInput | PrivacyPolicyTranslationCreateOrConnectWithoutPrivacy_policyInput[]
    createMany?: PrivacyPolicyTranslationCreateManyPrivacy_policyInputEnvelope
    connect?: PrivacyPolicyTranslationWhereUniqueInput | PrivacyPolicyTranslationWhereUniqueInput[]
  }

  export type PrivacyPolicyTranslationUpdateManyWithoutPrivacy_policyNestedInput = {
    create?: XOR<PrivacyPolicyTranslationCreateWithoutPrivacy_policyInput, PrivacyPolicyTranslationUncheckedCreateWithoutPrivacy_policyInput> | PrivacyPolicyTranslationCreateWithoutPrivacy_policyInput[] | PrivacyPolicyTranslationUncheckedCreateWithoutPrivacy_policyInput[]
    connectOrCreate?: PrivacyPolicyTranslationCreateOrConnectWithoutPrivacy_policyInput | PrivacyPolicyTranslationCreateOrConnectWithoutPrivacy_policyInput[]
    upsert?: PrivacyPolicyTranslationUpsertWithWhereUniqueWithoutPrivacy_policyInput | PrivacyPolicyTranslationUpsertWithWhereUniqueWithoutPrivacy_policyInput[]
    createMany?: PrivacyPolicyTranslationCreateManyPrivacy_policyInputEnvelope
    set?: PrivacyPolicyTranslationWhereUniqueInput | PrivacyPolicyTranslationWhereUniqueInput[]
    disconnect?: PrivacyPolicyTranslationWhereUniqueInput | PrivacyPolicyTranslationWhereUniqueInput[]
    delete?: PrivacyPolicyTranslationWhereUniqueInput | PrivacyPolicyTranslationWhereUniqueInput[]
    connect?: PrivacyPolicyTranslationWhereUniqueInput | PrivacyPolicyTranslationWhereUniqueInput[]
    update?: PrivacyPolicyTranslationUpdateWithWhereUniqueWithoutPrivacy_policyInput | PrivacyPolicyTranslationUpdateWithWhereUniqueWithoutPrivacy_policyInput[]
    updateMany?: PrivacyPolicyTranslationUpdateManyWithWhereWithoutPrivacy_policyInput | PrivacyPolicyTranslationUpdateManyWithWhereWithoutPrivacy_policyInput[]
    deleteMany?: PrivacyPolicyTranslationScalarWhereInput | PrivacyPolicyTranslationScalarWhereInput[]
  }

  export type PrivacyPolicyTranslationUncheckedUpdateManyWithoutPrivacy_policyNestedInput = {
    create?: XOR<PrivacyPolicyTranslationCreateWithoutPrivacy_policyInput, PrivacyPolicyTranslationUncheckedCreateWithoutPrivacy_policyInput> | PrivacyPolicyTranslationCreateWithoutPrivacy_policyInput[] | PrivacyPolicyTranslationUncheckedCreateWithoutPrivacy_policyInput[]
    connectOrCreate?: PrivacyPolicyTranslationCreateOrConnectWithoutPrivacy_policyInput | PrivacyPolicyTranslationCreateOrConnectWithoutPrivacy_policyInput[]
    upsert?: PrivacyPolicyTranslationUpsertWithWhereUniqueWithoutPrivacy_policyInput | PrivacyPolicyTranslationUpsertWithWhereUniqueWithoutPrivacy_policyInput[]
    createMany?: PrivacyPolicyTranslationCreateManyPrivacy_policyInputEnvelope
    set?: PrivacyPolicyTranslationWhereUniqueInput | PrivacyPolicyTranslationWhereUniqueInput[]
    disconnect?: PrivacyPolicyTranslationWhereUniqueInput | PrivacyPolicyTranslationWhereUniqueInput[]
    delete?: PrivacyPolicyTranslationWhereUniqueInput | PrivacyPolicyTranslationWhereUniqueInput[]
    connect?: PrivacyPolicyTranslationWhereUniqueInput | PrivacyPolicyTranslationWhereUniqueInput[]
    update?: PrivacyPolicyTranslationUpdateWithWhereUniqueWithoutPrivacy_policyInput | PrivacyPolicyTranslationUpdateWithWhereUniqueWithoutPrivacy_policyInput[]
    updateMany?: PrivacyPolicyTranslationUpdateManyWithWhereWithoutPrivacy_policyInput | PrivacyPolicyTranslationUpdateManyWithWhereWithoutPrivacy_policyInput[]
    deleteMany?: PrivacyPolicyTranslationScalarWhereInput | PrivacyPolicyTranslationScalarWhereInput[]
  }

  export type PrivacyPolicyCreateNestedOneWithoutTranslationsInput = {
    create?: XOR<PrivacyPolicyCreateWithoutTranslationsInput, PrivacyPolicyUncheckedCreateWithoutTranslationsInput>
    connectOrCreate?: PrivacyPolicyCreateOrConnectWithoutTranslationsInput
    connect?: PrivacyPolicyWhereUniqueInput
  }

  export type PrivacyPolicyUpdateOneRequiredWithoutTranslationsNestedInput = {
    create?: XOR<PrivacyPolicyCreateWithoutTranslationsInput, PrivacyPolicyUncheckedCreateWithoutTranslationsInput>
    connectOrCreate?: PrivacyPolicyCreateOrConnectWithoutTranslationsInput
    upsert?: PrivacyPolicyUpsertWithoutTranslationsInput
    connect?: PrivacyPolicyWhereUniqueInput
    update?: XOR<XOR<PrivacyPolicyUpdateToOneWithWhereWithoutTranslationsInput, PrivacyPolicyUpdateWithoutTranslationsInput>, PrivacyPolicyUncheckedUpdateWithoutTranslationsInput>
  }

  export type AboutUsTranslationCreateNestedManyWithoutAbout_usInput = {
    create?: XOR<AboutUsTranslationCreateWithoutAbout_usInput, AboutUsTranslationUncheckedCreateWithoutAbout_usInput> | AboutUsTranslationCreateWithoutAbout_usInput[] | AboutUsTranslationUncheckedCreateWithoutAbout_usInput[]
    connectOrCreate?: AboutUsTranslationCreateOrConnectWithoutAbout_usInput | AboutUsTranslationCreateOrConnectWithoutAbout_usInput[]
    createMany?: AboutUsTranslationCreateManyAbout_usInputEnvelope
    connect?: AboutUsTranslationWhereUniqueInput | AboutUsTranslationWhereUniqueInput[]
  }

  export type AboutUsTranslationUncheckedCreateNestedManyWithoutAbout_usInput = {
    create?: XOR<AboutUsTranslationCreateWithoutAbout_usInput, AboutUsTranslationUncheckedCreateWithoutAbout_usInput> | AboutUsTranslationCreateWithoutAbout_usInput[] | AboutUsTranslationUncheckedCreateWithoutAbout_usInput[]
    connectOrCreate?: AboutUsTranslationCreateOrConnectWithoutAbout_usInput | AboutUsTranslationCreateOrConnectWithoutAbout_usInput[]
    createMany?: AboutUsTranslationCreateManyAbout_usInputEnvelope
    connect?: AboutUsTranslationWhereUniqueInput | AboutUsTranslationWhereUniqueInput[]
  }

  export type AboutUsTranslationUpdateManyWithoutAbout_usNestedInput = {
    create?: XOR<AboutUsTranslationCreateWithoutAbout_usInput, AboutUsTranslationUncheckedCreateWithoutAbout_usInput> | AboutUsTranslationCreateWithoutAbout_usInput[] | AboutUsTranslationUncheckedCreateWithoutAbout_usInput[]
    connectOrCreate?: AboutUsTranslationCreateOrConnectWithoutAbout_usInput | AboutUsTranslationCreateOrConnectWithoutAbout_usInput[]
    upsert?: AboutUsTranslationUpsertWithWhereUniqueWithoutAbout_usInput | AboutUsTranslationUpsertWithWhereUniqueWithoutAbout_usInput[]
    createMany?: AboutUsTranslationCreateManyAbout_usInputEnvelope
    set?: AboutUsTranslationWhereUniqueInput | AboutUsTranslationWhereUniqueInput[]
    disconnect?: AboutUsTranslationWhereUniqueInput | AboutUsTranslationWhereUniqueInput[]
    delete?: AboutUsTranslationWhereUniqueInput | AboutUsTranslationWhereUniqueInput[]
    connect?: AboutUsTranslationWhereUniqueInput | AboutUsTranslationWhereUniqueInput[]
    update?: AboutUsTranslationUpdateWithWhereUniqueWithoutAbout_usInput | AboutUsTranslationUpdateWithWhereUniqueWithoutAbout_usInput[]
    updateMany?: AboutUsTranslationUpdateManyWithWhereWithoutAbout_usInput | AboutUsTranslationUpdateManyWithWhereWithoutAbout_usInput[]
    deleteMany?: AboutUsTranslationScalarWhereInput | AboutUsTranslationScalarWhereInput[]
  }

  export type AboutUsTranslationUncheckedUpdateManyWithoutAbout_usNestedInput = {
    create?: XOR<AboutUsTranslationCreateWithoutAbout_usInput, AboutUsTranslationUncheckedCreateWithoutAbout_usInput> | AboutUsTranslationCreateWithoutAbout_usInput[] | AboutUsTranslationUncheckedCreateWithoutAbout_usInput[]
    connectOrCreate?: AboutUsTranslationCreateOrConnectWithoutAbout_usInput | AboutUsTranslationCreateOrConnectWithoutAbout_usInput[]
    upsert?: AboutUsTranslationUpsertWithWhereUniqueWithoutAbout_usInput | AboutUsTranslationUpsertWithWhereUniqueWithoutAbout_usInput[]
    createMany?: AboutUsTranslationCreateManyAbout_usInputEnvelope
    set?: AboutUsTranslationWhereUniqueInput | AboutUsTranslationWhereUniqueInput[]
    disconnect?: AboutUsTranslationWhereUniqueInput | AboutUsTranslationWhereUniqueInput[]
    delete?: AboutUsTranslationWhereUniqueInput | AboutUsTranslationWhereUniqueInput[]
    connect?: AboutUsTranslationWhereUniqueInput | AboutUsTranslationWhereUniqueInput[]
    update?: AboutUsTranslationUpdateWithWhereUniqueWithoutAbout_usInput | AboutUsTranslationUpdateWithWhereUniqueWithoutAbout_usInput[]
    updateMany?: AboutUsTranslationUpdateManyWithWhereWithoutAbout_usInput | AboutUsTranslationUpdateManyWithWhereWithoutAbout_usInput[]
    deleteMany?: AboutUsTranslationScalarWhereInput | AboutUsTranslationScalarWhereInput[]
  }

  export type AboutUsCreateNestedOneWithoutTranslationsInput = {
    create?: XOR<AboutUsCreateWithoutTranslationsInput, AboutUsUncheckedCreateWithoutTranslationsInput>
    connectOrCreate?: AboutUsCreateOrConnectWithoutTranslationsInput
    connect?: AboutUsWhereUniqueInput
  }

  export type AboutUsUpdateOneRequiredWithoutTranslationsNestedInput = {
    create?: XOR<AboutUsCreateWithoutTranslationsInput, AboutUsUncheckedCreateWithoutTranslationsInput>
    connectOrCreate?: AboutUsCreateOrConnectWithoutTranslationsInput
    upsert?: AboutUsUpsertWithoutTranslationsInput
    connect?: AboutUsWhereUniqueInput
    update?: XOR<XOR<AboutUsUpdateToOneWithWhereWithoutTranslationsInput, AboutUsUpdateWithoutTranslationsInput>, AboutUsUncheckedUpdateWithoutTranslationsInput>
  }

  export type FaqTranslationCreateNestedManyWithoutFaqInput = {
    create?: XOR<FaqTranslationCreateWithoutFaqInput, FaqTranslationUncheckedCreateWithoutFaqInput> | FaqTranslationCreateWithoutFaqInput[] | FaqTranslationUncheckedCreateWithoutFaqInput[]
    connectOrCreate?: FaqTranslationCreateOrConnectWithoutFaqInput | FaqTranslationCreateOrConnectWithoutFaqInput[]
    createMany?: FaqTranslationCreateManyFaqInputEnvelope
    connect?: FaqTranslationWhereUniqueInput | FaqTranslationWhereUniqueInput[]
  }

  export type FaqTranslationUncheckedCreateNestedManyWithoutFaqInput = {
    create?: XOR<FaqTranslationCreateWithoutFaqInput, FaqTranslationUncheckedCreateWithoutFaqInput> | FaqTranslationCreateWithoutFaqInput[] | FaqTranslationUncheckedCreateWithoutFaqInput[]
    connectOrCreate?: FaqTranslationCreateOrConnectWithoutFaqInput | FaqTranslationCreateOrConnectWithoutFaqInput[]
    createMany?: FaqTranslationCreateManyFaqInputEnvelope
    connect?: FaqTranslationWhereUniqueInput | FaqTranslationWhereUniqueInput[]
  }

  export type FaqTranslationUpdateManyWithoutFaqNestedInput = {
    create?: XOR<FaqTranslationCreateWithoutFaqInput, FaqTranslationUncheckedCreateWithoutFaqInput> | FaqTranslationCreateWithoutFaqInput[] | FaqTranslationUncheckedCreateWithoutFaqInput[]
    connectOrCreate?: FaqTranslationCreateOrConnectWithoutFaqInput | FaqTranslationCreateOrConnectWithoutFaqInput[]
    upsert?: FaqTranslationUpsertWithWhereUniqueWithoutFaqInput | FaqTranslationUpsertWithWhereUniqueWithoutFaqInput[]
    createMany?: FaqTranslationCreateManyFaqInputEnvelope
    set?: FaqTranslationWhereUniqueInput | FaqTranslationWhereUniqueInput[]
    disconnect?: FaqTranslationWhereUniqueInput | FaqTranslationWhereUniqueInput[]
    delete?: FaqTranslationWhereUniqueInput | FaqTranslationWhereUniqueInput[]
    connect?: FaqTranslationWhereUniqueInput | FaqTranslationWhereUniqueInput[]
    update?: FaqTranslationUpdateWithWhereUniqueWithoutFaqInput | FaqTranslationUpdateWithWhereUniqueWithoutFaqInput[]
    updateMany?: FaqTranslationUpdateManyWithWhereWithoutFaqInput | FaqTranslationUpdateManyWithWhereWithoutFaqInput[]
    deleteMany?: FaqTranslationScalarWhereInput | FaqTranslationScalarWhereInput[]
  }

  export type FaqTranslationUncheckedUpdateManyWithoutFaqNestedInput = {
    create?: XOR<FaqTranslationCreateWithoutFaqInput, FaqTranslationUncheckedCreateWithoutFaqInput> | FaqTranslationCreateWithoutFaqInput[] | FaqTranslationUncheckedCreateWithoutFaqInput[]
    connectOrCreate?: FaqTranslationCreateOrConnectWithoutFaqInput | FaqTranslationCreateOrConnectWithoutFaqInput[]
    upsert?: FaqTranslationUpsertWithWhereUniqueWithoutFaqInput | FaqTranslationUpsertWithWhereUniqueWithoutFaqInput[]
    createMany?: FaqTranslationCreateManyFaqInputEnvelope
    set?: FaqTranslationWhereUniqueInput | FaqTranslationWhereUniqueInput[]
    disconnect?: FaqTranslationWhereUniqueInput | FaqTranslationWhereUniqueInput[]
    delete?: FaqTranslationWhereUniqueInput | FaqTranslationWhereUniqueInput[]
    connect?: FaqTranslationWhereUniqueInput | FaqTranslationWhereUniqueInput[]
    update?: FaqTranslationUpdateWithWhereUniqueWithoutFaqInput | FaqTranslationUpdateWithWhereUniqueWithoutFaqInput[]
    updateMany?: FaqTranslationUpdateManyWithWhereWithoutFaqInput | FaqTranslationUpdateManyWithWhereWithoutFaqInput[]
    deleteMany?: FaqTranslationScalarWhereInput | FaqTranslationScalarWhereInput[]
  }

  export type FaqCreateNestedOneWithoutTranslationsInput = {
    create?: XOR<FaqCreateWithoutTranslationsInput, FaqUncheckedCreateWithoutTranslationsInput>
    connectOrCreate?: FaqCreateOrConnectWithoutTranslationsInput
    connect?: FaqWhereUniqueInput
  }

  export type FaqUpdateOneRequiredWithoutTranslationsNestedInput = {
    create?: XOR<FaqCreateWithoutTranslationsInput, FaqUncheckedCreateWithoutTranslationsInput>
    connectOrCreate?: FaqCreateOrConnectWithoutTranslationsInput
    upsert?: FaqUpsertWithoutTranslationsInput
    connect?: FaqWhereUniqueInput
    update?: XOR<XOR<FaqUpdateToOneWithWhereWithoutTranslationsInput, FaqUpdateWithoutTranslationsInput>, FaqUncheckedUpdateWithoutTranslationsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumCurrencyCodeFilter<$PrismaModel = never> = {
    equals?: $Enums.CurrencyCode | EnumCurrencyCodeFieldRefInput<$PrismaModel>
    in?: $Enums.CurrencyCode[] | ListEnumCurrencyCodeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CurrencyCode[] | ListEnumCurrencyCodeFieldRefInput<$PrismaModel>
    not?: NestedEnumCurrencyCodeFilter<$PrismaModel> | $Enums.CurrencyCode
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumCurrencyCodeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CurrencyCode | EnumCurrencyCodeFieldRefInput<$PrismaModel>
    in?: $Enums.CurrencyCode[] | ListEnumCurrencyCodeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CurrencyCode[] | ListEnumCurrencyCodeFieldRefInput<$PrismaModel>
    not?: NestedEnumCurrencyCodeWithAggregatesFilter<$PrismaModel> | $Enums.CurrencyCode
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCurrencyCodeFilter<$PrismaModel>
    _max?: NestedEnumCurrencyCodeFilter<$PrismaModel>
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumLanguageFilter<$PrismaModel = never> = {
    equals?: $Enums.Language | EnumLanguageFieldRefInput<$PrismaModel>
    in?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    notIn?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    not?: NestedEnumLanguageFilter<$PrismaModel> | $Enums.Language
  }

  export type NestedEnumLanguageWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Language | EnumLanguageFieldRefInput<$PrismaModel>
    in?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    notIn?: $Enums.Language[] | ListEnumLanguageFieldRefInput<$PrismaModel>
    not?: NestedEnumLanguageWithAggregatesFilter<$PrismaModel> | $Enums.Language
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLanguageFilter<$PrismaModel>
    _max?: NestedEnumLanguageFilter<$PrismaModel>
  }

  export type NestedUuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type NestedEnumPriceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PriceType | EnumPriceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PriceType[] | ListEnumPriceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PriceType[] | ListEnumPriceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPriceTypeFilter<$PrismaModel> | $Enums.PriceType
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedUuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumPriceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PriceType | EnumPriceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PriceType[] | ListEnumPriceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PriceType[] | ListEnumPriceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPriceTypeWithAggregatesFilter<$PrismaModel> | $Enums.PriceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPriceTypeFilter<$PrismaModel>
    _max?: NestedEnumPriceTypeFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DonationLinkCreateWithoutAdminInput = {
    currency_code: $Enums.CurrencyCode
    link: string
  }

  export type DonationLinkUncheckedCreateWithoutAdminInput = {
    id?: number
    currency_code: $Enums.CurrencyCode
    link: string
  }

  export type DonationLinkCreateOrConnectWithoutAdminInput = {
    where: DonationLinkWhereUniqueInput
    create: XOR<DonationLinkCreateWithoutAdminInput, DonationLinkUncheckedCreateWithoutAdminInput>
  }

  export type DonationLinkCreateManyAdminInputEnvelope = {
    data: DonationLinkCreateManyAdminInput | DonationLinkCreateManyAdminInput[]
    skipDuplicates?: boolean
  }

  export type ProductCreateWithoutAdminInput = {
    id?: string
    name: string
    slug: string
    price_type: $Enums.PriceType
    download_link?: string | null
    is_published?: boolean
    is_pinned?: boolean
    created_at: bigint | number
    released_at: bigint | number
    updated_at: bigint | number
    category: CategoryCreateNestedOneWithoutProductsInput
    owner: OwnerCreateNestedOneWithoutProductsInput
    license: LicenseCreateNestedOneWithoutProductsInput
    translations?: ProductTranslationCreateNestedManyWithoutProductInput
    discounts?: ProductDiscountCreateNestedOneWithoutProductInput
    coupons?: ProductCouponCreateNestedOneWithoutProductInput
    images?: ProductImageCreateNestedManyWithoutProductInput
    variants?: ProductVariantCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutAdminInput = {
    id?: string
    category_id: number
    owner_id: number
    license_id: number
    name: string
    slug: string
    price_type: $Enums.PriceType
    download_link?: string | null
    is_published?: boolean
    is_pinned?: boolean
    created_at: bigint | number
    released_at: bigint | number
    updated_at: bigint | number
    translations?: ProductTranslationUncheckedCreateNestedManyWithoutProductInput
    discounts?: ProductDiscountUncheckedCreateNestedOneWithoutProductInput
    coupons?: ProductCouponUncheckedCreateNestedOneWithoutProductInput
    images?: ProductImageUncheckedCreateNestedManyWithoutProductInput
    variants?: ProductVariantUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutAdminInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutAdminInput, ProductUncheckedCreateWithoutAdminInput>
  }

  export type ProductCreateManyAdminInputEnvelope = {
    data: ProductCreateManyAdminInput | ProductCreateManyAdminInput[]
    skipDuplicates?: boolean
  }

  export type DonationLinkUpsertWithWhereUniqueWithoutAdminInput = {
    where: DonationLinkWhereUniqueInput
    update: XOR<DonationLinkUpdateWithoutAdminInput, DonationLinkUncheckedUpdateWithoutAdminInput>
    create: XOR<DonationLinkCreateWithoutAdminInput, DonationLinkUncheckedCreateWithoutAdminInput>
  }

  export type DonationLinkUpdateWithWhereUniqueWithoutAdminInput = {
    where: DonationLinkWhereUniqueInput
    data: XOR<DonationLinkUpdateWithoutAdminInput, DonationLinkUncheckedUpdateWithoutAdminInput>
  }

  export type DonationLinkUpdateManyWithWhereWithoutAdminInput = {
    where: DonationLinkScalarWhereInput
    data: XOR<DonationLinkUpdateManyMutationInput, DonationLinkUncheckedUpdateManyWithoutAdminInput>
  }

  export type DonationLinkScalarWhereInput = {
    AND?: DonationLinkScalarWhereInput | DonationLinkScalarWhereInput[]
    OR?: DonationLinkScalarWhereInput[]
    NOT?: DonationLinkScalarWhereInput | DonationLinkScalarWhereInput[]
    id?: IntFilter<"DonationLink"> | number
    admin_id?: StringFilter<"DonationLink"> | string
    currency_code?: EnumCurrencyCodeFilter<"DonationLink"> | $Enums.CurrencyCode
    link?: StringFilter<"DonationLink"> | string
  }

  export type ProductUpsertWithWhereUniqueWithoutAdminInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutAdminInput, ProductUncheckedUpdateWithoutAdminInput>
    create: XOR<ProductCreateWithoutAdminInput, ProductUncheckedCreateWithoutAdminInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutAdminInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutAdminInput, ProductUncheckedUpdateWithoutAdminInput>
  }

  export type ProductUpdateManyWithWhereWithoutAdminInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutAdminInput>
  }

  export type ProductScalarWhereInput = {
    AND?: ProductScalarWhereInput | ProductScalarWhereInput[]
    OR?: ProductScalarWhereInput[]
    NOT?: ProductScalarWhereInput | ProductScalarWhereInput[]
    id?: UuidFilter<"Product"> | string
    category_id?: IntFilter<"Product"> | number
    admin_id?: StringFilter<"Product"> | string
    owner_id?: IntFilter<"Product"> | number
    license_id?: IntFilter<"Product"> | number
    name?: StringFilter<"Product"> | string
    slug?: StringFilter<"Product"> | string
    price_type?: EnumPriceTypeFilter<"Product"> | $Enums.PriceType
    download_link?: StringNullableFilter<"Product"> | string | null
    is_published?: BoolFilter<"Product"> | boolean
    is_pinned?: BoolFilter<"Product"> | boolean
    created_at?: BigIntFilter<"Product"> | bigint | number
    released_at?: BigIntFilter<"Product"> | bigint | number
    updated_at?: BigIntFilter<"Product"> | bigint | number
  }

  export type AdminCreateWithoutDonation_linksInput = {
    id: string
    first_name: string
    last_name: string
    email: string
    whatsapp_phone_number: string
    picture: string
    products?: ProductCreateNestedManyWithoutAdminInput
  }

  export type AdminUncheckedCreateWithoutDonation_linksInput = {
    id: string
    first_name: string
    last_name: string
    email: string
    whatsapp_phone_number: string
    picture: string
    products?: ProductUncheckedCreateNestedManyWithoutAdminInput
  }

  export type AdminCreateOrConnectWithoutDonation_linksInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutDonation_linksInput, AdminUncheckedCreateWithoutDonation_linksInput>
  }

  export type AdminUpsertWithoutDonation_linksInput = {
    update: XOR<AdminUpdateWithoutDonation_linksInput, AdminUncheckedUpdateWithoutDonation_linksInput>
    create: XOR<AdminCreateWithoutDonation_linksInput, AdminUncheckedCreateWithoutDonation_linksInput>
    where?: AdminWhereInput
  }

  export type AdminUpdateToOneWithWhereWithoutDonation_linksInput = {
    where?: AdminWhereInput
    data: XOR<AdminUpdateWithoutDonation_linksInput, AdminUncheckedUpdateWithoutDonation_linksInput>
  }

  export type AdminUpdateWithoutDonation_linksInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    whatsapp_phone_number?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    products?: ProductUpdateManyWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateWithoutDonation_linksInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    whatsapp_phone_number?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    products?: ProductUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type ProductCreateWithoutOwnerInput = {
    id?: string
    name: string
    slug: string
    price_type: $Enums.PriceType
    download_link?: string | null
    is_published?: boolean
    is_pinned?: boolean
    created_at: bigint | number
    released_at: bigint | number
    updated_at: bigint | number
    admin: AdminCreateNestedOneWithoutProductsInput
    category: CategoryCreateNestedOneWithoutProductsInput
    license: LicenseCreateNestedOneWithoutProductsInput
    translations?: ProductTranslationCreateNestedManyWithoutProductInput
    discounts?: ProductDiscountCreateNestedOneWithoutProductInput
    coupons?: ProductCouponCreateNestedOneWithoutProductInput
    images?: ProductImageCreateNestedManyWithoutProductInput
    variants?: ProductVariantCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutOwnerInput = {
    id?: string
    category_id: number
    admin_id: string
    license_id: number
    name: string
    slug: string
    price_type: $Enums.PriceType
    download_link?: string | null
    is_published?: boolean
    is_pinned?: boolean
    created_at: bigint | number
    released_at: bigint | number
    updated_at: bigint | number
    translations?: ProductTranslationUncheckedCreateNestedManyWithoutProductInput
    discounts?: ProductDiscountUncheckedCreateNestedOneWithoutProductInput
    coupons?: ProductCouponUncheckedCreateNestedOneWithoutProductInput
    images?: ProductImageUncheckedCreateNestedManyWithoutProductInput
    variants?: ProductVariantUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutOwnerInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutOwnerInput, ProductUncheckedCreateWithoutOwnerInput>
  }

  export type ProductCreateManyOwnerInputEnvelope = {
    data: ProductCreateManyOwnerInput | ProductCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type ProductUpsertWithWhereUniqueWithoutOwnerInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutOwnerInput, ProductUncheckedUpdateWithoutOwnerInput>
    create: XOR<ProductCreateWithoutOwnerInput, ProductUncheckedCreateWithoutOwnerInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutOwnerInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutOwnerInput, ProductUncheckedUpdateWithoutOwnerInput>
  }

  export type ProductUpdateManyWithWhereWithoutOwnerInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutOwnerInput>
  }

  export type ProductCreateWithoutLicenseInput = {
    id?: string
    name: string
    slug: string
    price_type: $Enums.PriceType
    download_link?: string | null
    is_published?: boolean
    is_pinned?: boolean
    created_at: bigint | number
    released_at: bigint | number
    updated_at: bigint | number
    admin: AdminCreateNestedOneWithoutProductsInput
    category: CategoryCreateNestedOneWithoutProductsInput
    owner: OwnerCreateNestedOneWithoutProductsInput
    translations?: ProductTranslationCreateNestedManyWithoutProductInput
    discounts?: ProductDiscountCreateNestedOneWithoutProductInput
    coupons?: ProductCouponCreateNestedOneWithoutProductInput
    images?: ProductImageCreateNestedManyWithoutProductInput
    variants?: ProductVariantCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutLicenseInput = {
    id?: string
    category_id: number
    admin_id: string
    owner_id: number
    name: string
    slug: string
    price_type: $Enums.PriceType
    download_link?: string | null
    is_published?: boolean
    is_pinned?: boolean
    created_at: bigint | number
    released_at: bigint | number
    updated_at: bigint | number
    translations?: ProductTranslationUncheckedCreateNestedManyWithoutProductInput
    discounts?: ProductDiscountUncheckedCreateNestedOneWithoutProductInput
    coupons?: ProductCouponUncheckedCreateNestedOneWithoutProductInput
    images?: ProductImageUncheckedCreateNestedManyWithoutProductInput
    variants?: ProductVariantUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutLicenseInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutLicenseInput, ProductUncheckedCreateWithoutLicenseInput>
  }

  export type ProductCreateManyLicenseInputEnvelope = {
    data: ProductCreateManyLicenseInput | ProductCreateManyLicenseInput[]
    skipDuplicates?: boolean
  }

  export type LicenseTranslationCreateWithoutLicenseInput = {
    language: $Enums.Language
    name: string
    content: string
  }

  export type LicenseTranslationUncheckedCreateWithoutLicenseInput = {
    id?: number
    language: $Enums.Language
    name: string
    content: string
  }

  export type LicenseTranslationCreateOrConnectWithoutLicenseInput = {
    where: LicenseTranslationWhereUniqueInput
    create: XOR<LicenseTranslationCreateWithoutLicenseInput, LicenseTranslationUncheckedCreateWithoutLicenseInput>
  }

  export type LicenseTranslationCreateManyLicenseInputEnvelope = {
    data: LicenseTranslationCreateManyLicenseInput | LicenseTranslationCreateManyLicenseInput[]
    skipDuplicates?: boolean
  }

  export type ProductUpsertWithWhereUniqueWithoutLicenseInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutLicenseInput, ProductUncheckedUpdateWithoutLicenseInput>
    create: XOR<ProductCreateWithoutLicenseInput, ProductUncheckedCreateWithoutLicenseInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutLicenseInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutLicenseInput, ProductUncheckedUpdateWithoutLicenseInput>
  }

  export type ProductUpdateManyWithWhereWithoutLicenseInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutLicenseInput>
  }

  export type LicenseTranslationUpsertWithWhereUniqueWithoutLicenseInput = {
    where: LicenseTranslationWhereUniqueInput
    update: XOR<LicenseTranslationUpdateWithoutLicenseInput, LicenseTranslationUncheckedUpdateWithoutLicenseInput>
    create: XOR<LicenseTranslationCreateWithoutLicenseInput, LicenseTranslationUncheckedCreateWithoutLicenseInput>
  }

  export type LicenseTranslationUpdateWithWhereUniqueWithoutLicenseInput = {
    where: LicenseTranslationWhereUniqueInput
    data: XOR<LicenseTranslationUpdateWithoutLicenseInput, LicenseTranslationUncheckedUpdateWithoutLicenseInput>
  }

  export type LicenseTranslationUpdateManyWithWhereWithoutLicenseInput = {
    where: LicenseTranslationScalarWhereInput
    data: XOR<LicenseTranslationUpdateManyMutationInput, LicenseTranslationUncheckedUpdateManyWithoutLicenseInput>
  }

  export type LicenseTranslationScalarWhereInput = {
    AND?: LicenseTranslationScalarWhereInput | LicenseTranslationScalarWhereInput[]
    OR?: LicenseTranslationScalarWhereInput[]
    NOT?: LicenseTranslationScalarWhereInput | LicenseTranslationScalarWhereInput[]
    id?: IntFilter<"LicenseTranslation"> | number
    license_id?: IntFilter<"LicenseTranslation"> | number
    language?: EnumLanguageFilter<"LicenseTranslation"> | $Enums.Language
    name?: StringFilter<"LicenseTranslation"> | string
    content?: StringFilter<"LicenseTranslation"> | string
  }

  export type LicenseCreateWithoutTranslationsInput = {
    created_at: bigint | number
    updated_at: bigint | number
    products?: ProductCreateNestedManyWithoutLicenseInput
  }

  export type LicenseUncheckedCreateWithoutTranslationsInput = {
    id?: number
    created_at: bigint | number
    updated_at: bigint | number
    products?: ProductUncheckedCreateNestedManyWithoutLicenseInput
  }

  export type LicenseCreateOrConnectWithoutTranslationsInput = {
    where: LicenseWhereUniqueInput
    create: XOR<LicenseCreateWithoutTranslationsInput, LicenseUncheckedCreateWithoutTranslationsInput>
  }

  export type LicenseUpsertWithoutTranslationsInput = {
    update: XOR<LicenseUpdateWithoutTranslationsInput, LicenseUncheckedUpdateWithoutTranslationsInput>
    create: XOR<LicenseCreateWithoutTranslationsInput, LicenseUncheckedCreateWithoutTranslationsInput>
    where?: LicenseWhereInput
  }

  export type LicenseUpdateToOneWithWhereWithoutTranslationsInput = {
    where?: LicenseWhereInput
    data: XOR<LicenseUpdateWithoutTranslationsInput, LicenseUncheckedUpdateWithoutTranslationsInput>
  }

  export type LicenseUpdateWithoutTranslationsInput = {
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
    products?: ProductUpdateManyWithoutLicenseNestedInput
  }

  export type LicenseUncheckedUpdateWithoutTranslationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
    products?: ProductUncheckedUpdateManyWithoutLicenseNestedInput
  }

  export type ProductCreateWithoutCategoryInput = {
    id?: string
    name: string
    slug: string
    price_type: $Enums.PriceType
    download_link?: string | null
    is_published?: boolean
    is_pinned?: boolean
    created_at: bigint | number
    released_at: bigint | number
    updated_at: bigint | number
    admin: AdminCreateNestedOneWithoutProductsInput
    owner: OwnerCreateNestedOneWithoutProductsInput
    license: LicenseCreateNestedOneWithoutProductsInput
    translations?: ProductTranslationCreateNestedManyWithoutProductInput
    discounts?: ProductDiscountCreateNestedOneWithoutProductInput
    coupons?: ProductCouponCreateNestedOneWithoutProductInput
    images?: ProductImageCreateNestedManyWithoutProductInput
    variants?: ProductVariantCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutCategoryInput = {
    id?: string
    admin_id: string
    owner_id: number
    license_id: number
    name: string
    slug: string
    price_type: $Enums.PriceType
    download_link?: string | null
    is_published?: boolean
    is_pinned?: boolean
    created_at: bigint | number
    released_at: bigint | number
    updated_at: bigint | number
    translations?: ProductTranslationUncheckedCreateNestedManyWithoutProductInput
    discounts?: ProductDiscountUncheckedCreateNestedOneWithoutProductInput
    coupons?: ProductCouponUncheckedCreateNestedOneWithoutProductInput
    images?: ProductImageUncheckedCreateNestedManyWithoutProductInput
    variants?: ProductVariantUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutCategoryInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput>
  }

  export type ProductCreateManyCategoryInputEnvelope = {
    data: ProductCreateManyCategoryInput | ProductCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type ProductUpsertWithWhereUniqueWithoutCategoryInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutCategoryInput, ProductUncheckedUpdateWithoutCategoryInput>
    create: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutCategoryInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutCategoryInput, ProductUncheckedUpdateWithoutCategoryInput>
  }

  export type ProductUpdateManyWithWhereWithoutCategoryInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutCategoryInput>
  }

  export type AdminCreateWithoutProductsInput = {
    id: string
    first_name: string
    last_name: string
    email: string
    whatsapp_phone_number: string
    picture: string
    donation_links?: DonationLinkCreateNestedManyWithoutAdminInput
  }

  export type AdminUncheckedCreateWithoutProductsInput = {
    id: string
    first_name: string
    last_name: string
    email: string
    whatsapp_phone_number: string
    picture: string
    donation_links?: DonationLinkUncheckedCreateNestedManyWithoutAdminInput
  }

  export type AdminCreateOrConnectWithoutProductsInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutProductsInput, AdminUncheckedCreateWithoutProductsInput>
  }

  export type CategoryCreateWithoutProductsInput = {
    name: string
    slug: string
    created_at: bigint | number
    updated_at: bigint | number
  }

  export type CategoryUncheckedCreateWithoutProductsInput = {
    id?: number
    name: string
    slug: string
    created_at: bigint | number
    updated_at: bigint | number
  }

  export type CategoryCreateOrConnectWithoutProductsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput>
  }

  export type OwnerCreateWithoutProductsInput = {
    first_name: string
    last_name: string
    sm_username: string
    picture: string
    created_at: bigint | number
    updated_at: bigint | number
  }

  export type OwnerUncheckedCreateWithoutProductsInput = {
    id?: number
    first_name: string
    last_name: string
    sm_username: string
    picture: string
    created_at: bigint | number
    updated_at: bigint | number
  }

  export type OwnerCreateOrConnectWithoutProductsInput = {
    where: OwnerWhereUniqueInput
    create: XOR<OwnerCreateWithoutProductsInput, OwnerUncheckedCreateWithoutProductsInput>
  }

  export type LicenseCreateWithoutProductsInput = {
    created_at: bigint | number
    updated_at: bigint | number
    translations?: LicenseTranslationCreateNestedManyWithoutLicenseInput
  }

  export type LicenseUncheckedCreateWithoutProductsInput = {
    id?: number
    created_at: bigint | number
    updated_at: bigint | number
    translations?: LicenseTranslationUncheckedCreateNestedManyWithoutLicenseInput
  }

  export type LicenseCreateOrConnectWithoutProductsInput = {
    where: LicenseWhereUniqueInput
    create: XOR<LicenseCreateWithoutProductsInput, LicenseUncheckedCreateWithoutProductsInput>
  }

  export type ProductTranslationCreateWithoutProductInput = {
    id?: string
    language: $Enums.Language
    description: string
    changelog?: string | null
  }

  export type ProductTranslationUncheckedCreateWithoutProductInput = {
    id?: string
    language: $Enums.Language
    description: string
    changelog?: string | null
  }

  export type ProductTranslationCreateOrConnectWithoutProductInput = {
    where: ProductTranslationWhereUniqueInput
    create: XOR<ProductTranslationCreateWithoutProductInput, ProductTranslationUncheckedCreateWithoutProductInput>
  }

  export type ProductTranslationCreateManyProductInputEnvelope = {
    data: ProductTranslationCreateManyProductInput | ProductTranslationCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type ProductDiscountCreateWithoutProductInput = {
    discount: number
    expired_at: bigint | number
  }

  export type ProductDiscountUncheckedCreateWithoutProductInput = {
    id?: number
    discount: number
    expired_at: bigint | number
  }

  export type ProductDiscountCreateOrConnectWithoutProductInput = {
    where: ProductDiscountWhereUniqueInput
    create: XOR<ProductDiscountCreateWithoutProductInput, ProductDiscountUncheckedCreateWithoutProductInput>
  }

  export type ProductCouponCreateWithoutProductInput = {
    code: string
    discount: number
    expired_at: bigint | number
  }

  export type ProductCouponUncheckedCreateWithoutProductInput = {
    id?: number
    code: string
    discount: number
    expired_at: bigint | number
  }

  export type ProductCouponCreateOrConnectWithoutProductInput = {
    where: ProductCouponWhereUniqueInput
    create: XOR<ProductCouponCreateWithoutProductInput, ProductCouponUncheckedCreateWithoutProductInput>
  }

  export type ProductImageCreateWithoutProductInput = {
    id?: string
    url: string
    is_thumbnail: boolean
    width: number
    height: number
  }

  export type ProductImageUncheckedCreateWithoutProductInput = {
    id?: string
    url: string
    is_thumbnail: boolean
    width: number
    height: number
  }

  export type ProductImageCreateOrConnectWithoutProductInput = {
    where: ProductImageWhereUniqueInput
    create: XOR<ProductImageCreateWithoutProductInput, ProductImageUncheckedCreateWithoutProductInput>
  }

  export type ProductImageCreateManyProductInputEnvelope = {
    data: ProductImageCreateManyProductInput | ProductImageCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type ProductVariantCreateWithoutProductInput = {
    id?: string
    name: string
    download_link?: string | null
    prices?: ProductPriceCreateNestedManyWithoutVariantInput
  }

  export type ProductVariantUncheckedCreateWithoutProductInput = {
    id?: string
    name: string
    download_link?: string | null
    prices?: ProductPriceUncheckedCreateNestedManyWithoutVariantInput
  }

  export type ProductVariantCreateOrConnectWithoutProductInput = {
    where: ProductVariantWhereUniqueInput
    create: XOR<ProductVariantCreateWithoutProductInput, ProductVariantUncheckedCreateWithoutProductInput>
  }

  export type ProductVariantCreateManyProductInputEnvelope = {
    data: ProductVariantCreateManyProductInput | ProductVariantCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type AdminUpsertWithoutProductsInput = {
    update: XOR<AdminUpdateWithoutProductsInput, AdminUncheckedUpdateWithoutProductsInput>
    create: XOR<AdminCreateWithoutProductsInput, AdminUncheckedCreateWithoutProductsInput>
    where?: AdminWhereInput
  }

  export type AdminUpdateToOneWithWhereWithoutProductsInput = {
    where?: AdminWhereInput
    data: XOR<AdminUpdateWithoutProductsInput, AdminUncheckedUpdateWithoutProductsInput>
  }

  export type AdminUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    whatsapp_phone_number?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    donation_links?: DonationLinkUpdateManyWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    whatsapp_phone_number?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    donation_links?: DonationLinkUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type CategoryUpsertWithoutProductsInput = {
    update: XOR<CategoryUpdateWithoutProductsInput, CategoryUncheckedUpdateWithoutProductsInput>
    create: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutProductsInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutProductsInput, CategoryUncheckedUpdateWithoutProductsInput>
  }

  export type CategoryUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type CategoryUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type OwnerUpsertWithoutProductsInput = {
    update: XOR<OwnerUpdateWithoutProductsInput, OwnerUncheckedUpdateWithoutProductsInput>
    create: XOR<OwnerCreateWithoutProductsInput, OwnerUncheckedCreateWithoutProductsInput>
    where?: OwnerWhereInput
  }

  export type OwnerUpdateToOneWithWhereWithoutProductsInput = {
    where?: OwnerWhereInput
    data: XOR<OwnerUpdateWithoutProductsInput, OwnerUncheckedUpdateWithoutProductsInput>
  }

  export type OwnerUpdateWithoutProductsInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    sm_username?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type OwnerUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    sm_username?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type LicenseUpsertWithoutProductsInput = {
    update: XOR<LicenseUpdateWithoutProductsInput, LicenseUncheckedUpdateWithoutProductsInput>
    create: XOR<LicenseCreateWithoutProductsInput, LicenseUncheckedCreateWithoutProductsInput>
    where?: LicenseWhereInput
  }

  export type LicenseUpdateToOneWithWhereWithoutProductsInput = {
    where?: LicenseWhereInput
    data: XOR<LicenseUpdateWithoutProductsInput, LicenseUncheckedUpdateWithoutProductsInput>
  }

  export type LicenseUpdateWithoutProductsInput = {
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
    translations?: LicenseTranslationUpdateManyWithoutLicenseNestedInput
  }

  export type LicenseUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
    translations?: LicenseTranslationUncheckedUpdateManyWithoutLicenseNestedInput
  }

  export type ProductTranslationUpsertWithWhereUniqueWithoutProductInput = {
    where: ProductTranslationWhereUniqueInput
    update: XOR<ProductTranslationUpdateWithoutProductInput, ProductTranslationUncheckedUpdateWithoutProductInput>
    create: XOR<ProductTranslationCreateWithoutProductInput, ProductTranslationUncheckedCreateWithoutProductInput>
  }

  export type ProductTranslationUpdateWithWhereUniqueWithoutProductInput = {
    where: ProductTranslationWhereUniqueInput
    data: XOR<ProductTranslationUpdateWithoutProductInput, ProductTranslationUncheckedUpdateWithoutProductInput>
  }

  export type ProductTranslationUpdateManyWithWhereWithoutProductInput = {
    where: ProductTranslationScalarWhereInput
    data: XOR<ProductTranslationUpdateManyMutationInput, ProductTranslationUncheckedUpdateManyWithoutProductInput>
  }

  export type ProductTranslationScalarWhereInput = {
    AND?: ProductTranslationScalarWhereInput | ProductTranslationScalarWhereInput[]
    OR?: ProductTranslationScalarWhereInput[]
    NOT?: ProductTranslationScalarWhereInput | ProductTranslationScalarWhereInput[]
    id?: UuidFilter<"ProductTranslation"> | string
    product_id?: UuidFilter<"ProductTranslation"> | string
    language?: EnumLanguageFilter<"ProductTranslation"> | $Enums.Language
    description?: StringFilter<"ProductTranslation"> | string
    changelog?: StringNullableFilter<"ProductTranslation"> | string | null
  }

  export type ProductDiscountUpsertWithoutProductInput = {
    update: XOR<ProductDiscountUpdateWithoutProductInput, ProductDiscountUncheckedUpdateWithoutProductInput>
    create: XOR<ProductDiscountCreateWithoutProductInput, ProductDiscountUncheckedCreateWithoutProductInput>
    where?: ProductDiscountWhereInput
  }

  export type ProductDiscountUpdateToOneWithWhereWithoutProductInput = {
    where?: ProductDiscountWhereInput
    data: XOR<ProductDiscountUpdateWithoutProductInput, ProductDiscountUncheckedUpdateWithoutProductInput>
  }

  export type ProductDiscountUpdateWithoutProductInput = {
    discount?: IntFieldUpdateOperationsInput | number
    expired_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ProductDiscountUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    discount?: IntFieldUpdateOperationsInput | number
    expired_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ProductCouponUpsertWithoutProductInput = {
    update: XOR<ProductCouponUpdateWithoutProductInput, ProductCouponUncheckedUpdateWithoutProductInput>
    create: XOR<ProductCouponCreateWithoutProductInput, ProductCouponUncheckedCreateWithoutProductInput>
    where?: ProductCouponWhereInput
  }

  export type ProductCouponUpdateToOneWithWhereWithoutProductInput = {
    where?: ProductCouponWhereInput
    data: XOR<ProductCouponUpdateWithoutProductInput, ProductCouponUncheckedUpdateWithoutProductInput>
  }

  export type ProductCouponUpdateWithoutProductInput = {
    code?: StringFieldUpdateOperationsInput | string
    discount?: IntFieldUpdateOperationsInput | number
    expired_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ProductCouponUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    discount?: IntFieldUpdateOperationsInput | number
    expired_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ProductImageUpsertWithWhereUniqueWithoutProductInput = {
    where: ProductImageWhereUniqueInput
    update: XOR<ProductImageUpdateWithoutProductInput, ProductImageUncheckedUpdateWithoutProductInput>
    create: XOR<ProductImageCreateWithoutProductInput, ProductImageUncheckedCreateWithoutProductInput>
  }

  export type ProductImageUpdateWithWhereUniqueWithoutProductInput = {
    where: ProductImageWhereUniqueInput
    data: XOR<ProductImageUpdateWithoutProductInput, ProductImageUncheckedUpdateWithoutProductInput>
  }

  export type ProductImageUpdateManyWithWhereWithoutProductInput = {
    where: ProductImageScalarWhereInput
    data: XOR<ProductImageUpdateManyMutationInput, ProductImageUncheckedUpdateManyWithoutProductInput>
  }

  export type ProductImageScalarWhereInput = {
    AND?: ProductImageScalarWhereInput | ProductImageScalarWhereInput[]
    OR?: ProductImageScalarWhereInput[]
    NOT?: ProductImageScalarWhereInput | ProductImageScalarWhereInput[]
    id?: UuidFilter<"ProductImage"> | string
    product_id?: UuidFilter<"ProductImage"> | string
    url?: StringFilter<"ProductImage"> | string
    is_thumbnail?: BoolFilter<"ProductImage"> | boolean
    width?: IntFilter<"ProductImage"> | number
    height?: IntFilter<"ProductImage"> | number
  }

  export type ProductVariantUpsertWithWhereUniqueWithoutProductInput = {
    where: ProductVariantWhereUniqueInput
    update: XOR<ProductVariantUpdateWithoutProductInput, ProductVariantUncheckedUpdateWithoutProductInput>
    create: XOR<ProductVariantCreateWithoutProductInput, ProductVariantUncheckedCreateWithoutProductInput>
  }

  export type ProductVariantUpdateWithWhereUniqueWithoutProductInput = {
    where: ProductVariantWhereUniqueInput
    data: XOR<ProductVariantUpdateWithoutProductInput, ProductVariantUncheckedUpdateWithoutProductInput>
  }

  export type ProductVariantUpdateManyWithWhereWithoutProductInput = {
    where: ProductVariantScalarWhereInput
    data: XOR<ProductVariantUpdateManyMutationInput, ProductVariantUncheckedUpdateManyWithoutProductInput>
  }

  export type ProductVariantScalarWhereInput = {
    AND?: ProductVariantScalarWhereInput | ProductVariantScalarWhereInput[]
    OR?: ProductVariantScalarWhereInput[]
    NOT?: ProductVariantScalarWhereInput | ProductVariantScalarWhereInput[]
    id?: UuidFilter<"ProductVariant"> | string
    product_id?: UuidFilter<"ProductVariant"> | string
    name?: StringFilter<"ProductVariant"> | string
    download_link?: StringNullableFilter<"ProductVariant"> | string | null
  }

  export type ProductCreateWithoutTranslationsInput = {
    id?: string
    name: string
    slug: string
    price_type: $Enums.PriceType
    download_link?: string | null
    is_published?: boolean
    is_pinned?: boolean
    created_at: bigint | number
    released_at: bigint | number
    updated_at: bigint | number
    admin: AdminCreateNestedOneWithoutProductsInput
    category: CategoryCreateNestedOneWithoutProductsInput
    owner: OwnerCreateNestedOneWithoutProductsInput
    license: LicenseCreateNestedOneWithoutProductsInput
    discounts?: ProductDiscountCreateNestedOneWithoutProductInput
    coupons?: ProductCouponCreateNestedOneWithoutProductInput
    images?: ProductImageCreateNestedManyWithoutProductInput
    variants?: ProductVariantCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutTranslationsInput = {
    id?: string
    category_id: number
    admin_id: string
    owner_id: number
    license_id: number
    name: string
    slug: string
    price_type: $Enums.PriceType
    download_link?: string | null
    is_published?: boolean
    is_pinned?: boolean
    created_at: bigint | number
    released_at: bigint | number
    updated_at: bigint | number
    discounts?: ProductDiscountUncheckedCreateNestedOneWithoutProductInput
    coupons?: ProductCouponUncheckedCreateNestedOneWithoutProductInput
    images?: ProductImageUncheckedCreateNestedManyWithoutProductInput
    variants?: ProductVariantUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutTranslationsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutTranslationsInput, ProductUncheckedCreateWithoutTranslationsInput>
  }

  export type ProductUpsertWithoutTranslationsInput = {
    update: XOR<ProductUpdateWithoutTranslationsInput, ProductUncheckedUpdateWithoutTranslationsInput>
    create: XOR<ProductCreateWithoutTranslationsInput, ProductUncheckedCreateWithoutTranslationsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutTranslationsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutTranslationsInput, ProductUncheckedUpdateWithoutTranslationsInput>
  }

  export type ProductUpdateWithoutTranslationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price_type?: EnumPriceTypeFieldUpdateOperationsInput | $Enums.PriceType
    download_link?: NullableStringFieldUpdateOperationsInput | string | null
    is_published?: BoolFieldUpdateOperationsInput | boolean
    is_pinned?: BoolFieldUpdateOperationsInput | boolean
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    released_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
    admin?: AdminUpdateOneRequiredWithoutProductsNestedInput
    category?: CategoryUpdateOneRequiredWithoutProductsNestedInput
    owner?: OwnerUpdateOneRequiredWithoutProductsNestedInput
    license?: LicenseUpdateOneRequiredWithoutProductsNestedInput
    discounts?: ProductDiscountUpdateOneWithoutProductNestedInput
    coupons?: ProductCouponUpdateOneWithoutProductNestedInput
    images?: ProductImageUpdateManyWithoutProductNestedInput
    variants?: ProductVariantUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutTranslationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    category_id?: IntFieldUpdateOperationsInput | number
    admin_id?: StringFieldUpdateOperationsInput | string
    owner_id?: IntFieldUpdateOperationsInput | number
    license_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price_type?: EnumPriceTypeFieldUpdateOperationsInput | $Enums.PriceType
    download_link?: NullableStringFieldUpdateOperationsInput | string | null
    is_published?: BoolFieldUpdateOperationsInput | boolean
    is_pinned?: BoolFieldUpdateOperationsInput | boolean
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    released_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
    discounts?: ProductDiscountUncheckedUpdateOneWithoutProductNestedInput
    coupons?: ProductCouponUncheckedUpdateOneWithoutProductNestedInput
    images?: ProductImageUncheckedUpdateManyWithoutProductNestedInput
    variants?: ProductVariantUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateWithoutDiscountsInput = {
    id?: string
    name: string
    slug: string
    price_type: $Enums.PriceType
    download_link?: string | null
    is_published?: boolean
    is_pinned?: boolean
    created_at: bigint | number
    released_at: bigint | number
    updated_at: bigint | number
    admin: AdminCreateNestedOneWithoutProductsInput
    category: CategoryCreateNestedOneWithoutProductsInput
    owner: OwnerCreateNestedOneWithoutProductsInput
    license: LicenseCreateNestedOneWithoutProductsInput
    translations?: ProductTranslationCreateNestedManyWithoutProductInput
    coupons?: ProductCouponCreateNestedOneWithoutProductInput
    images?: ProductImageCreateNestedManyWithoutProductInput
    variants?: ProductVariantCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutDiscountsInput = {
    id?: string
    category_id: number
    admin_id: string
    owner_id: number
    license_id: number
    name: string
    slug: string
    price_type: $Enums.PriceType
    download_link?: string | null
    is_published?: boolean
    is_pinned?: boolean
    created_at: bigint | number
    released_at: bigint | number
    updated_at: bigint | number
    translations?: ProductTranslationUncheckedCreateNestedManyWithoutProductInput
    coupons?: ProductCouponUncheckedCreateNestedOneWithoutProductInput
    images?: ProductImageUncheckedCreateNestedManyWithoutProductInput
    variants?: ProductVariantUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutDiscountsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutDiscountsInput, ProductUncheckedCreateWithoutDiscountsInput>
  }

  export type ProductUpsertWithoutDiscountsInput = {
    update: XOR<ProductUpdateWithoutDiscountsInput, ProductUncheckedUpdateWithoutDiscountsInput>
    create: XOR<ProductCreateWithoutDiscountsInput, ProductUncheckedCreateWithoutDiscountsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutDiscountsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutDiscountsInput, ProductUncheckedUpdateWithoutDiscountsInput>
  }

  export type ProductUpdateWithoutDiscountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price_type?: EnumPriceTypeFieldUpdateOperationsInput | $Enums.PriceType
    download_link?: NullableStringFieldUpdateOperationsInput | string | null
    is_published?: BoolFieldUpdateOperationsInput | boolean
    is_pinned?: BoolFieldUpdateOperationsInput | boolean
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    released_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
    admin?: AdminUpdateOneRequiredWithoutProductsNestedInput
    category?: CategoryUpdateOneRequiredWithoutProductsNestedInput
    owner?: OwnerUpdateOneRequiredWithoutProductsNestedInput
    license?: LicenseUpdateOneRequiredWithoutProductsNestedInput
    translations?: ProductTranslationUpdateManyWithoutProductNestedInput
    coupons?: ProductCouponUpdateOneWithoutProductNestedInput
    images?: ProductImageUpdateManyWithoutProductNestedInput
    variants?: ProductVariantUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutDiscountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    category_id?: IntFieldUpdateOperationsInput | number
    admin_id?: StringFieldUpdateOperationsInput | string
    owner_id?: IntFieldUpdateOperationsInput | number
    license_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price_type?: EnumPriceTypeFieldUpdateOperationsInput | $Enums.PriceType
    download_link?: NullableStringFieldUpdateOperationsInput | string | null
    is_published?: BoolFieldUpdateOperationsInput | boolean
    is_pinned?: BoolFieldUpdateOperationsInput | boolean
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    released_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
    translations?: ProductTranslationUncheckedUpdateManyWithoutProductNestedInput
    coupons?: ProductCouponUncheckedUpdateOneWithoutProductNestedInput
    images?: ProductImageUncheckedUpdateManyWithoutProductNestedInput
    variants?: ProductVariantUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateWithoutCouponsInput = {
    id?: string
    name: string
    slug: string
    price_type: $Enums.PriceType
    download_link?: string | null
    is_published?: boolean
    is_pinned?: boolean
    created_at: bigint | number
    released_at: bigint | number
    updated_at: bigint | number
    admin: AdminCreateNestedOneWithoutProductsInput
    category: CategoryCreateNestedOneWithoutProductsInput
    owner: OwnerCreateNestedOneWithoutProductsInput
    license: LicenseCreateNestedOneWithoutProductsInput
    translations?: ProductTranslationCreateNestedManyWithoutProductInput
    discounts?: ProductDiscountCreateNestedOneWithoutProductInput
    images?: ProductImageCreateNestedManyWithoutProductInput
    variants?: ProductVariantCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutCouponsInput = {
    id?: string
    category_id: number
    admin_id: string
    owner_id: number
    license_id: number
    name: string
    slug: string
    price_type: $Enums.PriceType
    download_link?: string | null
    is_published?: boolean
    is_pinned?: boolean
    created_at: bigint | number
    released_at: bigint | number
    updated_at: bigint | number
    translations?: ProductTranslationUncheckedCreateNestedManyWithoutProductInput
    discounts?: ProductDiscountUncheckedCreateNestedOneWithoutProductInput
    images?: ProductImageUncheckedCreateNestedManyWithoutProductInput
    variants?: ProductVariantUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutCouponsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutCouponsInput, ProductUncheckedCreateWithoutCouponsInput>
  }

  export type ProductUpsertWithoutCouponsInput = {
    update: XOR<ProductUpdateWithoutCouponsInput, ProductUncheckedUpdateWithoutCouponsInput>
    create: XOR<ProductCreateWithoutCouponsInput, ProductUncheckedCreateWithoutCouponsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutCouponsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutCouponsInput, ProductUncheckedUpdateWithoutCouponsInput>
  }

  export type ProductUpdateWithoutCouponsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price_type?: EnumPriceTypeFieldUpdateOperationsInput | $Enums.PriceType
    download_link?: NullableStringFieldUpdateOperationsInput | string | null
    is_published?: BoolFieldUpdateOperationsInput | boolean
    is_pinned?: BoolFieldUpdateOperationsInput | boolean
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    released_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
    admin?: AdminUpdateOneRequiredWithoutProductsNestedInput
    category?: CategoryUpdateOneRequiredWithoutProductsNestedInput
    owner?: OwnerUpdateOneRequiredWithoutProductsNestedInput
    license?: LicenseUpdateOneRequiredWithoutProductsNestedInput
    translations?: ProductTranslationUpdateManyWithoutProductNestedInput
    discounts?: ProductDiscountUpdateOneWithoutProductNestedInput
    images?: ProductImageUpdateManyWithoutProductNestedInput
    variants?: ProductVariantUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutCouponsInput = {
    id?: StringFieldUpdateOperationsInput | string
    category_id?: IntFieldUpdateOperationsInput | number
    admin_id?: StringFieldUpdateOperationsInput | string
    owner_id?: IntFieldUpdateOperationsInput | number
    license_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price_type?: EnumPriceTypeFieldUpdateOperationsInput | $Enums.PriceType
    download_link?: NullableStringFieldUpdateOperationsInput | string | null
    is_published?: BoolFieldUpdateOperationsInput | boolean
    is_pinned?: BoolFieldUpdateOperationsInput | boolean
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    released_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
    translations?: ProductTranslationUncheckedUpdateManyWithoutProductNestedInput
    discounts?: ProductDiscountUncheckedUpdateOneWithoutProductNestedInput
    images?: ProductImageUncheckedUpdateManyWithoutProductNestedInput
    variants?: ProductVariantUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateWithoutImagesInput = {
    id?: string
    name: string
    slug: string
    price_type: $Enums.PriceType
    download_link?: string | null
    is_published?: boolean
    is_pinned?: boolean
    created_at: bigint | number
    released_at: bigint | number
    updated_at: bigint | number
    admin: AdminCreateNestedOneWithoutProductsInput
    category: CategoryCreateNestedOneWithoutProductsInput
    owner: OwnerCreateNestedOneWithoutProductsInput
    license: LicenseCreateNestedOneWithoutProductsInput
    translations?: ProductTranslationCreateNestedManyWithoutProductInput
    discounts?: ProductDiscountCreateNestedOneWithoutProductInput
    coupons?: ProductCouponCreateNestedOneWithoutProductInput
    variants?: ProductVariantCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutImagesInput = {
    id?: string
    category_id: number
    admin_id: string
    owner_id: number
    license_id: number
    name: string
    slug: string
    price_type: $Enums.PriceType
    download_link?: string | null
    is_published?: boolean
    is_pinned?: boolean
    created_at: bigint | number
    released_at: bigint | number
    updated_at: bigint | number
    translations?: ProductTranslationUncheckedCreateNestedManyWithoutProductInput
    discounts?: ProductDiscountUncheckedCreateNestedOneWithoutProductInput
    coupons?: ProductCouponUncheckedCreateNestedOneWithoutProductInput
    variants?: ProductVariantUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutImagesInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutImagesInput, ProductUncheckedCreateWithoutImagesInput>
  }

  export type ProductUpsertWithoutImagesInput = {
    update: XOR<ProductUpdateWithoutImagesInput, ProductUncheckedUpdateWithoutImagesInput>
    create: XOR<ProductCreateWithoutImagesInput, ProductUncheckedCreateWithoutImagesInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutImagesInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutImagesInput, ProductUncheckedUpdateWithoutImagesInput>
  }

  export type ProductUpdateWithoutImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price_type?: EnumPriceTypeFieldUpdateOperationsInput | $Enums.PriceType
    download_link?: NullableStringFieldUpdateOperationsInput | string | null
    is_published?: BoolFieldUpdateOperationsInput | boolean
    is_pinned?: BoolFieldUpdateOperationsInput | boolean
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    released_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
    admin?: AdminUpdateOneRequiredWithoutProductsNestedInput
    category?: CategoryUpdateOneRequiredWithoutProductsNestedInput
    owner?: OwnerUpdateOneRequiredWithoutProductsNestedInput
    license?: LicenseUpdateOneRequiredWithoutProductsNestedInput
    translations?: ProductTranslationUpdateManyWithoutProductNestedInput
    discounts?: ProductDiscountUpdateOneWithoutProductNestedInput
    coupons?: ProductCouponUpdateOneWithoutProductNestedInput
    variants?: ProductVariantUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    category_id?: IntFieldUpdateOperationsInput | number
    admin_id?: StringFieldUpdateOperationsInput | string
    owner_id?: IntFieldUpdateOperationsInput | number
    license_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price_type?: EnumPriceTypeFieldUpdateOperationsInput | $Enums.PriceType
    download_link?: NullableStringFieldUpdateOperationsInput | string | null
    is_published?: BoolFieldUpdateOperationsInput | boolean
    is_pinned?: BoolFieldUpdateOperationsInput | boolean
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    released_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
    translations?: ProductTranslationUncheckedUpdateManyWithoutProductNestedInput
    discounts?: ProductDiscountUncheckedUpdateOneWithoutProductNestedInput
    coupons?: ProductCouponUncheckedUpdateOneWithoutProductNestedInput
    variants?: ProductVariantUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateWithoutVariantsInput = {
    id?: string
    name: string
    slug: string
    price_type: $Enums.PriceType
    download_link?: string | null
    is_published?: boolean
    is_pinned?: boolean
    created_at: bigint | number
    released_at: bigint | number
    updated_at: bigint | number
    admin: AdminCreateNestedOneWithoutProductsInput
    category: CategoryCreateNestedOneWithoutProductsInput
    owner: OwnerCreateNestedOneWithoutProductsInput
    license: LicenseCreateNestedOneWithoutProductsInput
    translations?: ProductTranslationCreateNestedManyWithoutProductInput
    discounts?: ProductDiscountCreateNestedOneWithoutProductInput
    coupons?: ProductCouponCreateNestedOneWithoutProductInput
    images?: ProductImageCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutVariantsInput = {
    id?: string
    category_id: number
    admin_id: string
    owner_id: number
    license_id: number
    name: string
    slug: string
    price_type: $Enums.PriceType
    download_link?: string | null
    is_published?: boolean
    is_pinned?: boolean
    created_at: bigint | number
    released_at: bigint | number
    updated_at: bigint | number
    translations?: ProductTranslationUncheckedCreateNestedManyWithoutProductInput
    discounts?: ProductDiscountUncheckedCreateNestedOneWithoutProductInput
    coupons?: ProductCouponUncheckedCreateNestedOneWithoutProductInput
    images?: ProductImageUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutVariantsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutVariantsInput, ProductUncheckedCreateWithoutVariantsInput>
  }

  export type ProductPriceCreateWithoutVariantInput = {
    id?: string
    currency_code: $Enums.CurrencyCode
    price: number
  }

  export type ProductPriceUncheckedCreateWithoutVariantInput = {
    id?: string
    currency_code: $Enums.CurrencyCode
    price: number
  }

  export type ProductPriceCreateOrConnectWithoutVariantInput = {
    where: ProductPriceWhereUniqueInput
    create: XOR<ProductPriceCreateWithoutVariantInput, ProductPriceUncheckedCreateWithoutVariantInput>
  }

  export type ProductPriceCreateManyVariantInputEnvelope = {
    data: ProductPriceCreateManyVariantInput | ProductPriceCreateManyVariantInput[]
    skipDuplicates?: boolean
  }

  export type ProductUpsertWithoutVariantsInput = {
    update: XOR<ProductUpdateWithoutVariantsInput, ProductUncheckedUpdateWithoutVariantsInput>
    create: XOR<ProductCreateWithoutVariantsInput, ProductUncheckedCreateWithoutVariantsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutVariantsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutVariantsInput, ProductUncheckedUpdateWithoutVariantsInput>
  }

  export type ProductUpdateWithoutVariantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price_type?: EnumPriceTypeFieldUpdateOperationsInput | $Enums.PriceType
    download_link?: NullableStringFieldUpdateOperationsInput | string | null
    is_published?: BoolFieldUpdateOperationsInput | boolean
    is_pinned?: BoolFieldUpdateOperationsInput | boolean
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    released_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
    admin?: AdminUpdateOneRequiredWithoutProductsNestedInput
    category?: CategoryUpdateOneRequiredWithoutProductsNestedInput
    owner?: OwnerUpdateOneRequiredWithoutProductsNestedInput
    license?: LicenseUpdateOneRequiredWithoutProductsNestedInput
    translations?: ProductTranslationUpdateManyWithoutProductNestedInput
    discounts?: ProductDiscountUpdateOneWithoutProductNestedInput
    coupons?: ProductCouponUpdateOneWithoutProductNestedInput
    images?: ProductImageUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutVariantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    category_id?: IntFieldUpdateOperationsInput | number
    admin_id?: StringFieldUpdateOperationsInput | string
    owner_id?: IntFieldUpdateOperationsInput | number
    license_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price_type?: EnumPriceTypeFieldUpdateOperationsInput | $Enums.PriceType
    download_link?: NullableStringFieldUpdateOperationsInput | string | null
    is_published?: BoolFieldUpdateOperationsInput | boolean
    is_pinned?: BoolFieldUpdateOperationsInput | boolean
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    released_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
    translations?: ProductTranslationUncheckedUpdateManyWithoutProductNestedInput
    discounts?: ProductDiscountUncheckedUpdateOneWithoutProductNestedInput
    coupons?: ProductCouponUncheckedUpdateOneWithoutProductNestedInput
    images?: ProductImageUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductPriceUpsertWithWhereUniqueWithoutVariantInput = {
    where: ProductPriceWhereUniqueInput
    update: XOR<ProductPriceUpdateWithoutVariantInput, ProductPriceUncheckedUpdateWithoutVariantInput>
    create: XOR<ProductPriceCreateWithoutVariantInput, ProductPriceUncheckedCreateWithoutVariantInput>
  }

  export type ProductPriceUpdateWithWhereUniqueWithoutVariantInput = {
    where: ProductPriceWhereUniqueInput
    data: XOR<ProductPriceUpdateWithoutVariantInput, ProductPriceUncheckedUpdateWithoutVariantInput>
  }

  export type ProductPriceUpdateManyWithWhereWithoutVariantInput = {
    where: ProductPriceScalarWhereInput
    data: XOR<ProductPriceUpdateManyMutationInput, ProductPriceUncheckedUpdateManyWithoutVariantInput>
  }

  export type ProductPriceScalarWhereInput = {
    AND?: ProductPriceScalarWhereInput | ProductPriceScalarWhereInput[]
    OR?: ProductPriceScalarWhereInput[]
    NOT?: ProductPriceScalarWhereInput | ProductPriceScalarWhereInput[]
    id?: UuidFilter<"ProductPrice"> | string
    variant_id?: UuidFilter<"ProductPrice"> | string
    currency_code?: EnumCurrencyCodeFilter<"ProductPrice"> | $Enums.CurrencyCode
    price?: IntFilter<"ProductPrice"> | number
  }

  export type ProductVariantCreateWithoutPricesInput = {
    id?: string
    name: string
    download_link?: string | null
    product: ProductCreateNestedOneWithoutVariantsInput
  }

  export type ProductVariantUncheckedCreateWithoutPricesInput = {
    id?: string
    product_id: string
    name: string
    download_link?: string | null
  }

  export type ProductVariantCreateOrConnectWithoutPricesInput = {
    where: ProductVariantWhereUniqueInput
    create: XOR<ProductVariantCreateWithoutPricesInput, ProductVariantUncheckedCreateWithoutPricesInput>
  }

  export type ProductVariantUpsertWithoutPricesInput = {
    update: XOR<ProductVariantUpdateWithoutPricesInput, ProductVariantUncheckedUpdateWithoutPricesInput>
    create: XOR<ProductVariantCreateWithoutPricesInput, ProductVariantUncheckedCreateWithoutPricesInput>
    where?: ProductVariantWhereInput
  }

  export type ProductVariantUpdateToOneWithWhereWithoutPricesInput = {
    where?: ProductVariantWhereInput
    data: XOR<ProductVariantUpdateWithoutPricesInput, ProductVariantUncheckedUpdateWithoutPricesInput>
  }

  export type ProductVariantUpdateWithoutPricesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    download_link?: NullableStringFieldUpdateOperationsInput | string | null
    product?: ProductUpdateOneRequiredWithoutVariantsNestedInput
  }

  export type ProductVariantUncheckedUpdateWithoutPricesInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    download_link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TermsOfServiceTranslationCreateWithoutTerms_of_serviceInput = {
    language: $Enums.Language
    content: string
  }

  export type TermsOfServiceTranslationUncheckedCreateWithoutTerms_of_serviceInput = {
    id?: number
    language: $Enums.Language
    content: string
  }

  export type TermsOfServiceTranslationCreateOrConnectWithoutTerms_of_serviceInput = {
    where: TermsOfServiceTranslationWhereUniqueInput
    create: XOR<TermsOfServiceTranslationCreateWithoutTerms_of_serviceInput, TermsOfServiceTranslationUncheckedCreateWithoutTerms_of_serviceInput>
  }

  export type TermsOfServiceTranslationCreateManyTerms_of_serviceInputEnvelope = {
    data: TermsOfServiceTranslationCreateManyTerms_of_serviceInput | TermsOfServiceTranslationCreateManyTerms_of_serviceInput[]
    skipDuplicates?: boolean
  }

  export type TermsOfServiceTranslationUpsertWithWhereUniqueWithoutTerms_of_serviceInput = {
    where: TermsOfServiceTranslationWhereUniqueInput
    update: XOR<TermsOfServiceTranslationUpdateWithoutTerms_of_serviceInput, TermsOfServiceTranslationUncheckedUpdateWithoutTerms_of_serviceInput>
    create: XOR<TermsOfServiceTranslationCreateWithoutTerms_of_serviceInput, TermsOfServiceTranslationUncheckedCreateWithoutTerms_of_serviceInput>
  }

  export type TermsOfServiceTranslationUpdateWithWhereUniqueWithoutTerms_of_serviceInput = {
    where: TermsOfServiceTranslationWhereUniqueInput
    data: XOR<TermsOfServiceTranslationUpdateWithoutTerms_of_serviceInput, TermsOfServiceTranslationUncheckedUpdateWithoutTerms_of_serviceInput>
  }

  export type TermsOfServiceTranslationUpdateManyWithWhereWithoutTerms_of_serviceInput = {
    where: TermsOfServiceTranslationScalarWhereInput
    data: XOR<TermsOfServiceTranslationUpdateManyMutationInput, TermsOfServiceTranslationUncheckedUpdateManyWithoutTerms_of_serviceInput>
  }

  export type TermsOfServiceTranslationScalarWhereInput = {
    AND?: TermsOfServiceTranslationScalarWhereInput | TermsOfServiceTranslationScalarWhereInput[]
    OR?: TermsOfServiceTranslationScalarWhereInput[]
    NOT?: TermsOfServiceTranslationScalarWhereInput | TermsOfServiceTranslationScalarWhereInput[]
    id?: IntFilter<"TermsOfServiceTranslation"> | number
    terms_of_service_id?: IntFilter<"TermsOfServiceTranslation"> | number
    language?: EnumLanguageFilter<"TermsOfServiceTranslation"> | $Enums.Language
    content?: StringFilter<"TermsOfServiceTranslation"> | string
  }

  export type TermsOfServiceCreateWithoutTranslationsInput = {
    created_at: bigint | number
    updated_at: bigint | number
  }

  export type TermsOfServiceUncheckedCreateWithoutTranslationsInput = {
    id?: number
    created_at: bigint | number
    updated_at: bigint | number
  }

  export type TermsOfServiceCreateOrConnectWithoutTranslationsInput = {
    where: TermsOfServiceWhereUniqueInput
    create: XOR<TermsOfServiceCreateWithoutTranslationsInput, TermsOfServiceUncheckedCreateWithoutTranslationsInput>
  }

  export type TermsOfServiceUpsertWithoutTranslationsInput = {
    update: XOR<TermsOfServiceUpdateWithoutTranslationsInput, TermsOfServiceUncheckedUpdateWithoutTranslationsInput>
    create: XOR<TermsOfServiceCreateWithoutTranslationsInput, TermsOfServiceUncheckedCreateWithoutTranslationsInput>
    where?: TermsOfServiceWhereInput
  }

  export type TermsOfServiceUpdateToOneWithWhereWithoutTranslationsInput = {
    where?: TermsOfServiceWhereInput
    data: XOR<TermsOfServiceUpdateWithoutTranslationsInput, TermsOfServiceUncheckedUpdateWithoutTranslationsInput>
  }

  export type TermsOfServiceUpdateWithoutTranslationsInput = {
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type TermsOfServiceUncheckedUpdateWithoutTranslationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type PrivacyPolicyTranslationCreateWithoutPrivacy_policyInput = {
    language: $Enums.Language
    content: string
  }

  export type PrivacyPolicyTranslationUncheckedCreateWithoutPrivacy_policyInput = {
    id?: number
    language: $Enums.Language
    content: string
  }

  export type PrivacyPolicyTranslationCreateOrConnectWithoutPrivacy_policyInput = {
    where: PrivacyPolicyTranslationWhereUniqueInput
    create: XOR<PrivacyPolicyTranslationCreateWithoutPrivacy_policyInput, PrivacyPolicyTranslationUncheckedCreateWithoutPrivacy_policyInput>
  }

  export type PrivacyPolicyTranslationCreateManyPrivacy_policyInputEnvelope = {
    data: PrivacyPolicyTranslationCreateManyPrivacy_policyInput | PrivacyPolicyTranslationCreateManyPrivacy_policyInput[]
    skipDuplicates?: boolean
  }

  export type PrivacyPolicyTranslationUpsertWithWhereUniqueWithoutPrivacy_policyInput = {
    where: PrivacyPolicyTranslationWhereUniqueInput
    update: XOR<PrivacyPolicyTranslationUpdateWithoutPrivacy_policyInput, PrivacyPolicyTranslationUncheckedUpdateWithoutPrivacy_policyInput>
    create: XOR<PrivacyPolicyTranslationCreateWithoutPrivacy_policyInput, PrivacyPolicyTranslationUncheckedCreateWithoutPrivacy_policyInput>
  }

  export type PrivacyPolicyTranslationUpdateWithWhereUniqueWithoutPrivacy_policyInput = {
    where: PrivacyPolicyTranslationWhereUniqueInput
    data: XOR<PrivacyPolicyTranslationUpdateWithoutPrivacy_policyInput, PrivacyPolicyTranslationUncheckedUpdateWithoutPrivacy_policyInput>
  }

  export type PrivacyPolicyTranslationUpdateManyWithWhereWithoutPrivacy_policyInput = {
    where: PrivacyPolicyTranslationScalarWhereInput
    data: XOR<PrivacyPolicyTranslationUpdateManyMutationInput, PrivacyPolicyTranslationUncheckedUpdateManyWithoutPrivacy_policyInput>
  }

  export type PrivacyPolicyTranslationScalarWhereInput = {
    AND?: PrivacyPolicyTranslationScalarWhereInput | PrivacyPolicyTranslationScalarWhereInput[]
    OR?: PrivacyPolicyTranslationScalarWhereInput[]
    NOT?: PrivacyPolicyTranslationScalarWhereInput | PrivacyPolicyTranslationScalarWhereInput[]
    id?: IntFilter<"PrivacyPolicyTranslation"> | number
    privacy_policy_id?: IntFilter<"PrivacyPolicyTranslation"> | number
    language?: EnumLanguageFilter<"PrivacyPolicyTranslation"> | $Enums.Language
    content?: StringFilter<"PrivacyPolicyTranslation"> | string
  }

  export type PrivacyPolicyCreateWithoutTranslationsInput = {
    created_at: bigint | number
    updated_at: bigint | number
  }

  export type PrivacyPolicyUncheckedCreateWithoutTranslationsInput = {
    id?: number
    created_at: bigint | number
    updated_at: bigint | number
  }

  export type PrivacyPolicyCreateOrConnectWithoutTranslationsInput = {
    where: PrivacyPolicyWhereUniqueInput
    create: XOR<PrivacyPolicyCreateWithoutTranslationsInput, PrivacyPolicyUncheckedCreateWithoutTranslationsInput>
  }

  export type PrivacyPolicyUpsertWithoutTranslationsInput = {
    update: XOR<PrivacyPolicyUpdateWithoutTranslationsInput, PrivacyPolicyUncheckedUpdateWithoutTranslationsInput>
    create: XOR<PrivacyPolicyCreateWithoutTranslationsInput, PrivacyPolicyUncheckedCreateWithoutTranslationsInput>
    where?: PrivacyPolicyWhereInput
  }

  export type PrivacyPolicyUpdateToOneWithWhereWithoutTranslationsInput = {
    where?: PrivacyPolicyWhereInput
    data: XOR<PrivacyPolicyUpdateWithoutTranslationsInput, PrivacyPolicyUncheckedUpdateWithoutTranslationsInput>
  }

  export type PrivacyPolicyUpdateWithoutTranslationsInput = {
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type PrivacyPolicyUncheckedUpdateWithoutTranslationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type AboutUsTranslationCreateWithoutAbout_usInput = {
    language: $Enums.Language
    content: string
  }

  export type AboutUsTranslationUncheckedCreateWithoutAbout_usInput = {
    id?: number
    language: $Enums.Language
    content: string
  }

  export type AboutUsTranslationCreateOrConnectWithoutAbout_usInput = {
    where: AboutUsTranslationWhereUniqueInput
    create: XOR<AboutUsTranslationCreateWithoutAbout_usInput, AboutUsTranslationUncheckedCreateWithoutAbout_usInput>
  }

  export type AboutUsTranslationCreateManyAbout_usInputEnvelope = {
    data: AboutUsTranslationCreateManyAbout_usInput | AboutUsTranslationCreateManyAbout_usInput[]
    skipDuplicates?: boolean
  }

  export type AboutUsTranslationUpsertWithWhereUniqueWithoutAbout_usInput = {
    where: AboutUsTranslationWhereUniqueInput
    update: XOR<AboutUsTranslationUpdateWithoutAbout_usInput, AboutUsTranslationUncheckedUpdateWithoutAbout_usInput>
    create: XOR<AboutUsTranslationCreateWithoutAbout_usInput, AboutUsTranslationUncheckedCreateWithoutAbout_usInput>
  }

  export type AboutUsTranslationUpdateWithWhereUniqueWithoutAbout_usInput = {
    where: AboutUsTranslationWhereUniqueInput
    data: XOR<AboutUsTranslationUpdateWithoutAbout_usInput, AboutUsTranslationUncheckedUpdateWithoutAbout_usInput>
  }

  export type AboutUsTranslationUpdateManyWithWhereWithoutAbout_usInput = {
    where: AboutUsTranslationScalarWhereInput
    data: XOR<AboutUsTranslationUpdateManyMutationInput, AboutUsTranslationUncheckedUpdateManyWithoutAbout_usInput>
  }

  export type AboutUsTranslationScalarWhereInput = {
    AND?: AboutUsTranslationScalarWhereInput | AboutUsTranslationScalarWhereInput[]
    OR?: AboutUsTranslationScalarWhereInput[]
    NOT?: AboutUsTranslationScalarWhereInput | AboutUsTranslationScalarWhereInput[]
    id?: IntFilter<"AboutUsTranslation"> | number
    about_us_id?: IntFilter<"AboutUsTranslation"> | number
    language?: EnumLanguageFilter<"AboutUsTranslation"> | $Enums.Language
    content?: StringFilter<"AboutUsTranslation"> | string
  }

  export type AboutUsCreateWithoutTranslationsInput = {

  }

  export type AboutUsUncheckedCreateWithoutTranslationsInput = {
    id?: number
  }

  export type AboutUsCreateOrConnectWithoutTranslationsInput = {
    where: AboutUsWhereUniqueInput
    create: XOR<AboutUsCreateWithoutTranslationsInput, AboutUsUncheckedCreateWithoutTranslationsInput>
  }

  export type AboutUsUpsertWithoutTranslationsInput = {
    update: XOR<AboutUsUpdateWithoutTranslationsInput, AboutUsUncheckedUpdateWithoutTranslationsInput>
    create: XOR<AboutUsCreateWithoutTranslationsInput, AboutUsUncheckedCreateWithoutTranslationsInput>
    where?: AboutUsWhereInput
  }

  export type AboutUsUpdateToOneWithWhereWithoutTranslationsInput = {
    where?: AboutUsWhereInput
    data: XOR<AboutUsUpdateWithoutTranslationsInput, AboutUsUncheckedUpdateWithoutTranslationsInput>
  }

  export type AboutUsUpdateWithoutTranslationsInput = {

  }

  export type AboutUsUncheckedUpdateWithoutTranslationsInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type FaqTranslationCreateWithoutFaqInput = {
    language: $Enums.Language
    title: string
    content: string
  }

  export type FaqTranslationUncheckedCreateWithoutFaqInput = {
    id?: number
    language: $Enums.Language
    title: string
    content: string
  }

  export type FaqTranslationCreateOrConnectWithoutFaqInput = {
    where: FaqTranslationWhereUniqueInput
    create: XOR<FaqTranslationCreateWithoutFaqInput, FaqTranslationUncheckedCreateWithoutFaqInput>
  }

  export type FaqTranslationCreateManyFaqInputEnvelope = {
    data: FaqTranslationCreateManyFaqInput | FaqTranslationCreateManyFaqInput[]
    skipDuplicates?: boolean
  }

  export type FaqTranslationUpsertWithWhereUniqueWithoutFaqInput = {
    where: FaqTranslationWhereUniqueInput
    update: XOR<FaqTranslationUpdateWithoutFaqInput, FaqTranslationUncheckedUpdateWithoutFaqInput>
    create: XOR<FaqTranslationCreateWithoutFaqInput, FaqTranslationUncheckedCreateWithoutFaqInput>
  }

  export type FaqTranslationUpdateWithWhereUniqueWithoutFaqInput = {
    where: FaqTranslationWhereUniqueInput
    data: XOR<FaqTranslationUpdateWithoutFaqInput, FaqTranslationUncheckedUpdateWithoutFaqInput>
  }

  export type FaqTranslationUpdateManyWithWhereWithoutFaqInput = {
    where: FaqTranslationScalarWhereInput
    data: XOR<FaqTranslationUpdateManyMutationInput, FaqTranslationUncheckedUpdateManyWithoutFaqInput>
  }

  export type FaqTranslationScalarWhereInput = {
    AND?: FaqTranslationScalarWhereInput | FaqTranslationScalarWhereInput[]
    OR?: FaqTranslationScalarWhereInput[]
    NOT?: FaqTranslationScalarWhereInput | FaqTranslationScalarWhereInput[]
    id?: IntFilter<"FaqTranslation"> | number
    faq_id?: IntFilter<"FaqTranslation"> | number
    language?: EnumLanguageFilter<"FaqTranslation"> | $Enums.Language
    title?: StringFilter<"FaqTranslation"> | string
    content?: StringFilter<"FaqTranslation"> | string
  }

  export type FaqCreateWithoutTranslationsInput = {
    created_at: bigint | number
    updated_at: bigint | number
  }

  export type FaqUncheckedCreateWithoutTranslationsInput = {
    id?: number
    created_at: bigint | number
    updated_at: bigint | number
  }

  export type FaqCreateOrConnectWithoutTranslationsInput = {
    where: FaqWhereUniqueInput
    create: XOR<FaqCreateWithoutTranslationsInput, FaqUncheckedCreateWithoutTranslationsInput>
  }

  export type FaqUpsertWithoutTranslationsInput = {
    update: XOR<FaqUpdateWithoutTranslationsInput, FaqUncheckedUpdateWithoutTranslationsInput>
    create: XOR<FaqCreateWithoutTranslationsInput, FaqUncheckedCreateWithoutTranslationsInput>
    where?: FaqWhereInput
  }

  export type FaqUpdateToOneWithWhereWithoutTranslationsInput = {
    where?: FaqWhereInput
    data: XOR<FaqUpdateWithoutTranslationsInput, FaqUncheckedUpdateWithoutTranslationsInput>
  }

  export type FaqUpdateWithoutTranslationsInput = {
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type FaqUncheckedUpdateWithoutTranslationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type DonationLinkCreateManyAdminInput = {
    id?: number
    currency_code: $Enums.CurrencyCode
    link: string
  }

  export type ProductCreateManyAdminInput = {
    id?: string
    category_id: number
    owner_id: number
    license_id: number
    name: string
    slug: string
    price_type: $Enums.PriceType
    download_link?: string | null
    is_published?: boolean
    is_pinned?: boolean
    created_at: bigint | number
    released_at: bigint | number
    updated_at: bigint | number
  }

  export type DonationLinkUpdateWithoutAdminInput = {
    currency_code?: EnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode
    link?: StringFieldUpdateOperationsInput | string
  }

  export type DonationLinkUncheckedUpdateWithoutAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    currency_code?: EnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode
    link?: StringFieldUpdateOperationsInput | string
  }

  export type DonationLinkUncheckedUpdateManyWithoutAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    currency_code?: EnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode
    link?: StringFieldUpdateOperationsInput | string
  }

  export type ProductUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price_type?: EnumPriceTypeFieldUpdateOperationsInput | $Enums.PriceType
    download_link?: NullableStringFieldUpdateOperationsInput | string | null
    is_published?: BoolFieldUpdateOperationsInput | boolean
    is_pinned?: BoolFieldUpdateOperationsInput | boolean
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    released_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
    category?: CategoryUpdateOneRequiredWithoutProductsNestedInput
    owner?: OwnerUpdateOneRequiredWithoutProductsNestedInput
    license?: LicenseUpdateOneRequiredWithoutProductsNestedInput
    translations?: ProductTranslationUpdateManyWithoutProductNestedInput
    discounts?: ProductDiscountUpdateOneWithoutProductNestedInput
    coupons?: ProductCouponUpdateOneWithoutProductNestedInput
    images?: ProductImageUpdateManyWithoutProductNestedInput
    variants?: ProductVariantUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    category_id?: IntFieldUpdateOperationsInput | number
    owner_id?: IntFieldUpdateOperationsInput | number
    license_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price_type?: EnumPriceTypeFieldUpdateOperationsInput | $Enums.PriceType
    download_link?: NullableStringFieldUpdateOperationsInput | string | null
    is_published?: BoolFieldUpdateOperationsInput | boolean
    is_pinned?: BoolFieldUpdateOperationsInput | boolean
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    released_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
    translations?: ProductTranslationUncheckedUpdateManyWithoutProductNestedInput
    discounts?: ProductDiscountUncheckedUpdateOneWithoutProductNestedInput
    coupons?: ProductCouponUncheckedUpdateOneWithoutProductNestedInput
    images?: ProductImageUncheckedUpdateManyWithoutProductNestedInput
    variants?: ProductVariantUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    category_id?: IntFieldUpdateOperationsInput | number
    owner_id?: IntFieldUpdateOperationsInput | number
    license_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price_type?: EnumPriceTypeFieldUpdateOperationsInput | $Enums.PriceType
    download_link?: NullableStringFieldUpdateOperationsInput | string | null
    is_published?: BoolFieldUpdateOperationsInput | boolean
    is_pinned?: BoolFieldUpdateOperationsInput | boolean
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    released_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ProductCreateManyOwnerInput = {
    id?: string
    category_id: number
    admin_id: string
    license_id: number
    name: string
    slug: string
    price_type: $Enums.PriceType
    download_link?: string | null
    is_published?: boolean
    is_pinned?: boolean
    created_at: bigint | number
    released_at: bigint | number
    updated_at: bigint | number
  }

  export type ProductUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price_type?: EnumPriceTypeFieldUpdateOperationsInput | $Enums.PriceType
    download_link?: NullableStringFieldUpdateOperationsInput | string | null
    is_published?: BoolFieldUpdateOperationsInput | boolean
    is_pinned?: BoolFieldUpdateOperationsInput | boolean
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    released_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
    admin?: AdminUpdateOneRequiredWithoutProductsNestedInput
    category?: CategoryUpdateOneRequiredWithoutProductsNestedInput
    license?: LicenseUpdateOneRequiredWithoutProductsNestedInput
    translations?: ProductTranslationUpdateManyWithoutProductNestedInput
    discounts?: ProductDiscountUpdateOneWithoutProductNestedInput
    coupons?: ProductCouponUpdateOneWithoutProductNestedInput
    images?: ProductImageUpdateManyWithoutProductNestedInput
    variants?: ProductVariantUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    category_id?: IntFieldUpdateOperationsInput | number
    admin_id?: StringFieldUpdateOperationsInput | string
    license_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price_type?: EnumPriceTypeFieldUpdateOperationsInput | $Enums.PriceType
    download_link?: NullableStringFieldUpdateOperationsInput | string | null
    is_published?: BoolFieldUpdateOperationsInput | boolean
    is_pinned?: BoolFieldUpdateOperationsInput | boolean
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    released_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
    translations?: ProductTranslationUncheckedUpdateManyWithoutProductNestedInput
    discounts?: ProductDiscountUncheckedUpdateOneWithoutProductNestedInput
    coupons?: ProductCouponUncheckedUpdateOneWithoutProductNestedInput
    images?: ProductImageUncheckedUpdateManyWithoutProductNestedInput
    variants?: ProductVariantUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    category_id?: IntFieldUpdateOperationsInput | number
    admin_id?: StringFieldUpdateOperationsInput | string
    license_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price_type?: EnumPriceTypeFieldUpdateOperationsInput | $Enums.PriceType
    download_link?: NullableStringFieldUpdateOperationsInput | string | null
    is_published?: BoolFieldUpdateOperationsInput | boolean
    is_pinned?: BoolFieldUpdateOperationsInput | boolean
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    released_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ProductCreateManyLicenseInput = {
    id?: string
    category_id: number
    admin_id: string
    owner_id: number
    name: string
    slug: string
    price_type: $Enums.PriceType
    download_link?: string | null
    is_published?: boolean
    is_pinned?: boolean
    created_at: bigint | number
    released_at: bigint | number
    updated_at: bigint | number
  }

  export type LicenseTranslationCreateManyLicenseInput = {
    id?: number
    language: $Enums.Language
    name: string
    content: string
  }

  export type ProductUpdateWithoutLicenseInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price_type?: EnumPriceTypeFieldUpdateOperationsInput | $Enums.PriceType
    download_link?: NullableStringFieldUpdateOperationsInput | string | null
    is_published?: BoolFieldUpdateOperationsInput | boolean
    is_pinned?: BoolFieldUpdateOperationsInput | boolean
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    released_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
    admin?: AdminUpdateOneRequiredWithoutProductsNestedInput
    category?: CategoryUpdateOneRequiredWithoutProductsNestedInput
    owner?: OwnerUpdateOneRequiredWithoutProductsNestedInput
    translations?: ProductTranslationUpdateManyWithoutProductNestedInput
    discounts?: ProductDiscountUpdateOneWithoutProductNestedInput
    coupons?: ProductCouponUpdateOneWithoutProductNestedInput
    images?: ProductImageUpdateManyWithoutProductNestedInput
    variants?: ProductVariantUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutLicenseInput = {
    id?: StringFieldUpdateOperationsInput | string
    category_id?: IntFieldUpdateOperationsInput | number
    admin_id?: StringFieldUpdateOperationsInput | string
    owner_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price_type?: EnumPriceTypeFieldUpdateOperationsInput | $Enums.PriceType
    download_link?: NullableStringFieldUpdateOperationsInput | string | null
    is_published?: BoolFieldUpdateOperationsInput | boolean
    is_pinned?: BoolFieldUpdateOperationsInput | boolean
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    released_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
    translations?: ProductTranslationUncheckedUpdateManyWithoutProductNestedInput
    discounts?: ProductDiscountUncheckedUpdateOneWithoutProductNestedInput
    coupons?: ProductCouponUncheckedUpdateOneWithoutProductNestedInput
    images?: ProductImageUncheckedUpdateManyWithoutProductNestedInput
    variants?: ProductVariantUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutLicenseInput = {
    id?: StringFieldUpdateOperationsInput | string
    category_id?: IntFieldUpdateOperationsInput | number
    admin_id?: StringFieldUpdateOperationsInput | string
    owner_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price_type?: EnumPriceTypeFieldUpdateOperationsInput | $Enums.PriceType
    download_link?: NullableStringFieldUpdateOperationsInput | string | null
    is_published?: BoolFieldUpdateOperationsInput | boolean
    is_pinned?: BoolFieldUpdateOperationsInput | boolean
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    released_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type LicenseTranslationUpdateWithoutLicenseInput = {
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    name?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type LicenseTranslationUncheckedUpdateWithoutLicenseInput = {
    id?: IntFieldUpdateOperationsInput | number
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    name?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type LicenseTranslationUncheckedUpdateManyWithoutLicenseInput = {
    id?: IntFieldUpdateOperationsInput | number
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    name?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type ProductCreateManyCategoryInput = {
    id?: string
    admin_id: string
    owner_id: number
    license_id: number
    name: string
    slug: string
    price_type: $Enums.PriceType
    download_link?: string | null
    is_published?: boolean
    is_pinned?: boolean
    created_at: bigint | number
    released_at: bigint | number
    updated_at: bigint | number
  }

  export type ProductUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price_type?: EnumPriceTypeFieldUpdateOperationsInput | $Enums.PriceType
    download_link?: NullableStringFieldUpdateOperationsInput | string | null
    is_published?: BoolFieldUpdateOperationsInput | boolean
    is_pinned?: BoolFieldUpdateOperationsInput | boolean
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    released_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
    admin?: AdminUpdateOneRequiredWithoutProductsNestedInput
    owner?: OwnerUpdateOneRequiredWithoutProductsNestedInput
    license?: LicenseUpdateOneRequiredWithoutProductsNestedInput
    translations?: ProductTranslationUpdateManyWithoutProductNestedInput
    discounts?: ProductDiscountUpdateOneWithoutProductNestedInput
    coupons?: ProductCouponUpdateOneWithoutProductNestedInput
    images?: ProductImageUpdateManyWithoutProductNestedInput
    variants?: ProductVariantUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    admin_id?: StringFieldUpdateOperationsInput | string
    owner_id?: IntFieldUpdateOperationsInput | number
    license_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price_type?: EnumPriceTypeFieldUpdateOperationsInput | $Enums.PriceType
    download_link?: NullableStringFieldUpdateOperationsInput | string | null
    is_published?: BoolFieldUpdateOperationsInput | boolean
    is_pinned?: BoolFieldUpdateOperationsInput | boolean
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    released_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
    translations?: ProductTranslationUncheckedUpdateManyWithoutProductNestedInput
    discounts?: ProductDiscountUncheckedUpdateOneWithoutProductNestedInput
    coupons?: ProductCouponUncheckedUpdateOneWithoutProductNestedInput
    images?: ProductImageUncheckedUpdateManyWithoutProductNestedInput
    variants?: ProductVariantUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    admin_id?: StringFieldUpdateOperationsInput | string
    owner_id?: IntFieldUpdateOperationsInput | number
    license_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    price_type?: EnumPriceTypeFieldUpdateOperationsInput | $Enums.PriceType
    download_link?: NullableStringFieldUpdateOperationsInput | string | null
    is_published?: BoolFieldUpdateOperationsInput | boolean
    is_pinned?: BoolFieldUpdateOperationsInput | boolean
    created_at?: BigIntFieldUpdateOperationsInput | bigint | number
    released_at?: BigIntFieldUpdateOperationsInput | bigint | number
    updated_at?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ProductTranslationCreateManyProductInput = {
    id?: string
    language: $Enums.Language
    description: string
    changelog?: string | null
  }

  export type ProductImageCreateManyProductInput = {
    id?: string
    url: string
    is_thumbnail: boolean
    width: number
    height: number
  }

  export type ProductVariantCreateManyProductInput = {
    id?: string
    name: string
    download_link?: string | null
  }

  export type ProductTranslationUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    description?: StringFieldUpdateOperationsInput | string
    changelog?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductTranslationUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    description?: StringFieldUpdateOperationsInput | string
    changelog?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductTranslationUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    description?: StringFieldUpdateOperationsInput | string
    changelog?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductImageUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    is_thumbnail?: BoolFieldUpdateOperationsInput | boolean
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
  }

  export type ProductImageUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    is_thumbnail?: BoolFieldUpdateOperationsInput | boolean
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
  }

  export type ProductImageUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    is_thumbnail?: BoolFieldUpdateOperationsInput | boolean
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
  }

  export type ProductVariantUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    download_link?: NullableStringFieldUpdateOperationsInput | string | null
    prices?: ProductPriceUpdateManyWithoutVariantNestedInput
  }

  export type ProductVariantUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    download_link?: NullableStringFieldUpdateOperationsInput | string | null
    prices?: ProductPriceUncheckedUpdateManyWithoutVariantNestedInput
  }

  export type ProductVariantUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    download_link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductPriceCreateManyVariantInput = {
    id?: string
    currency_code: $Enums.CurrencyCode
    price: number
  }

  export type ProductPriceUpdateWithoutVariantInput = {
    id?: StringFieldUpdateOperationsInput | string
    currency_code?: EnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode
    price?: IntFieldUpdateOperationsInput | number
  }

  export type ProductPriceUncheckedUpdateWithoutVariantInput = {
    id?: StringFieldUpdateOperationsInput | string
    currency_code?: EnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode
    price?: IntFieldUpdateOperationsInput | number
  }

  export type ProductPriceUncheckedUpdateManyWithoutVariantInput = {
    id?: StringFieldUpdateOperationsInput | string
    currency_code?: EnumCurrencyCodeFieldUpdateOperationsInput | $Enums.CurrencyCode
    price?: IntFieldUpdateOperationsInput | number
  }

  export type TermsOfServiceTranslationCreateManyTerms_of_serviceInput = {
    id?: number
    language: $Enums.Language
    content: string
  }

  export type TermsOfServiceTranslationUpdateWithoutTerms_of_serviceInput = {
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    content?: StringFieldUpdateOperationsInput | string
  }

  export type TermsOfServiceTranslationUncheckedUpdateWithoutTerms_of_serviceInput = {
    id?: IntFieldUpdateOperationsInput | number
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    content?: StringFieldUpdateOperationsInput | string
  }

  export type TermsOfServiceTranslationUncheckedUpdateManyWithoutTerms_of_serviceInput = {
    id?: IntFieldUpdateOperationsInput | number
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    content?: StringFieldUpdateOperationsInput | string
  }

  export type PrivacyPolicyTranslationCreateManyPrivacy_policyInput = {
    id?: number
    language: $Enums.Language
    content: string
  }

  export type PrivacyPolicyTranslationUpdateWithoutPrivacy_policyInput = {
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    content?: StringFieldUpdateOperationsInput | string
  }

  export type PrivacyPolicyTranslationUncheckedUpdateWithoutPrivacy_policyInput = {
    id?: IntFieldUpdateOperationsInput | number
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    content?: StringFieldUpdateOperationsInput | string
  }

  export type PrivacyPolicyTranslationUncheckedUpdateManyWithoutPrivacy_policyInput = {
    id?: IntFieldUpdateOperationsInput | number
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    content?: StringFieldUpdateOperationsInput | string
  }

  export type AboutUsTranslationCreateManyAbout_usInput = {
    id?: number
    language: $Enums.Language
    content: string
  }

  export type AboutUsTranslationUpdateWithoutAbout_usInput = {
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    content?: StringFieldUpdateOperationsInput | string
  }

  export type AboutUsTranslationUncheckedUpdateWithoutAbout_usInput = {
    id?: IntFieldUpdateOperationsInput | number
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    content?: StringFieldUpdateOperationsInput | string
  }

  export type AboutUsTranslationUncheckedUpdateManyWithoutAbout_usInput = {
    id?: IntFieldUpdateOperationsInput | number
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    content?: StringFieldUpdateOperationsInput | string
  }

  export type FaqTranslationCreateManyFaqInput = {
    id?: number
    language: $Enums.Language
    title: string
    content: string
  }

  export type FaqTranslationUpdateWithoutFaqInput = {
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type FaqTranslationUncheckedUpdateWithoutFaqInput = {
    id?: IntFieldUpdateOperationsInput | number
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }

  export type FaqTranslationUncheckedUpdateManyWithoutFaqInput = {
    id?: IntFieldUpdateOperationsInput | number
    language?: EnumLanguageFieldUpdateOperationsInput | $Enums.Language
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}